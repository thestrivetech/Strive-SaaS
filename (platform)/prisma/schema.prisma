// ============================================================================
// STRIVE PLATFORM SCHEMA - UI-FIRST APPROACH
// ============================================================================
// Created: 2025-10-10
// Based on: Actual UI requirements from mock data analysis
// Models: 41 (down from 83 - 52% reduction!)
// Purpose: Production-ready schema validated by real UI pages
//
// See SCHEMA-MAPPING.md for complete field-to-mock-data mapping
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

// --- Core Enums ---
enum SubscriptionTier {
  FREE
  CUSTOM
  STARTER
  GROWTH
  ELITE
  ENTERPRISE
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// --- CRM Enums ---
enum LeadSource {
  WEBSITE
  REFERRAL
  GOOGLE_ADS
  SOCIAL_MEDIA
  COLD_CALL
  EMAIL_CAMPAIGN
  EVENT
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW_LEAD
  IN_CONTACT
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
}

enum LeadScore {
  HOT
  WARM
  COLD
}

enum DealStage {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSING
  WON
  LOST
}

// --- Transaction Enums ---
enum LoopStatus {
  ACTIVE
  PENDING
  CLOSING
  CLOSED
  CANCELLED
}

enum DealType {
  PURCHASE
  SALE
  LEASE
  REFINANCE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentCategory {
  CONTRACT
  DISCLOSURE
  INSPECTION
  APPRAISAL
  OTHER
}

enum PartyRole {
  BUYER
  SELLER
  AGENT
  ATTORNEY
  LENDER
  INSPECTOR
  TITLE_COMPANY
}

enum SignatureStatus {
  PENDING
  SIGNED
  DECLINED
  EXPIRED
}

enum PropertyType {
  HOUSE
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
  MULTI_FAMILY
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  OFF_MARKET
}

enum TransactionAction {
  CREATE
  UPDATE
  COMPLETE
  COMMENT
}

enum TransactionEntityType {
  loop
  task
  document
  party
  signature
}

// --- Marketplace Enums ---
enum ToolCategory {
  FOUNDATION
  GROWTH
  ELITE
  CUSTOM
  ADVANCED
  INTEGRATION
}

enum ToolTier {
  T1
  T2
  T3
}

enum BillingPeriod {
  MONTHLY
  YEARLY
  ONE_TIME
}

enum BundleType {
  STARTER_PACK
  GROWTH_PACK
  ELITE_PACK
  CUSTOM_PACK
}

enum PurchaseStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
}

// --- Content/CMS Enums ---
enum ContentType {
  BLOG_POST
  PAGE
  ARTICLE
  LANDING_PAGE
}

enum ContentStatus {
  PUBLISHED
  DRAFT
  SCHEDULED
  ARCHIVED
}

enum CampaignType {
  EMAIL
  SOCIAL
  SMS
  MULTI_CHANNEL
}

enum CampaignStatus {
  DRAFT
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// --- Expense & Tax Enums ---
enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  DEBIT_CARD
  WIRE_TRANSFER
  OTHER
}

enum TaxCategory {
  ADVERTISING
  VEHICLE
  COMMISSIONS
  INSURANCE
  LEGAL
  OFFICE
  RENT
  REPAIRS
  SUPPLIES
  TRAVEL
  MEALS
  UTILITIES
  OTHER
}

enum ReportType {
  QUARTERLY
  ANNUAL
  CUSTOM
}

// --- REID/Analytics Enums ---
enum MarketTemperature {
  HOT
  WARM
  MODERATE
  COOL
  COLD
}

enum EducationLevel {
  HIGH_SCHOOL
  SOME_COLLEGE
  BACHELORS
  GRADUATE
}

enum AlertType {
  PRICE_DROP
  HOT_MARKET
  NEW_LISTING
  INVESTMENT_OPPORTUNITY
  MARKET_SHIFT
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SchoolType {
  ELEMENTARY
  MIDDLE
  HIGH
  PRIVATE
  CHARTER
}

// --- AI Hub Enums ---
enum ConversationStatus {
  ACTIVE
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TriggerType {
  SCHEDULE
  EVENT
  MANUAL
  WEBHOOK
}

enum ActionType {
  EMAIL
  SMS
  API_CALL
  CREATE_TASK
  UPDATE_RECORD
  NOTIFICATION
}

enum AutomationStatus {
  ACTIVE
  PAUSED
  DRAFT
  ERROR
}

enum AIFeature {
  CHAT
  AUTOMATION
  INSIGHTS
  CONTENT_GEN
  ANALYSIS
}

// --- Supporting Enums ---
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  VIEW
  SHARE
  COMMENT
}

// ============================================================================
// CORE MODELS (3)
// ============================================================================

/// User model - Core authentication and profile
/// RLS: Enabled via Supabase auth
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  avatar_url        String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  organization_members OrganizationMember[]
  contacts             Contact[]
  leads                Lead[]               @relation("AssignedLeads")
  customers            Customer[]
  deals                Deal[]               @relation("AssignedDeals")
  loops                Loop[]
  tasks                Task[]               @relation("AssignedTasks")
  documents            Document[]
  content_items        ContentItem[]
  campaigns            Campaign[]
  expenses             Expense[]
  receipts             Receipt[]
  roi_simulations      ROISimulation[]
  alerts               Alert[]
  ai_profiles          AIProfile[]
  conversations        Conversation[]
  automations          Automation[]
  ai_usage             AIUsage[]
  appointments         Appointment[]
  activities           Activity[]
  widgets              Widget[]
  transaction_activities TransactionActivity[]
  purchases            Purchase[]
  reviews              Review[]
  cart                 Cart?
  listings             Listing[]

  @@index([email])
}

/// Organization model - Multi-tenant structure
/// RLS: Enabled - all child models filtered by organization_id
model Organization {
  id                String           @id @default(cuid())
  name              String
  slug              String           @unique
  subscription_tier SubscriptionTier @default(FREE)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  // Relations
  members            OrganizationMember[]
  contacts           Contact[]
  leads              Lead[]
  customers          Customer[]
  deals              Deal[]
  loops              Loop[]
  content_items      ContentItem[]
  campaigns          Campaign[]
  expenses           Expense[]
  expense_categories ExpenseCategory[]
  tax_estimates      TaxEstimate[]
  tax_reports        TaxReport[]
  roi_simulations    ROISimulation[]
  alerts             Alert[]
  ai_profiles        AIProfile[]
  conversations      Conversation[]
  automations        Automation[]
  ai_usage           AIUsage[]
  appointments       Appointment[]
  activities         Activity[]
  widgets            Widget[]
  purchases          Purchase[]
  reviews            Review[]
  listings           Listing[]

  @@index([slug])
  @@index([subscription_tier])
}

/// OrganizationMember model - User-Org many-to-many with role
model OrganizationMember {
  id              String       @id @default(cuid())
  organization_id String
  user_id         String
  role            OrgRole      @default(MEMBER)
  created_at      DateTime     @default(now())

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, user_id])
  @@index([organization_id])
  @@index([user_id])
}

// ============================================================================
// CRM MODELS (4)
// ============================================================================

/// Contact model - CRM contact management
/// Mock: MockContact from lib/data/mocks/crm.ts
model Contact {
  id              String       @id @default(cuid())
  organization_id String
  user_id         String
  name            String
  email           String
  phone           String?
  company         String?
  role            String?
  tags            String[]
  notes           String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([email])
}

/// Lead model - Lead management and tracking
/// Mock: MockLead from lib/data/mocks/crm.ts
model Lead {
  id              String      @id @default(cuid())
  organization_id String
  name            String
  email           String
  phone           String?
  company         String?
  source          LeadSource
  status          LeadStatus
  score           LeadScore
  score_value     Int
  budget          Decimal?
  timeline        String?
  notes           String?
  tags            String[]
  custom_fields   Json?
  assigned_to_id  String?
  last_contact_at DateTime?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to  User?        @relation("AssignedLeads", fields: [assigned_to_id], references: [id])
  deals        Deal[]

  @@index([organization_id])
  @@index([status])
  @@index([assigned_to_id])
  @@index([score])
}

/// Customer model - Customer/client management
/// Mock: MockCustomer from lib/data/mocks/crm.ts
model Customer {
  id              String       @id @default(cuid())
  organization_id String
  user_id         String
  name            String
  email           String
  phone           String?
  company         String?
  address_street  String?
  address_city    String?
  address_state   String?
  address_zip     String?
  lifetime_value  Decimal      @default(0)
  tags            String[]
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])
  deals        Deal[]

  @@index([organization_id])
  @@index([user_id])
  @@index([email])
}

/// Deal model - Sales pipeline/deals
/// Mock: Derived from analytics funnel data
model Deal {
  id              String      @id @default(cuid())
  organization_id String
  title           String
  value           Decimal
  stage           DealStage
  probability     Int         @default(50)
  expected_close  DateTime?
  lead_id         String?
  customer_id     String?
  assigned_to_id  String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  lead         Lead?        @relation(fields: [lead_id], references: [id])
  customer     Customer?    @relation(fields: [customer_id], references: [id])
  assigned_to  User?        @relation("AssignedDeals", fields: [assigned_to_id], references: [id])

  @@index([organization_id])
  @@index([stage])
  @@index([assigned_to_id])
}

// ============================================================================
// TRANSACTION/WORKSPACE MODELS (7)
// ============================================================================

/// Loop model - Transaction loop (real estate transaction)
/// Mock: MockLoop from lib/data/mocks/transactions.ts
model Loop {
  id               String     @id @default(cuid())
  organization_id  String
  created_by_id    String
  title            String
  property_address String
  property_city    String
  property_state   String
  property_zip     String
  status           LoopStatus
  deal_type        DealType
  purchase_price   Decimal
  closing_date     DateTime?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  organization Organization          @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by   User                  @relation(fields: [created_by_id], references: [id])

  tasks        Task[]
  documents    Document[]
  parties      Party[]
  signatures   Signature[]
  activities   TransactionActivity[]

  @@index([organization_id])
  @@index([status])
  @@index([created_by_id])
}

/// Task model - Tasks within a transaction loop
/// Mock: MockTask from lib/data/mocks/transactions.ts
model Task {
  id             String        @id @default(cuid())
  loop_id        String
  title          String
  description    String?
  status         TaskStatus
  priority       TaskPriority
  due_date       DateTime?
  assigned_to_id String?
  completed_at   DateTime?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  loop        Loop  @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  assigned_to User? @relation("AssignedTasks", fields: [assigned_to_id], references: [id])

  @@index([loop_id])
  @@index([status])
  @@index([assigned_to_id])
  @@index([due_date])
}

/// Document model - Transaction documents
/// Mock: MockDocument from lib/data/mocks/transactions.ts
model Document {
  id             String           @id @default(cuid())
  loop_id        String
  filename       String
  file_url       String
  file_size      Int
  mime_type      String
  category       DocumentCategory
  uploaded_by_id String
  uploaded_at    DateTime         @default(now())

  loop        Loop        @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  uploaded_by User        @relation(fields: [uploaded_by_id], references: [id])
  signatures  Signature[]

  @@index([loop_id])
  @@index([category])
}

/// Party model - Transaction parties (buyers, sellers, agents, etc.)
/// Mock: MockParty from lib/data/mocks/transactions.ts
model Party {
  id         String    @id @default(cuid())
  loop_id    String
  name       String
  email      String
  phone      String?
  role       PartyRole
  created_at DateTime  @default(now())

  loop       Loop        @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  signatures Signature[]

  @@index([loop_id])
  @@index([role])
}

/// Signature model - Document signature requests
/// Mock: MockSignature from lib/data/mocks/transactions.ts
model Signature {
  id             String          @id @default(cuid())
  loop_id        String
  document_id    String
  party_id       String
  status         SignatureStatus
  requested_at   DateTime        @default(now())
  signed_at      DateTime?
  signature_data String?

  loop     Loop     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  party    Party    @relation(fields: [party_id], references: [id], onDelete: Cascade)

  @@index([loop_id])
  @@index([status])
}

/// Listing model - Property listings
/// Mock: MockListing from lib/data/mocks/transactions.ts
model Listing {
  id              String        @id @default(cuid())
  organization_id String
  agent_id        String
  title           String
  property_type   PropertyType
  address         String
  city            String
  state           String
  zip             String
  price           Decimal
  bedrooms        Int
  bathrooms       Int
  sqft            Int
  status          ListingStatus
  description     String
  images          String[]
  listed_date     DateTime
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  agent        User         @relation(fields: [agent_id], references: [id])

  @@index([organization_id])
  @@index([status])
  @@index([property_type])
  @@index([city, state])
}

/// TransactionActivity model - Activity log for transactions
/// Mock: MockTransactionActivity from lib/data/mocks/transactions.ts
model TransactionActivity {
  id          String                @id @default(cuid())
  loop_id     String
  user_id     String
  action      TransactionAction
  entity_type TransactionEntityType
  entity_id   String
  details     String?
  timestamp   DateTime              @default(now())

  loop Loop @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id])

  @@index([loop_id])
  @@index([timestamp])
}

// ============================================================================
// MARKETPLACE MODELS (6)
// ============================================================================

/// Tool model - Marketplace tools
/// Mock: MockTool from lib/data/mocks/marketplace.ts
model Tool {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String
  long_description String?
  category        ToolCategory
  tier            ToolTier
  price           Int            // in cents
  billing_period  BillingPeriod
  features        String[]
  icon_url        String?
  tags            String[]
  is_active       Boolean        @default(true)
  install_count   Int            @default(0)
  average_rating  Decimal        @default(0)
  review_count    Int            @default(0)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  purchases   Purchase[]
  reviews     Review[]
  bundles     BundleTools[]

  @@index([category])
  @@index([tier])
  @@index([is_active])
}

/// Bundle model - Tool bundles
/// Mock: MockBundle from lib/data/mocks/marketplace.ts
model Bundle {
  id                  String        @id @default(cuid())
  name                String
  slug                String        @unique
  description         String
  bundle_type         BundleType
  price               Int           // in cents
  discount_percentage Int
  is_active           Boolean       @default(true)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  tools     BundleTools[]
  purchases Purchase[]

  @@index([bundle_type])
  @@index([is_active])
}

/// BundleTools model - Many-to-many junction for bundles and tools
model BundleTools {
  bundle_id String
  tool_id   String

  bundle Bundle @relation(fields: [bundle_id], references: [id], onDelete: Cascade)
  tool   Tool   @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  @@id([bundle_id, tool_id])
  @@index([bundle_id])
  @@index([tool_id])
}

/// Purchase model - Tool/bundle purchases
/// Mock: MockPurchase from lib/data/mocks/marketplace.ts
model Purchase {
  id                 String          @id @default(cuid())
  organization_id    String
  user_id            String
  tool_id            String?
  bundle_id          String?
  price_at_purchase  Int
  status             PurchaseStatus
  purchased_at       DateTime        @default(now())
  expires_at         DateTime?

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])
  tool         Tool?        @relation(fields: [tool_id], references: [id])
  bundle       Bundle?      @relation(fields: [bundle_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([status])
}

/// Review model - Tool reviews
/// Mock: MockReview from lib/data/mocks/marketplace.ts
model Review {
  id              String       @id @default(cuid())
  tool_id         String
  user_id         String
  organization_id String
  rating          Int          // 1-5
  review_text     String?
  created_at      DateTime     @default(now())

  tool         Tool         @relation(fields: [tool_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([tool_id])
  @@index([rating])
}

/// Cart model - User shopping cart
/// Mock: MockCart from lib/data/mocks/marketplace.ts
model Cart {
  id          String   @id @default(cuid())
  user_id     String   @unique
  tools       String[] // tool IDs
  bundles     String[] // bundle IDs
  total_price Int
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// ============================================================================
// CMS/CONTENT MODELS (3)
// ============================================================================

/// ContentItem model - Content management (blog, pages, articles)
/// Mock: MockContentItem from lib/data/mocks/content.ts
model ContentItem {
  id              String        @id @default(cuid())
  organization_id String
  author_id       String
  title           String
  slug            String
  content         String
  excerpt         String
  type            ContentType
  status          ContentStatus
  published_at    DateTime?
  scheduled_at    DateTime?
  view_count      Int           @default(0)
  share_count     Int           @default(0)
  like_count      Int           @default(0)
  comment_count   Int           @default(0)
  category_id     String?
  tags            String[]
  seo_title       String?
  seo_description String?
  featured_image  String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  author       User         @relation(fields: [author_id], references: [id])

  @@unique([organization_id, slug])
  @@index([organization_id])
  @@index([status])
  @@index([type])
}

/// Campaign model - Marketing campaigns
/// Mock: MockCampaign from lib/data/mocks/content.ts
model Campaign {
  id              String         @id @default(cuid())
  organization_id String
  created_by      String
  name            String
  description     String
  type            CampaignType
  status          CampaignStatus
  start_date      DateTime?
  end_date        DateTime?
  target_audience String?
  budget          Decimal?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  organization    Organization    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator         User            @relation(fields: [created_by], references: [id])
  email_campaigns EmailCampaign[]

  @@index([organization_id])
  @@index([status])
  @@index([type])
}

/// EmailCampaign model - Email campaigns
/// Mock: MockEmailCampaign from lib/data/mocks/content.ts
model EmailCampaign {
  id                 String   @id @default(cuid())
  campaign_id        String
  subject            String
  from_name          String
  from_email         String
  preview_text       String
  html_content       String
  sent_count         Int      @default(0)
  opened_count       Int      @default(0)
  clicked_count      Int      @default(0)
  bounced_count      Int      @default(0)
  unsubscribed_count Int      @default(0)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@index([campaign_id])
}

// ============================================================================
// EXPENSE & TAX MODELS (5)
// ============================================================================

/// Expense model - Expense tracking
/// Mock: MockExpense from lib/data/mocks/expenses.ts
model Expense {
  id                String          @id @default(cuid())
  organization_id   String
  created_by_id     String
  title             String
  description       String?
  amount            Int             // in cents
  category_id       String
  vendor            String
  date              DateTime
  payment_method    PaymentMethod
  receipt_url       String?
  is_tax_deductible Boolean         @default(false)
  tax_category      TaxCategory?
  notes             String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt

  organization Organization    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by   User            @relation(fields: [created_by_id], references: [id])
  category     ExpenseCategory @relation(fields: [category_id], references: [id])
  receipts     Receipt[]

  @@index([organization_id])
  @@index([category_id])
  @@index([date])
  @@index([is_tax_deductible])
}

/// ExpenseCategory model - Expense categories
/// Mock: MockExpenseCategory from lib/data/mocks/expenses.ts
model ExpenseCategory {
  id              String       @id @default(cuid())
  organization_id String
  name            String
  description     String?
  color           String
  icon            String?
  is_default      Boolean      @default(false)
  is_custom       Boolean      @default(false)
  expense_count   Int          @default(0)
  total_amount    Int          @default(0) // in cents
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  expenses     Expense[]

  @@index([organization_id])
}

/// TaxEstimate model - Quarterly tax estimates
/// Mock: MockTaxEstimate from lib/data/mocks/expenses.ts
model TaxEstimate {
  id                  String       @id @default(cuid())
  organization_id     String
  year                Int
  quarter             Int          // 1-4
  total_income        Int          // in cents
  total_expenses      Int          // in cents
  deductible_expenses Int          // in cents
  estimated_tax_rate  Int          // percentage
  estimated_tax_owed  Int          // in cents
  tax_paid            Int          // in cents
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, year, quarter])
  @@index([organization_id])
  @@index([year])
}

/// Receipt model - Expense receipts
/// Mock: MockReceipt from lib/data/mocks/expenses.ts
model Receipt {
  id             String   @id @default(cuid())
  expense_id     String
  file_url       String
  file_name      String
  file_size      Int
  mime_type      String
  uploaded_at    DateTime @default(now())
  uploaded_by_id String

  expense     Expense @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  uploaded_by User    @relation(fields: [uploaded_by_id], references: [id])

  @@index([expense_id])
}

/// TaxReport model - Tax reports (quarterly/annual)
/// Mock: MockTaxReport from lib/data/mocks/expenses.ts
model TaxReport {
  id                      String       @id @default(cuid())
  organization_id         String
  title                   String
  report_type             ReportType
  year                    Int
  quarter                 Int?
  start_date              DateTime
  end_date                DateTime
  total_income            Int
  total_expenses          Int
  deductible_expenses     Int
  non_deductible_expenses Int
  net_income              Int
  estimated_tax           Int
  category_breakdown      Json
  generated_at            DateTime     @default(now())

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([year])
  @@index([report_type])
}

// ============================================================================
// REID/ANALYTICS MODELS (6)
// ============================================================================

/// MarketData model - Real estate market data by zip
/// Mock: MockMarketData from lib/data/mocks/reid.ts
model MarketData {
  id                 String            @id @default(cuid())
  zip_code           String
  city               String
  state              String
  county             String
  median_price       Decimal
  price_change_1mo   Decimal
  price_change_3mo   Decimal
  price_change_1yr   Decimal
  avg_days_on_market Int
  inventory_count    Int
  sales_volume       Decimal
  price_per_sqft     Decimal
  market_temperature MarketTemperature
  demand_score       Int
  supply_score       Int
  investment_score   Int
  last_updated       DateTime          @default(now())

  @@unique([zip_code])
  @@index([city, state])
  @@index([market_temperature])
}

/// Demographics model - Demographic data by zip
/// Mock: MockDemographics from lib/data/mocks/reid.ts
model Demographics {
  id                  String         @id @default(cuid())
  zip_code            String         @unique
  city                String
  state               String
  population          Int
  median_age          Int
  median_income       Decimal
  unemployment_rate   Decimal
  education_level     EducationLevel
  homeownership_rate  Decimal
  avg_household_size  Decimal
  growth_rate_1yr     Decimal
  growth_rate_5yr     Decimal

  @@index([city, state])
}

/// ROISimulation model - Investment ROI simulations
/// Mock: MockROISimulation from lib/data/mocks/reid.ts
model ROISimulation {
  id                  String       @id @default(cuid())
  user_id             String
  organization_id     String
  property_price      Decimal
  down_payment        Decimal
  loan_amount         Decimal
  interest_rate       Decimal
  loan_term           Int          // years
  monthly_payment     Decimal
  property_tax        Decimal
  insurance           Decimal
  hoa_fees            Decimal
  maintenance         Decimal
  monthly_expenses    Decimal
  rental_income       Decimal
  monthly_cash_flow   Decimal
  annual_cash_flow    Decimal
  cash_on_cash_return Decimal
  cap_rate            Decimal
  total_roi_5yr       Decimal
  total_roi_10yr      Decimal
  appreciation_rate   Decimal
  equity_5yr          Decimal
  equity_10yr         Decimal
  created_at          DateTime     @default(now())

  user         User         @relation(fields: [user_id], references: [id])
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([organization_id])
}

/// Alert model - Real estate market alerts
/// Mock: MockAlert from lib/data/mocks/reid.ts
model Alert {
  id              String        @id @default(cuid())
  user_id         String
  organization_id String
  title           String
  description     String
  alert_type      AlertType
  severity        AlertSeverity
  zip_code        String
  city            String
  state           String
  metadata        Json
  is_read         Boolean       @default(false)
  is_dismissed    Boolean       @default(false)
  created_at      DateTime      @default(now())
  expires_at      DateTime?

  user         User         @relation(fields: [user_id], references: [id])
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([organization_id])
  @@index([alert_type])
  @@index([is_read])
}

/// School model - School data (ratings, test scores)
/// Mock: MockSchool from lib/data/mocks/reid.ts
model School {
  id             String     @id @default(cuid())
  name           String
  type           SchoolType
  address        String
  city           String
  state          String
  zip_code       String
  rating         Int        // 1-10
  test_scores    Int        // 0-100
  student_count  Int
  teacher_ratio  Int
  distance_miles Decimal
  grade_levels   String
  district       String

  @@index([zip_code])
  @@index([type])
  @@index([rating])
}

/// AIProfile model - AI-powered property analysis
/// Mock: MockAIProfile from lib/data/mocks/reid.ts
model AIProfile {
  id                  String   @id @default(cuid())
  organization_id     String
  user_id             String
  property_address    String
  profile_name        String
  analysis_date       DateTime @default(now())
  ai_score            Int
  score_breakdown     Json     // {location, financials, appreciation, cash_flow, risk}
  insights            String[]
  market_comparison   Json     // {average_roi, average_cash_flow, appreciation_rate}
  recommendation      String   // 'strong-buy' | 'buy' | 'hold' | 'pass'
  estimated_roi       Decimal
  estimated_cash_flow Decimal
  status              String   @default("active")
  zip_code            String
  city                String
  state               String

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([status])
}

// ============================================================================
// AI HUB MODELS (4)
// ============================================================================

/// Conversation model - AI chat conversations
/// Mock: MockConversation from lib/data/mocks/ai-hub.ts
model Conversation {
  id              String             @id @default(cuid())
  organization_id String
  user_id         String
  title           String
  summary         String?
  status          ConversationStatus @default(ACTIVE)
  message_count   Int                @default(0)
  started_at      DateTime           @default(now())
  last_message_at DateTime           @updatedAt
  created_at      DateTime           @default(now())

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])
  messages     Message[]

  @@index([organization_id])
  @@index([user_id])
  @@index([status])
}

/// Message model - Chat messages
/// Mock: MockMessage from lib/data/mocks/ai-hub.ts
model Message {
  id              String      @id @default(cuid())
  conversation_id String
  role            MessageRole
  content         String
  tokens_used     Int?
  timestamp       DateTime    @default(now())

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@index([conversation_id])
  @@index([timestamp])
}

/// Automation model - Workflow automations
/// Mock: MockAutomation from lib/data/mocks/ai-hub.ts
model Automation {
  id              String           @id @default(cuid())
  organization_id String
  created_by_id   String
  name            String
  description     String
  trigger_type    TriggerType
  trigger_config  Json
  action_type     ActionType
  action_config   Json
  status          AutomationStatus
  last_run_at     DateTime?
  next_run_at     DateTime?
  run_count       Int              @default(0)
  success_count   Int              @default(0)
  error_count     Int              @default(0)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by   User         @relation(fields: [created_by_id], references: [id])

  @@index([organization_id])
  @@index([status])
}

/// AIUsage model - AI feature usage tracking
/// Mock: MockAIUsage from lib/data/mocks/ai-hub.ts
model AIUsage {
  id              String       @id @default(cuid())
  organization_id String
  user_id         String
  feature         AIFeature
  action          String
  tokens_used     Int
  cost_cents      Int
  timestamp       DateTime     @default(now())
  metadata        Json?

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([feature])
  @@index([timestamp])
}

// ============================================================================
// SUPPORTING MODELS (3)
// ============================================================================

/// Appointment model - Calendar appointments
/// Mock: From appointments provider
model Appointment {
  id              String            @id @default(cuid())
  organization_id String
  user_id         String
  title           String
  description     String?
  start_time      DateTime
  end_time        DateTime
  location        String?
  attendees       String[]
  status          AppointmentStatus @default(SCHEDULED)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([start_time])
}

/// Activity model - General activity log
/// Mock: From activities provider
model Activity {
  id              String       @id @default(cuid())
  organization_id String
  user_id         String
  type            ActivityType
  title           String
  description     String?
  entity_type     String?
  entity_id       String?
  metadata        Json?
  created_at      DateTime     @default(now())

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([created_at])
}

/// Widget model - Dashboard widgets
/// Mock: From dashboard provider
model Widget {
  id              String   @id @default(cuid())
  organization_id String
  user_id         String
  type            String
  title           String
  config          Json
  position        Json     // {x, y, w, h}
  is_visible      Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
}
