generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activities {
  id               String        @id
  type             ActivityType
  title            String        @db.VarChar(255)
  description      String?
  outcome          String?       @db.VarChar(500)
  duration_minutes Int?
  lead_id          String?
  contact_id       String?
  deal_id          String?
  listing_id       String?
  organization_id  String
  created_by_id    String
  created_at       DateTime?     @default(now()) @db.Timestamp(6)
  updated_at       DateTime?     @default(now()) @db.Timestamp(6)
  completed_at     DateTime?     @db.Timestamp(6)
  contacts         contacts?     @relation(fields: [contact_id], references: [id], onUpdate: NoAction)
  users            users         @relation(fields: [created_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deals            deals?        @relation(fields: [deal_id], references: [id], onUpdate: NoAction)
  leads            leads?        @relation(fields: [lead_id], references: [id], onUpdate: NoAction)
  listings         listings?     @relation(fields: [listing_id], references: [id], onUpdate: NoAction)
  organizations    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([contact_id], map: "idx_activities_contact_id")
  @@index([created_at], map: "idx_activities_created_at")
  @@index([created_by_id], map: "idx_activities_created_by_id")
  @@index([deal_id], map: "idx_activities_deal_id")
  @@index([lead_id], map: "idx_activities_lead_id")
  @@index([organization_id, created_at(sort: Desc)], map: "idx_activities_org_created")
  @@index([organization_id, type], map: "idx_activities_org_type")
  @@index([organization_id], map: "idx_activities_organization_id")
  @@index([type], map: "idx_activities_type")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_logs {
  id              String        @id
  organization_id String
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  old_data        Json?
  new_data        Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users?        @relation(fields: [user_id], references: [id])

  @@index([organization_id, created_at])
  @@index([user_id])
  @@index([organization_id, action, created_at(sort: Desc)], map: "idx_activity_logs_org_action_created")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin_action_logs {
  id          String      @id
  action      AdminAction
  description String
  target_type String
  target_id   String
  metadata    Json?
  ip_address  String?
  user_agent  String?
  success     Boolean     @default(true)
  error       String?
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  admin_id    String
  users       users       @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action])
  @@index([admin_id])
  @@index([created_at])
  @@index([target_type, target_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_conversations {
  id                String        @id
  user_id           String
  organization_id   String
  title             String?
  context_type      AIContextType @default(GENERAL)
  context_id        String?
  ai_model          AIModel       @default(OPENAI_GPT4)
  conversation_data Json
  usage_tokens      Int           @default(0)
  is_archived       Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime
  organizations     organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([organization_id])
  @@index([user_id])
  @@index([organization_id, created_at(sort: Desc)], map: "idx_ai_conversations_org_created")
  @@index([user_id, created_at(sort: Desc)], map: "idx_ai_conversations_user_created")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_tools {
  id            String           @id
  name          String
  description   String?
  toolType      ToolType
  required_tier SubscriptionTier
  configuration Json?
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime
}

model analytics_events {
  id            String   @id
  source        String   @default("saas")
  session_id    String
  user_id       String?
  event_type    String
  event_name    String
  element_id    String?
  element_class String?
  element_text  String?
  url           String
  path          String
  x_position    Int?
  y_position    Int?
  scroll_depth  Int?
  properties    Json?
  timestamp     DateTime @default(now())

  @@index([event_type])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

model analytics_goals {
  id               String             @id
  name             String
  description      String?
  type             String
  conditions       Json
  value            Float?
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime
  goal_conversions goal_conversions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model appointments {
  id              String            @id
  organization_id String
  customer_id     String?
  assigned_to     String
  title           String
  description     String?
  start_time      DateTime
  end_time        DateTime
  status          AppointmentStatus @default(SCHEDULED)
  location        String?
  meeting_url     String?
  reminders_sent  Json?
  created_at      DateTime          @default(now())
  updated_at      DateTime
  lead_id         String?
  deal_id         String?
  listing_id      String?
  type            AppointmentType?  @default(OTHER)
  users           users             @relation(fields: [assigned_to], references: [id])
  customers       customers?        @relation(fields: [customer_id], references: [id])
  deals           deals?            @relation(fields: [deal_id], references: [id], onUpdate: NoAction)
  leads           leads?            @relation(fields: [lead_id], references: [id], onUpdate: NoAction)
  listings        listings?         @relation(fields: [listing_id], references: [id], onUpdate: NoAction)
  organizations   organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([start_time])
  @@index([assigned_to, start_time(sort: Desc)], map: "idx_appointments_assigned")
  @@index([assigned_to, start_time], map: "idx_appointments_assigned_start")
  @@index([deal_id], map: "idx_appointments_deal_id")
  @@index([lead_id], map: "idx_appointments_lead_id")
  @@index([listing_id], map: "idx_appointments_listing_id")
  @@index([organization_id, start_time], map: "idx_appointments_org_start")
  @@index([organization_id, start_time(sort: Desc)], map: "idx_appointments_org_start_time")
  @@index([organization_id, status], map: "idx_appointments_org_status")
  @@index([type], map: "idx_appointments_type")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attachments {
  id              String        @id
  organization_id String
  entity_type     String
  entity_id       String
  file_name       String
  file_size       Int
  mime_type       String
  file_path       String
  uploaded_by_id  String
  created_at      DateTime      @default(now())
  updated_at      DateTime
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [uploaded_by_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([organization_id])
  @@index([entity_type, entity_id, created_at(sort: Desc)], map: "idx_attachments_entity_created")
  @@index([organization_id, created_at(sort: Desc)], map: "idx_attachments_org_created")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contacts {
  id                       String         @id
  name                     String         @db.VarChar(255)
  email                    String?        @db.VarChar(255)
  phone                    String?        @db.VarChar(50)
  company                  String?        @db.VarChar(255)
  position                 String?        @db.VarChar(255)
  type                     ContactType?   @default(PROSPECT)
  status                   ContactStatus? @default(ACTIVE)
  notes                    String?
  tags                     String[]       @default([])
  custom_fields            Json?
  linkedin_url             String?        @db.VarChar(500)
  twitter_url              String?        @db.VarChar(500)
  preferred_contact_method String?        @db.VarChar(50)
  organization_id          String
  assigned_to_id           String?
  created_at               DateTime?      @default(now()) @db.Timestamp(6)
  updated_at               DateTime?      @default(now()) @db.Timestamp(6)
  last_contact_at          DateTime?      @db.Timestamp(6)
  activities               activities[]
  users                    users?         @relation(fields: [assigned_to_id], references: [id], onUpdate: NoAction)
  organizations            organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deals                    deals[]

  @@index([assigned_to_id], map: "idx_contacts_assigned_to_id")
  @@index([created_at], map: "idx_contacts_created_at")
  @@index([organization_id, created_at(sort: Desc)], map: "idx_contacts_org_created")
  @@index([organization_id, status], map: "idx_contacts_org_status")
  @@index([organization_id, type], map: "idx_contacts_org_type")
  @@index([organization_id], map: "idx_contacts_organization_id")
  @@index([status], map: "idx_contacts_status")
  @@index([type], map: "idx_contacts_type")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content {
  id              String        @id
  organization_id String
  title           String
  slug            String
  content_type    ContentType
  content         String
  excerpt         String?
  status          ContentStatus @default(DRAFT)
  author_id       String
  published_at    DateTime?
  seo_meta        Json?
  created_at      DateTime      @default(now())
  updated_at      DateTime

  // Analytics fields
  view_count      Int           @default(0)
  share_count     Int           @default(0)
  like_count      Int           @default(0)
  comment_count   Int           @default(0)

  // Categorization
  category_id     String?

  // SEO fields
  meta_title       String?
  meta_description String?
  keywords         String[]      @default([])
  featured_image   String?

  // Relations
  users            users                   @relation(fields: [author_id], references: [id])
  organizations    organizations           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  category         content_categories?     @relation(fields: [category_id], references: [id], onDelete: SetNull)
  campaign_content campaign_content[]
  tags             content_tag_relations[]
  comments         content_comments[]
  revisions        content_revisions[]

  @@unique([organization_id, slug])
  @@index([status])
  @@index([category_id])
  @@index([published_at])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model campaigns {
  id                  String              @id @default(uuid())
  organization_id     String
  name                String              @db.VarChar(200)
  description         String?             @db.Text
  slug                String              @db.VarChar(255)
  type                CampaignType
  status              CampaignStatus      @default(DRAFT)
  start_date          DateTime?           @db.Timestamp(6)
  end_date            DateTime?           @db.Timestamp(6)
  created_at          DateTime            @default(now()) @db.Timestamp(6)
  updated_at          DateTime            @updatedAt @db.Timestamp(6)
  goals               Json?               @db.JsonB
  budget              Decimal?            @db.Decimal(12, 2)
  budget_spent        Decimal             @default(0) @db.Decimal(12, 2)
  metrics             Json?               @db.JsonB
  created_by          String
  tags                String[]            @default([])
  is_archived         Boolean             @default(false)
  organization        organizations       @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator             users               @relation("CampaignCreator", fields: [created_by], references: [id])
  email_campaigns     email_campaigns[]
  social_media_posts  social_media_posts[]
  campaign_content    campaign_content[]

  @@unique([organization_id, slug])
  @@index([organization_id])
  @@index([status])
  @@index([type])
  @@index([created_by])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_categories {
  id              String        @id @default(uuid())
  organization_id String
  name            String        @db.VarChar(100)
  slug            String        @db.VarChar(100)
  description     String?       @db.Text
  parent_id       String?
  color           String?       @db.VarChar(7)
  icon            String?       @db.VarChar(50)
  is_active       Boolean       @default(true)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @updatedAt @db.Timestamp(6)

  organization    organizations          @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  parent          content_categories?    @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children        content_categories[]   @relation("CategoryHierarchy")
  content         content[]

  @@unique([organization_id, slug])
  @@index([organization_id])
  @@index([parent_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_tags {
  id              String        @id @default(uuid())
  organization_id String
  name            String        @db.VarChar(50)
  slug            String        @db.VarChar(50)
  color           String?       @db.VarChar(7)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @updatedAt @db.Timestamp(6)

  organization    organizations           @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  content_relations content_tag_relations[]

  @@unique([organization_id, slug])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_tag_relations {
  id         String   @id @default(uuid())
  content_id String
  tag_id     String
  created_at DateTime @default(now()) @db.Timestamp(6)

  content    content      @relation(fields: [content_id], references: [id], onDelete: Cascade)
  tag        content_tags @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([content_id, tag_id])
  @@index([content_id])
  @@index([tag_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_comments {
  id              String         @id @default(uuid())
  content_id      String
  author_id       String
  comment         String         @db.Text
  parent_id       String?
  status          CommentStatus  @default(PENDING)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @updatedAt @db.Timestamp(6)

  content         content            @relation(fields: [content_id], references: [id], onDelete: Cascade)
  author          users              @relation("ContentCommentAuthor", fields: [author_id], references: [id], onDelete: Cascade)
  parent          content_comments?  @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: SetNull)
  replies         content_comments[] @relation("CommentReplies")

  @@index([content_id])
  @@index([author_id])
  @@index([parent_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_revisions {
  id              String    @id @default(uuid())
  content_id      String
  version         Int
  title           String
  content_body    String    @db.Text
  excerpt         String?   @db.Text
  created_by      String
  created_at      DateTime  @default(now()) @db.Timestamp(6)

  content         content   @relation(fields: [content_id], references: [id], onDelete: Cascade)
  creator         users     @relation("ContentRevisionCreator", fields: [created_by], references: [id], onDelete: Cascade)

  @@unique([content_id, version])
  @@index([content_id])
  @@index([created_by])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_campaigns {
  id                  String         @id @default(uuid())
  campaign_id         String
  organization_id     String
  name                String         @db.VarChar(200)
  subject             String         @db.VarChar(255)
  preview_text        String?        @db.VarChar(255)
  body_html           String         @db.Text
  body_plaintext      String?        @db.Text
  from_name           String         @db.VarChar(100)
  from_email          String         @db.VarChar(255)
  reply_to            String?        @db.VarChar(255)
  recipient_lists     String[]       @default([])
  recipient_count     Int            @default(0)
  scheduled_at        DateTime?      @db.Timestamp(6)
  sent_at             DateTime?      @db.Timestamp(6)
  status              EmailStatus    @default(DRAFT)
  total_sent          Int            @default(0)
  total_delivered     Int            @default(0)
  total_opened        Int            @default(0)
  total_clicked       Int            @default(0)
  total_bounced       Int            @default(0)
  total_unsubscribed  Int            @default(0)
  open_rate           Decimal?       @db.Decimal(5, 2)
  click_rate          Decimal?       @db.Decimal(5, 2)
  is_ab_test          Boolean        @default(false)
  ab_test_config      Json?          @db.JsonB
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @updatedAt @db.Timestamp(6)
  created_by          String
  campaign            campaigns      @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  organization        organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator             users          @relation("EmailCampaignCreator", fields: [created_by], references: [id])

  @@index([campaign_id])
  @@index([organization_id])
  @@index([status])
  @@index([scheduled_at])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model social_media_posts {
  id                  String         @id @default(uuid())
  campaign_id         String
  organization_id     String
  title               String?        @db.VarChar(200)
  post_text           String         @db.Text
  hashtags            String[]       @default([])
  mentions            String[]       @default([])
  platform            SocialPlatform
  platform_config     Json?          @db.JsonB
  media_urls          String[]       @default([])
  media_metadata      Json?          @db.JsonB
  link_url            String?        @db.VarChar(500)
  link_preview        Json?          @db.JsonB
  scheduled_at        DateTime?      @db.Timestamp(6)
  published_at        DateTime?      @db.Timestamp(6)
  status              PostStatus     @default(DRAFT)
  external_post_id    String?        @db.VarChar(255)
  external_url        String?        @db.VarChar(500)
  impressions         Int            @default(0)
  reach               Int            @default(0)
  likes               Int            @default(0)
  comments            Int            @default(0)
  shares              Int            @default(0)
  clicks              Int            @default(0)
  engagement_rate     Decimal?       @db.Decimal(5, 2)
  is_carousel         Boolean        @default(false)
  is_video            Boolean        @default(false)
  is_story            Boolean        @default(false)
  is_reel             Boolean        @default(false)
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @updatedAt @db.Timestamp(6)
  created_by          String
  campaign            campaigns      @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  organization        organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator             users          @relation("SocialPostCreator", fields: [created_by], references: [id])

  @@index([campaign_id])
  @@index([organization_id])
  @@index([platform])
  @@index([status])
  @@index([scheduled_at])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model campaign_content {
  id              String        @id @default(uuid())
  campaign_id     String
  content_id      String
  organization_id String
  position        Int           @default(0)
  is_primary      Boolean       @default(false)
  notes           String?       @db.Text
  linked_at       DateTime      @default(now()) @db.Timestamp(6)
  linked_by       String
  campaign        campaigns     @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  content         content       @relation(fields: [content_id], references: [id], onDelete: Cascade)
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  linker          users         @relation("CampaignContentLinker", fields: [linked_by], references: [id])

  @@unique([campaign_id, content_id])
  @@index([campaign_id])
  @@index([content_id])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model conversations {
  id                 String                 @id
  organization_id    String
  industry           String                 @default("strive")
  session_id         String
  user_message       String
  assistant_response String
  problem_detected   String?
  solution_presented String?
  conversation_stage String
  outcome            String?
  conversion_score   Float?
  booking_completed  Boolean                @default(false)
  response_time_ms   Int?
  user_satisfaction  Int?
  created_at         DateTime               @default(now())
  updated_at         DateTime
  embedding          Unsupported("vector")?
  organizations      organizations          @relation(fields: [organization_id], references: [id])

  @@index([created_at(sort: Desc)])
  @@index([embedding])
  @@index([industry])
  @@index([organization_id])
  @@index([session_id])
  @@index([session_id], map: "conversations_session_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model customers {
  id              String         @id
  organization_id String
  name            String
  email           String?
  phone           String?
  company         String?
  status          CustomerStatus @default(LEAD)
  source          CustomerSource @default(WEBSITE)
  tags            String[]
  custom_fields   Json?
  assigned_to     String?
  created_at      DateTime       @default(now())
  updated_at      DateTime
  appointments    appointments[]
  users           users?         @relation(fields: [assigned_to], references: [id])
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  projects        projects[]

  @@index([email])
  @@index([organization_id])
  @@index([status])
  @@index([organization_id, created_at(sort: Desc)], map: "idx_customers_org_created")
  @@index([organization_id, status], map: "idx_customers_org_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model deals {
  id                  String         @id
  title               String         @db.VarChar(255)
  description         String?
  value               Decimal        @db.Decimal(12, 2)
  stage               DealStage?     @default(LEAD)
  status              DealStatus?    @default(ACTIVE)
  probability         Int?           @default(50)
  expected_close_date DateTime?      @db.Timestamp(6)
  actual_close_date   DateTime?      @db.Timestamp(6)
  lost_reason         String?        @db.VarChar(500)
  notes               String?
  tags                String[]       @default([])
  custom_fields       Json?
  lead_id             String?
  contact_id          String?
  listing_id          String?
  organization_id     String
  assigned_to_id      String?
  created_at          DateTime?      @default(now()) @db.Timestamp(6)
  updated_at          DateTime?      @default(now()) @db.Timestamp(6)
  activities          activities[]
  appointments        appointments[]
  commissions         commissions[]
  users               users?         @relation(fields: [assigned_to_id], references: [id], onUpdate: NoAction)
  contacts            contacts?      @relation(fields: [contact_id], references: [id], onUpdate: NoAction)
  leads               leads?         @relation(fields: [lead_id], references: [id], onUpdate: NoAction)
  organizations       organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listings            listings?      @relation(fields: [listing_id], references: [id], onUpdate: NoAction, map: "fk_deals_listing_id")

  @@index([assigned_to_id], map: "idx_deals_assigned_to_id")
  @@index([created_at], map: "idx_deals_created_at")
  @@index([expected_close_date], map: "idx_deals_expected_close_date")
  @@index([organization_id, stage], map: "idx_deals_org_stage")
  @@index([organization_id, stage, status], map: "idx_deals_org_stage_status")
  @@index([organization_id], map: "idx_deals_organization_id")
  @@index([stage], map: "idx_deals_stage")
  @@index([status], map: "idx_deals_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_signatures {
  id                 String             @id
  status             SignatureStatus    @default(PENDING)
  signed_at          DateTime?          @db.Timestamp(6)
  signature_data     String?
  ip_address         String?
  user_agent         String?
  auth_method        String?
  decline_reason     String?
  document_id        String
  signer_id          String
  request_id         String
  documents          documents          @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  signature_requests signature_requests @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  loop_parties       loop_parties       @relation(fields: [signer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([document_id])
  @@index([request_id])
  @@index([signer_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_versions {
  id             String    @id
  version_number Int
  storage_key    String
  file_size      Int
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  created_by     String
  document_id    String
  users          users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  documents      documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([document_id, version_number])
  @@index([document_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id                  String                @id
  filename            String
  original_name       String
  mime_type           String
  file_size           Int
  storage_key         String                @unique
  version             Int                   @default(1)
  status              DocumentStatus        @default(DRAFT)
  category            String?
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @db.Timestamp(6)
  loop_id             String
  uploaded_by         String
  document_signatures document_signatures[]
  document_versions   document_versions[]
  transaction_loops   transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users                 @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category])
  @@index([loop_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model example_conversations {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  industry           String                 @default("strive")
  user_input         String
  assistant_response String
  problem_type       String?
  solution_type      String?
  outcome            String?
  conversion_score   Float?
  embedding          Unsupported("vector")?
  created_at         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @default(now()) @db.Timestamptz(6)

  @@index([embedding])
  @@index([industry])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model feature_flags {
  id              String             @id
  name            String             @unique
  description     String?
  is_enabled      Boolean            @default(false)
  rollout_percent Float              @default(0)
  target_tiers    SubscriptionTier[] @default([])
  target_orgs     String[]           @default([])
  target_users    String[]           @default([])
  conditions      Json?
  environment     Environment        @default(PRODUCTION)
  category        String?
  created_at      DateTime           @default(now()) @db.Timestamp(6)
  updated_at      DateTime           @default(now()) @db.Timestamp(6)
  created_by      String
  users           users              @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([environment])
  @@index([is_enabled])
  @@index([name])
}

model goal_conversions {
  id              String          @id
  goal_id         String
  session_id      String
  user_id         String?
  value           Float?
  url             String
  path            String
  timestamp       DateTime        @default(now())
  analytics_goals analytics_goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@index([goal_id])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model leads {
  id              String         @id
  name            String         @db.VarChar(255)
  email           String?        @db.VarChar(255)
  phone           String?        @db.VarChar(50)
  company         String?        @db.VarChar(255)
  source          LeadSource?    @default(WEBSITE)
  status          LeadStatus?    @default(NEW_LEAD)
  score           LeadScore?     @default(COLD)
  score_value     Int?           @default(0)
  budget          Decimal?       @db.Decimal(12, 2)
  timeline        String?        @db.VarChar(200)
  notes           String?
  tags            String[]       @default([])
  custom_fields   Json?
  organization_id String
  assigned_to_id  String?
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  last_contact_at DateTime?      @db.Timestamp(6)
  activities            activities[]
  appointments          appointments[]
  deals                 deals[]
  open_house_attendees  open_house_attendees[]
  users                 users?         @relation(fields: [assigned_to_id], references: [id], onUpdate: NoAction)
  organizations         organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assigned_to_id], map: "idx_leads_assigned_to_id")
  @@index([created_at], map: "idx_leads_created_at")
  @@index([organization_id, created_at(sort: Desc)], map: "idx_leads_org_created")
  @@index([organization_id, score, score_value(sort: Desc)], map: "idx_leads_org_score")
  @@index([organization_id, status], map: "idx_leads_org_status")
  @@index([organization_id], map: "idx_leads_organization_id")
  @@index([score], map: "idx_leads_score")
  @@index([source], map: "idx_leads_source")
  @@index([status], map: "idx_leads_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model listings {
  id               String         @id
  title            String         @db.VarChar(255)
  description      String?
  address          String         @db.VarChar(500)
  city             String         @db.VarChar(100)
  state            String         @db.VarChar(100)
  zip_code         String         @db.VarChar(20)
  country          String?        @default("USA") @db.VarChar(100)
  property_type    PropertyType?  @default(RESIDENTIAL)
  bedrooms         Int?
  bathrooms        Decimal?       @db.Decimal(3, 1)
  square_feet      Int?
  lot_size         Decimal?       @db.Decimal(10, 2)
  year_built       Int?
  price            Decimal        @db.Decimal(12, 2)
  price_per_sqft   Decimal?       @db.Decimal(10, 2)
  status           ListingStatus? @default(ACTIVE)
  mls_number       String?        @db.VarChar(100)
  listing_date     DateTime?      @db.Timestamp(6)
  expiration_date  DateTime?      @db.Timestamp(6)
  images           String[]       @default([])
  virtual_tour_url String?        @db.VarChar(500)
  features         String[]       @default([])
  notes            String?
  tags             String[]       @default([])
  custom_fields    Json?
  organization_id  String
  assigned_to_id   String?
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  activities       activities[]
  appointments     appointments[]
  deals            deals[]
  open_houses      open_houses[]
  expenses         expenses[]
  users            users?         @relation(fields: [assigned_to_id], references: [id], onUpdate: NoAction)
  organizations    organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assigned_to_id], map: "idx_listings_assigned_to_id")
  @@index([city], map: "idx_listings_city")
  @@index([created_at], map: "idx_listings_created_at")
  @@index([city, state, zip_code], map: "idx_listings_location")
  @@index([organization_id, status], map: "idx_listings_org_status")
  @@index([organization_id, property_type], map: "idx_listings_org_type")
  @@index([organization_id], map: "idx_listings_organization_id")
  @@index([property_type], map: "idx_listings_property_type")
  @@index([state], map: "idx_listings_state")
  @@index([status], map: "idx_listings_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model loop_parties {
  id                  String                @id
  name                String
  email               String
  phone               String?
  role                PartyRole
  permissions         Json
  status              PartyStatus           @default(ACTIVE)
  invited_at          DateTime              @default(now()) @db.Timestamp(6)
  joined_at           DateTime?             @db.Timestamp(6)
  loop_id             String
  document_signatures document_signatures[]
  transaction_loops   transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transaction_tasks   transaction_tasks[]

  @@index([email])
  @@index([loop_id])
  @@index([role])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id              String           @id
  user_id         String
  organization_id String
  type            NotificationType
  title           String
  message         String
  action_url      String?
  entity_type     String?
  entity_id       String?
  read            Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([organization_id, created_at(sort: Desc)], map: "idx_notifications_org_created")
  @@index([user_id, read, created_at(sort: Desc)], map: "idx_notifications_user_read_created")
  @@index([created_at(sort: Desc)])
  @@index([organization_id])
  @@index([read])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model onboarding_sessions {
  id                       String            @id
  session_token            String            @unique
  current_step             Int               @default(1)
  total_steps              Int               @default(4)
  org_name                 String?
  org_website              String?
  org_description          String?
  selected_tier            SubscriptionTier?
  billing_cycle            BillingCycle?
  stripe_payment_intent_id String?
  payment_status           PaymentStatus     @default(PENDING)
  is_completed             Boolean           @default(false)
  completed_at             DateTime?         @db.Timestamp(6)
  expires_at               DateTime          @db.Timestamp(6)
  created_at               DateTime          @default(now()) @db.Timestamp(6)
  updated_at               DateTime          @default(now()) @db.Timestamp(6)
  user_id                  String?
  organization_id          String?
  organizations            organizations?    @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  users                    users?            @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([expires_at])
  @@index([payment_status])
  @@index([session_token])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String        @id
  user_id         String
  organization_id String
  role            OrgRole       @default(MEMBER)
  permissions     Json?
  joined_at       DateTime      @default(now())
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
  @@index([user_id, organization_id], map: "idx_org_members_user")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id                     String                   @id
  name                   String
  slug                   String                   @unique
  description            String?
  settings               Json?
  subscription_status    SubscriptionStatus       @default(TRIAL)
  billing_email          String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  activities             activities[]
  activity_logs          activity_logs[]
  ai_conversations       ai_conversations[]
  appointments           appointments[]
  attachments            attachments[]
  contacts               contacts[]
  content                content[]
  conversations          conversations[]
  customers              customers[]
  deals                  deals[]
  leads                  leads[]
  listings               listings[]
  notifications          notifications[]
  onboarding_sessions    onboarding_sessions[]
  organization_members   organization_members[]
  projects               projects[]
  subscriptions          subscriptions?
  transaction_audit_logs transaction_audit_logs[]
  transaction_loops      transaction_loops[]
  usage_tracking         usage_tracking[]
  workflows              workflows[]
  ai_agents              ai_agents[]
  agent_teams            agent_teams[]
  automation_workflows   automation_workflows[]
  integrations           integrations[]
  workflow_templates     workflow_templates[]
  marketplace_purchases  marketplace_purchases[]
  marketplace_cart       marketplace_cart[]
  marketplace_reviews    marketplace_reviews[]
  neighborhood_insights  neighborhood_insights[]
  property_alerts        property_alerts[]
  market_reports         market_reports[]
  reid_roi_simulations   reid_roi_simulations[]
  reid_ai_profiles       reid_ai_profiles[]
  open_houses            open_houses[]
  commissions            commissions[]
  expense_categories     expense_categories[]
  expenses               expenses[]
  receipts               receipts[]
  tax_estimates          tax_estimates[]
  tax_reports            tax_reports[]
  campaigns              campaigns[]
  email_campaigns        email_campaigns[]
  social_media_posts     social_media_posts[]
  campaign_content       campaign_content[]
  content_categories     content_categories[]
  content_tags           content_tags[]
}

model page_views {
  id            String   @id
  source        String   @default("saas")
  session_id    String
  user_id       String?
  url           String
  path          String
  title         String?
  referrer      String?
  user_agent    String?
  ip_address    String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  view_duration Int?
  timestamp     DateTime @default(now())

  @@index([path])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platform_metrics {
  id               String   @id
  date             DateTime @unique @default(now()) @db.Timestamp(6)
  total_users      Int      @default(0)
  active_users     Int      @default(0)
  new_users        Int      @default(0)
  total_orgs       Int      @default(0)
  active_orgs      Int      @default(0)
  new_orgs         Int      @default(0)
  mrr_cents        BigInt   @default(0)
  arr_cents        BigInt   @default(0)
  churn_rate       Float    @default(0)
  free_count       Int      @default(0)
  starter_count    Int      @default(0)
  growth_count     Int      @default(0)
  elite_count      Int      @default(0)
  enterprise_count Int      @default(0)
  total_storage    BigInt   @default(0)
  api_calls        Int      @default(0)
  created_at       DateTime @default(now()) @db.Timestamp(6)

  @@index([date])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id                  String        @id
  organization_id     String
  customer_id         String?
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  start_date          DateTime?
  due_date            DateTime?
  completion_date     DateTime?
  budget              Decimal?      @db.Decimal(10, 2)
  progress_percentage Int           @default(0)
  project_manager_id  String
  created_at          DateTime      @default(now())
  updated_at          DateTime
  customers           customers?    @relation(fields: [customer_id], references: [id])
  organizations       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users               users         @relation(fields: [project_manager_id], references: [id])
  tasks               tasks[]

  @@index([organization_id, created_at(sort: Desc)], map: "idx_projects_org_created")
  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model signature_requests {
  id                  String                @id
  title               String
  message             String?
  status              SignatureStatus       @default(PENDING)
  signing_order       SigningOrder          @default(PARALLEL)
  expires_at          DateTime?             @db.Timestamp(6)
  completed_at        DateTime?             @db.Timestamp(6)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @db.Timestamp(6)
  loop_id             String
  requested_by        String
  document_signatures document_signatures[]
  transaction_loops   transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users                 @relation(fields: [requested_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([loop_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                     String             @id
  organization_id        String             @unique
  stripe_subscription_id String?            @unique
  stripe_customer_id     String?
  status                 SubscriptionStatus @default(TRIAL)
  tier                   SubscriptionTier   @default(STARTER)
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean            @default(false)
  metadata               Json?
  created_at             DateTime           @default(now())
  updated_at             DateTime
  organizations          organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model system_alerts {
  id              String             @id
  title           String
  message         String
  level           AlertLevel         @default(INFO)
  category        AlertCategory
  is_global       Boolean            @default(false)
  target_roles    UserRole[]         @default([])
  target_tiers    SubscriptionTier[] @default([])
  target_orgs     String[]           @default([])
  is_dismissible  Boolean            @default(true)
  auto_hide_after Int?
  starts_at       DateTime           @default(now()) @db.Timestamp(6)
  ends_at         DateTime?          @db.Timestamp(6)
  view_count      Int                @default(0)
  dismiss_count   Int                @default(0)
  is_active       Boolean            @default(true)
  is_archived     Boolean            @default(false)
  created_at      DateTime           @default(now()) @db.Timestamp(6)
  updated_at      DateTime           @default(now()) @db.Timestamp(6)
  created_by      String
  users           users              @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category])
  @@index([is_active])
  @@index([starts_at, ends_at])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id                             String     @id
  project_id                     String
  parent_task_id                 String?
  title                          String
  description                    String?
  status                         TaskStatus @default(TODO)
  priority                       Priority   @default(MEDIUM)
  assigned_to                    String?
  created_by                     String
  due_date                       DateTime?
  estimated_hours                Decimal?   @db.Decimal(5, 2)
  actual_hours                   Decimal?   @db.Decimal(5, 2)
  tags                           String[]
  position                       Int
  created_at                     DateTime   @default(now())
  updated_at                     DateTime
  users_tasks_assigned_toTousers users?     @relation("tasks_assigned_toTousers", fields: [assigned_to], references: [id])
  users_tasks_created_byTousers  users      @relation("tasks_created_byTousers", fields: [created_by], references: [id])
  tasks                          tasks?     @relation("tasksTotasks", fields: [parent_task_id], references: [id])
  other_tasks                    tasks[]    @relation("tasksTotasks")
  projects                       projects   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id, status], map: "idx_tasks_project_status")
  @@index([assigned_to])
  @@index([project_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_audit_logs {
  id              String        @id
  action          String
  entity_type     String
  entity_id       String
  old_values      Json?
  new_values      Json?
  ip_address      String?
  user_agent      String?
  timestamp       DateTime      @default(now()) @db.Timestamp(6)
  user_id         String
  organization_id String
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([entity_type, entity_id])
  @@index([organization_id])
  @@index([timestamp])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_loops {
  id                 String               @id
  property_address   String
  transaction_type   TransactionType
  listing_price      Decimal              @db.Decimal(12, 2)
  status             LoopStatus           @default(DRAFT)
  expected_closing   DateTime?            @db.Timestamp(6)
  actual_closing     DateTime?            @db.Timestamp(6)
  progress           Int                  @default(0)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @db.Timestamp(6)
  organization_id    String
  created_by         String
  documents          documents[]
  loop_parties       loop_parties[]
  signature_requests signature_requests[]
  commissions        commissions[]
  users              users                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organizations      organizations        @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transaction_tasks  transaction_tasks[]
  workflows          workflows[]

  @@index([created_by])
  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_tasks {
  id                String            @id
  title             String
  description       String?
  status            TaskStatus        @default(TODO)
  priority          TaskPriority      @default(MEDIUM)
  due_date          DateTime?         @db.Timestamp(6)
  completed_at      DateTime?         @db.Timestamp(6)
  created_at        DateTime          @default(now()) @db.Timestamp(6)
  updated_at        DateTime          @db.Timestamp(6)
  loop_id           String
  assigned_to       String?
  created_by        String
  loop_parties      loop_parties?     @relation(fields: [assigned_to], references: [id], onUpdate: NoAction)
  users             users             @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_loops transaction_loops @relation(fields: [loop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([assigned_to])
  @@index([due_date])
  @@index([loop_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_tracking {
  id              String        @id
  organization_id String
  user_id         String
  resource_type   ResourceType
  resource_name   String
  usage_amount    Int
  billing_period  DateTime
  metadata        Json?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id, billing_period, resource_type], map: "idx_usage_tracking_org_period_resource")
  @@index([organization_id, billing_period])
}

model user_sessions {
  id         String    @id
  source     String    @default("saas")
  session_id String    @unique
  user_id    String?
  start_time DateTime  @default(now())
  end_time   DateTime?
  duration   Int?
  page_views Int       @default(0)
  bounced    Boolean   @default(false)
  converted  Boolean   @default(false)
  user_agent String?
  ip_address String?
  country    String?
  city       String?
  device     String?
  browser    String?
  os         String?
  referrer   String?
  entry_page String?
  exit_page  String?

  @@index([source])
  @@index([start_time])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                             String                   @id
  clerk_user_id                  String?                  @unique
  email                          String                   @unique
  name                           String?
  avatar_url                     String?
  role                           UserRole                 @default(EMPLOYEE)
  subscription_tier              SubscriptionTier         @default(STARTER)
  is_active                      Boolean                  @default(true)
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime
  activities                     activities[]
  activity_logs                  activity_logs[]
  admin_action_logs              admin_action_logs[]
  ai_conversations               ai_conversations[]
  appointments                   appointments[]
  attachments                    attachments[]
  contacts                       contacts[]
  content                        content[]
  customers                      customers[]
  deals                          deals[]
  document_versions              document_versions[]
  documents                      documents[]
  feature_flags                  feature_flags[]
  leads                          leads[]
  listings                       listings[]
  notifications                  notifications[]
  onboarding_sessions            onboarding_sessions[]
  organization_members           organization_members[]
  projects                       projects[]
  signature_requests             signature_requests[]
  system_alerts                  system_alerts[]
  tasks_tasks_assigned_toTousers tasks[]                  @relation("tasks_assigned_toTousers")
  tasks_tasks_created_byTousers  tasks[]                  @relation("tasks_created_byTousers")
  transaction_audit_logs         transaction_audit_logs[]
  transaction_loops              transaction_loops[]
  transaction_tasks              transaction_tasks[]
  workflows                      workflows[]
  ai_agents                      ai_agents[]              @relation("AIAgentCreator")
  agent_teams                    agent_teams[]            @relation("AgentTeamCreator")
  automation_workflows           automation_workflows[]   @relation("AutomationWorkflowCreator")
  integrations                   integrations[]           @relation("IntegrationCreator")
  workflow_templates             workflow_templates[]     @relation("WorkflowTemplateCreator")
  marketplace_purchases          marketplace_purchases[]
  marketplace_cart               marketplace_cart[]
  marketplace_reviews            marketplace_reviews[]
  moderated_reviews              marketplace_reviews[]    @relation("ReviewModerator")
  neighborhood_insights_created  neighborhood_insights[]  @relation("NeighborhoodInsightCreator")
  property_alerts_created        property_alerts[]        @relation("PropertyAlertCreator")
  market_reports_created         market_reports[]         @relation("MarketReportCreator")
  roi_simulations_created        reid_roi_simulations[]   @relation("ROISimulationCreator")
  ai_profiles_created            reid_ai_profiles[]       @relation("AIProfileCreator")
  open_houses_hosted             open_houses[]            @relation("OpenHouseHost")
  commissions_earned             commissions[]            @relation("CommissionEarner")
  expenses_created               expenses[]               @relation("ExpenseCreator")
  expenses_approved              expenses[]               @relation("ExpenseApprover")
  receipts_verified              receipts[]               @relation("ReceiptVerifier")
  tax_estimates_created          tax_estimates[]          @relation("TaxEstimateCreator")
  tax_reports_created            tax_reports[]            @relation("TaxReportCreator")
  campaigns_created              campaigns[]              @relation("CampaignCreator")
  email_campaigns_created        email_campaigns[]        @relation("EmailCampaignCreator")
  social_posts_created           social_media_posts[]     @relation("SocialPostCreator")
  campaign_content_linked        campaign_content[]       @relation("CampaignContentLinker")
  content_comments_authored      content_comments[]       @relation("ContentCommentAuthor")
  content_revisions_created      content_revisions[]      @relation("ContentRevisionCreator")
  user_preferences               user_preferences?        @relation("UserPreferences")
}

model web_vitals_metrics {
  id              String   @id
  source          String   @default("saas")
  session_id      String
  user_id         String?
  url             String
  path            String
  metric_name     String
  metric_value    Float
  metric_rating   String
  metric_id       String
  user_agent      String?
  device          String?
  browser         String?
  connection_type String?
  timestamp       DateTime @default(now())

  @@index([metric_name])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workflows {
  id                String             @id
  name              String
  description       String?
  is_template       Boolean            @default(false)
  steps             Json
  status            WorkflowStatus     @default(ACTIVE)
  created_at        DateTime           @default(now()) @db.Timestamp(6)
  updated_at        DateTime           @db.Timestamp(6)
  loop_id           String?
  created_by        String
  organization_id   String?
  users             users              @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_loops transaction_loops? @relation(fields: [loop_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organizations     organizations?     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([is_template])
  @@index([loop_id])
  @@index([organization_id])
}

/// Marketplace Module Models

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_tools {
  id                 String   @id @default(uuid())
  name               String   @db.VarChar(100)
  description        String   @db.Text
  long_description   String?  @db.Text
  category           ToolCategory
  tags               String[] @default([])
  price_model        PriceModel
  price_amount       Decimal  @default(0) @db.Decimal(10, 2)
  currency           String   @default("USD") @db.VarChar(3)
  required_tier      SubscriptionTier
  features           Json     @db.JsonB
  tech_stack         Json?    @db.JsonB
  integration_type   IntegrationType
  status             ToolStatus @default(ACTIVE)
  is_featured        Boolean  @default(false)
  is_popular         Boolean  @default(false)
  provider           String   @db.VarChar(100)
  documentation_url  String?  @db.VarChar(500)
  demo_url           String?  @db.VarChar(500)
  support_url        String?  @db.VarChar(500)
  icon_url           String?  @db.VarChar(500)
  images             String[] @default([])
  video_url          String?  @db.VarChar(500)
  version            String   @default("1.0.0") @db.VarChar(20)
  last_updated       DateTime @updatedAt @db.Timestamp(6)
  purchase_count     Int      @default(0)
  view_count         Int      @default(0)
  avg_rating         Float?   @db.Real
  review_count       Int      @default(0)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)
  reviews            marketplace_reviews[]
  purchases          marketplace_purchases[]
  bundle_items       marketplace_bundle_items[]
  cart_items         marketplace_cart[]

  @@index([category])
  @@index([status])
  @@index([required_tier])
  @@index([price_model])
  @@index([is_featured])
  @@index([purchase_count])
  @@index([avg_rating])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_bundles {
  id                 String   @id @default(uuid())
  name               String   @db.VarChar(100)
  description        String   @db.Text
  long_description   String?  @db.Text
  price_amount       Decimal  @db.Decimal(10, 2)
  currency           String   @default("USD") @db.VarChar(3)
  discount_percent   Int
  required_tier      SubscriptionTier
  status             BundleStatus @default(ACTIVE)
  is_featured        Boolean  @default(false)
  is_popular         Boolean  @default(false)
  icon_url           String?  @db.VarChar(500)
  images             String[] @default([])
  purchase_count     Int      @default(0)
  view_count         Int      @default(0)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)
  items              marketplace_bundle_items[]
  purchases          marketplace_purchases[]
  cart_items         marketplace_cart[]

  @@index([status])
  @@index([is_featured])
  @@index([purchase_count])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_bundle_items {
  id                 String   @id @default(uuid())
  bundle_id          String
  tool_id            String
  position           Int      @default(0)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  bundle             marketplace_bundles @relation(fields: [bundle_id], references: [id], onDelete: Cascade)
  tool               marketplace_tools @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  @@unique([bundle_id, tool_id])
  @@index([bundle_id])
  @@index([tool_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_purchases {
  id                 String   @id @default(uuid())
  organization_id    String
  user_id            String
  tool_id            String?
  bundle_id          String?
  purchase_type      PurchaseType
  amount             Decimal  @db.Decimal(10, 2)
  currency           String   @default("USD") @db.VarChar(3)
  payment_method     PaymentMethod
  payment_status     PaymentStatus @default(PENDING)
  stripe_payment_id  String?  @unique @db.VarChar(255)
  stripe_invoice_id  String?  @db.VarChar(255)
  is_subscription    Boolean  @default(false)
  subscription_start DateTime? @db.Timestamp(6)
  subscription_end   DateTime? @db.Timestamp(6)
  auto_renew         Boolean  @default(false)
  status             PurchaseStatus @default(ACTIVE)
  activated_at       DateTime? @db.Timestamp(6)
  cancelled_at       DateTime? @db.Timestamp(6)
  refunded_at        DateTime? @db.Timestamp(6)
  usage_count        Int      @default(0)
  last_used_at       DateTime? @db.Timestamp(6)
  purchase_date      DateTime @default(now()) @db.Timestamp(6)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)
  organization       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user               users @relation(fields: [user_id], references: [id])
  tool               marketplace_tools? @relation(fields: [tool_id], references: [id])
  bundle             marketplace_bundles? @relation(fields: [bundle_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([payment_status])
  @@index([status])
  @@index([tool_id])
  @@index([bundle_id])
  @@index([purchase_date])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_cart {
  id                 String   @id @default(uuid())
  organization_id    String
  user_id            String
  tool_id            String?
  bundle_id          String?
  item_type          CartItemType
  quantity           Int      @default(1)
  added_at           DateTime @default(now()) @db.Timestamp(6)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)
  organization       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user               users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tool               marketplace_tools? @relation(fields: [tool_id], references: [id], onDelete: Cascade)
  bundle             marketplace_bundles? @relation(fields: [bundle_id], references: [id], onDelete: Cascade)

  @@unique([user_id, tool_id, bundle_id])
  @@index([organization_id])
  @@index([user_id])
  @@index([tool_id])
  @@index([bundle_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model marketplace_reviews {
  id                 String   @id @default(uuid())
  tool_id            String
  organization_id    String
  user_id            String
  rating             Int
  title              String?  @db.VarChar(200)
  review             String?  @db.Text
  verified_purchase  Boolean  @default(false)
  helpful_count      Int      @default(0)
  flagged_count      Int      @default(0)
  status             ReviewStatus @default(PENDING)
  moderated_at       DateTime? @db.Timestamp(6)
  moderated_by       String?
  moderation_notes   String?   @db.Text
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @updatedAt @db.Timestamp(6)
  tool               marketplace_tools @relation(fields: [tool_id], references: [id], onDelete: Cascade)
  organization       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user               users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  moderator          users? @relation("ReviewModerator", fields: [moderated_by], references: [id])

  @@unique([tool_id, user_id])
  @@index([tool_id])
  @@index([organization_id])
  @@index([user_id])
  @@index([status])
  @@index([rating])
}

/// AI-HUB Module Models

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_agents {
  id                String             @id
  name              String             @db.VarChar(100)
  description       String?            @db.Text
  avatar            String?            @db.VarChar(500)
  personality       Json               @db.JsonB
  model_config      Json               @db.JsonB
  capabilities      String[]           @default([])
  memory            Json               @db.JsonB
  execution_count   Int                @default(0)
  success_rate      Float?
  avg_response_time Float?
  is_active         Boolean            @default(true)
  status            AgentStatus        @default(IDLE)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  organization_id   String
  organization      organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by        String
  creator           users              @relation("AIAgentCreator", fields: [created_by], references: [id], onDelete: Cascade)
  team_members      team_members[]
  executions        agent_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([status])
  @@index([is_active])
  @@map("ai_agents")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_teams {
  id              String          @id
  name            String          @db.VarChar(100)
  description     String?         @db.Text
  structure       TeamStructure
  coordination    Json            @db.JsonB
  execution_count Int             @default(0)
  success_rate    Float?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  organization_id String
  organization    organizations   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by      String
  creator         users           @relation("AgentTeamCreator", fields: [created_by], references: [id], onDelete: Cascade)
  members         team_members[]
  executions      team_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([structure])
  @@map("agent_teams")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_members {
  id        String      @id
  team_id   String
  team      agent_teams @relation(fields: [team_id], references: [id], onDelete: Cascade)
  agent_id  String
  agent     ai_agents   @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  role      TeamRole
  priority  Int         @default(0)
  joined_at DateTime    @default(now())

  @@unique([team_id, agent_id])
  @@index([team_id])
  @@index([agent_id])
  @@map("team_members")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model automation_workflows {
  id              String                @id
  name            String                @db.VarChar(100)
  description     String?               @db.Text
  nodes           Json                  @db.JsonB
  edges           Json                  @db.JsonB
  variables       Json?                 @db.JsonB
  is_active       Boolean               @default(true)
  version         String                @default("1.0.0") @db.VarChar(20)
  tags            String[]              @default([])
  execution_count Int                   @default(0)
  last_executed   DateTime?
  template_id     String?
  template        workflow_templates?   @relation(fields: [template_id], references: [id], onDelete: SetNull)
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
  organization_id String
  organization    organizations         @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by      String
  creator         users                 @relation("AutomationWorkflowCreator", fields: [created_by], references: [id], onDelete: Cascade)
  executions      workflow_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([is_active])
  @@index([template_id])
  @@index([created_at])
  @@map("automation_workflows")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workflow_executions {
  id                    String                 @id
  workflow_id           String
  workflow_type         String
  automation_workflow   automation_workflows?  @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  status                ExecutionStatus        @default(PENDING)
  started_at            DateTime               @default(now())
  completed_at          DateTime?
  duration              Int?
  input                 Json?                  @db.JsonB
  output                Json?                  @db.JsonB
  error                 String?                @db.Text
  logs                  Json[]                 @default([])
  nodes_executed        Int                    @default(0)
  tokens_used           Int                    @default(0)
  cost                  Decimal                @default(0) @db.Decimal(12, 2)
  agent_executions      agent_executions[]

  @@index([workflow_id, workflow_type])
  @@index([status])
  @@index([started_at])
  @@map("workflow_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_executions {
  id                    String               @id
  agent_id              String
  agent                 ai_agents            @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  workflow_execution_id String?
  workflow_execution    workflow_executions? @relation(fields: [workflow_execution_id], references: [id], onDelete: SetNull)
  task                  String               @db.Text
  input                 Json                 @db.JsonB
  output                Json?                @db.JsonB
  status                ExecutionStatus      @default(PENDING)
  started_at            DateTime             @default(now())
  completed_at          DateTime?
  duration              Int?
  tokens_used           Int                  @default(0)
  cost                  Decimal              @default(0) @db.Decimal(12, 2)
  model                 String?              @db.VarChar(100)
  provider              String?              @db.VarChar(50)

  @@index([agent_id])
  @@index([workflow_execution_id])
  @@index([status])
  @@index([started_at])
  @@map("agent_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_executions {
  id            String          @id
  team_id       String
  team          agent_teams     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  task          String          @db.Text
  pattern       TeamStructure
  input         Json            @db.JsonB
  output        Json?           @db.JsonB
  status        ExecutionStatus @default(PENDING)
  started_at    DateTime        @default(now())
  completed_at  DateTime?
  duration      Int?
  agent_results Json[]          @default([])

  @@index([team_id])
  @@index([status])
  @@index([started_at])
  @@map("team_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model integrations {
  id              String            @id
  name            String            @db.VarChar(100)
  provider        String            @db.VarChar(50)
  credentials     Json              @db.JsonB
  config          Json              @db.JsonB
  is_active       Boolean           @default(true)
  last_tested     DateTime?
  status          IntegrationStatus @default(DISCONNECTED)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  organization_id String
  organization    organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by      String
  creator         users             @relation("IntegrationCreator", fields: [created_by], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by])
  @@index([provider])
  @@index([status])
  @@map("integrations")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workflow_templates {
  id                   String                 @id
  name                 String                 @db.VarChar(100)
  description          String                 @db.Text
  category             TemplateCategory
  nodes                Json                   @db.JsonB
  edges                Json                   @db.JsonB
  variables            Json?                  @db.JsonB
  icon                 String?                @db.VarChar(100)
  tags                 String[]               @default([])
  difficulty           DifficultyLevel        @default(BEGINNER)
  estimated_time       Int?
  usage_count          Int                    @default(0)
  rating               Float?
  is_public            Boolean                @default(false)
  is_featured          Boolean                @default(false)
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  organization_id      String?
  organization         organizations?         @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by           String?
  creator              users?                 @relation("WorkflowTemplateCreator", fields: [created_by], references: [id], onDelete: SetNull)
  automation_workflows automation_workflows[]

  @@index([organization_id])
  @@index([created_by])
  @@index([category])
  @@index([is_public])
  @@index([is_featured])
  @@map("workflow_templates")
}

/// REID Analytics Module Models

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neighborhood_insights {
  id                  String    @id @default(uuid())
  organization_id     String
  area_name           String    @db.VarChar(200)
  area_code           String    @db.VarChar(50)
  area_type           AreaType
  zip_code            String?   @db.VarChar(10)
  city                String?   @db.VarChar(100)
  state               String?   @db.VarChar(2)
  county              String?   @db.VarChar(100)

  // Market Data
  median_price        Decimal?  @db.Decimal(12, 2)
  avg_price           Decimal?  @db.Decimal(12, 2)
  price_per_sqft      Decimal?  @db.Decimal(10, 2)
  price_change        Float?
  days_on_market      Int?
  inventory           Int?

  // Demographics
  median_age          Float?
  median_income       Decimal?  @db.Decimal(12, 2)
  households          Int?

  // Schools
  school_rating       Float?

  // Quality of Life
  walk_score          Int?
  bike_score          Int?
  crime_index         String?   @db.VarChar(50)
  park_proximity      Float?
  commute_time        Int?

  // Investment Metrics
  rent_yield          Float?
  appreciation_rate   Float?
  investment_grade    String?   @db.VarChar(20)

  // Metadata
  data_source         String?   @db.VarChar(100)
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt @db.Timestamp(6)
  created_by_id       String

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator             users @relation("NeighborhoodInsightCreator", fields: [created_by_id], references: [id])
  alerts              property_alerts[]

  @@index([organization_id, area_type, zip_code])
  @@index([organization_id, city, state])
  @@index([created_at])
  @@map("neighborhood_insights")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model property_alerts {
  id                  String          @id @default(uuid())
  organization_id     String
  user_id             String?
  name                String          @db.VarChar(200)
  description         String?         @db.Text
  alert_type          AlertType
  is_active           Boolean         @default(true)

  // Geographic Criteria
  area_type           AreaType?
  zip_codes           String[]        @default([])
  cities              String[]        @default([])
  states              String[]        @default([])

  // Alert Conditions
  conditions          Json            @db.JsonB

  // Delivery Settings
  frequency           AlertFrequency
  delivery_channels   String[]        @default([])
  last_triggered_at   DateTime?       @db.Timestamp(6)
  trigger_count       Int             @default(0)

  // Advanced
  priority            Priority        @default(MEDIUM)
  email_addresses     String[]        @default([])
  webhook_url         String?         @db.VarChar(500)

  // Metadata
  tags                String[]        @default([])
  created_at          DateTime        @default(now()) @db.Timestamp(6)
  updated_at          DateTime        @updatedAt @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user                users? @relation("PropertyAlertCreator", fields: [user_id], references: [id])
  insight             neighborhood_insights? @relation(fields: [insight_id], references: [id])
  triggers            alert_triggers[]
  insight_id          String?

  @@index([organization_id, is_active])
  @@index([user_id, is_active])
  @@index([alert_type, is_active])
  @@map("property_alerts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model alert_triggers {
  id                  String          @id @default(uuid())
  alert_id            String
  triggered_at        DateTime        @default(now()) @db.Timestamp(6)
  trigger_data        Json            @db.JsonB
  notification_sent   Boolean         @default(false)

  // Relations
  alert               property_alerts @relation(fields: [alert_id], references: [id], onDelete: Cascade)

  @@index([alert_id, triggered_at])
  @@map("alert_triggers")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model market_reports {
  id                  String          @id @default(uuid())
  organization_id     String
  user_id             String
  name                String          @db.VarChar(200)
  description         String?         @db.Text
  report_type         ReidReportType
  status              ContentStatus   @default(DRAFT)

  // Geographic Scope
  area_type           AreaType?
  zip_codes           String[]        @default([])
  cities              String[]        @default([])
  states              String[]        @default([])

  // Report Config
  date_range_start    DateTime?       @db.Date
  date_range_end      DateTime?       @db.Date
  configuration       Json?           @db.JsonB

  // Report Data
  data                Json?           @db.JsonB
  insights            Json?           @db.JsonB

  // File Storage
  file_path           String?         @db.VarChar(500)
  file_size           Int?
  file_format         String?         @db.VarChar(20)

  // Sharing
  is_public           Boolean         @default(false)
  shared_with_users   String[]        @default([])
  public_url          String?         @unique @db.VarChar(500)
  share_token         String?         @unique @db.VarChar(100)
  expires_at          DateTime?       @db.Timestamp(6)

  // Template & Scheduling
  is_template         Boolean         @default(false)
  template_id         String?
  schedule            Json?           @db.JsonB

  // Analytics
  view_count          Int             @default(0)
  download_count      Int             @default(0)
  last_viewed_at      DateTime?       @db.Timestamp(6)

  // Metadata
  tags                String[]        @default([])
  generated_at        DateTime?       @db.Timestamp(6)
  created_at          DateTime        @default(now()) @db.Timestamp(6)
  updated_at          DateTime        @updatedAt @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator             users @relation("MarketReportCreator", fields: [user_id], references: [id])

  @@index([organization_id, report_type, status])
  @@index([user_id, created_at])
  @@index([is_template])
  @@map("market_reports")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reid_roi_simulations {
  id                  String    @id @default(uuid())
  organization_id     String
  user_id             String
  name                String    @db.VarChar(200)
  description         String?   @db.Text

  // Property Info
  property_address    String?   @db.VarChar(500)
  zip_code            String?   @db.VarChar(10)
  city                String?   @db.VarChar(100)
  state               String?   @db.VarChar(2)

  // Simulation Data
  inputs              Json      @db.JsonB
  results             Json      @db.JsonB

  // Scenario Analysis
  scenario_type       String?   @db.VarChar(50)
  parent_simulation_id String?

  // Sharing & Templates
  is_shared           Boolean   @default(false)
  shared_with_users   String[]  @default([])
  is_template         Boolean   @default(false)
  template_category   String?   @db.VarChar(100)

  // Metadata
  calculation_version String?   @db.VarChar(20)
  tags                String[]  @default([])
  notes               String?   @db.Text
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt @db.Timestamp(6)
  last_viewed_at      DateTime? @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user                users @relation("ROISimulationCreator", fields: [user_id], references: [id])
  parent_simulation   reid_roi_simulations? @relation("SimulationScenarios", fields: [parent_simulation_id], references: [id], onDelete: SetNull)
  child_scenarios     reid_roi_simulations[] @relation("SimulationScenarios")

  @@index([organization_id, user_id])
  @@index([organization_id, zip_code])
  @@index([is_template, template_category])
  @@index([created_at])
  @@map("reid_roi_simulations")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reid_ai_profiles {
  id                  String    @id @default(uuid())
  organization_id     String
  user_id             String?

  // Profile Type
  profile_type        String    @db.VarChar(50)
  target_type         String?   @db.VarChar(50)

  // Geographic
  address             String?   @db.VarChar(500)
  zip_code            String?   @db.VarChar(10)
  city                String?   @db.VarChar(100)
  state               String?   @db.VarChar(2)
  county              String?   @db.VarChar(100)
  neighborhood        String?   @db.VarChar(200)
  latitude            Decimal?  @db.Decimal(10, 8)
  longitude           Decimal?  @db.Decimal(11, 8)

  // AI-Generated Content
  summary             String    @db.Text
  detailed_analysis   String    @db.Text
  strengths           Json      @db.JsonB
  weaknesses          Json      @db.JsonB
  opportunities       Json      @db.JsonB

  // AI Scores
  overall_score       Float?
  investment_score    Float?
  lifestyle_score     Float?
  growth_potential    Float?
  risk_score          Float?

  // Metrics & Recommendations
  metrics             Json?     @db.JsonB
  recommendations     Json?     @db.JsonB

  // AI Model Info
  data_sources        String[]  @default([])
  ai_model            AIModel   @default(KIMIK2)
  model_version       String?   @db.VarChar(50)
  confidence_score    Float?

  // Verification
  is_public           Boolean   @default(false)
  is_verified         Boolean   @default(false)
  verified_by         String?
  verified_at         DateTime? @db.Timestamp(6)

  // Analytics
  view_count          Int       @default(0)
  last_viewed_at      DateTime? @db.Timestamp(6)

  // Cache & Refresh
  expires_at          DateTime? @db.Timestamp(6)
  last_refreshed_at   DateTime? @db.Timestamp(6)

  // Metadata
  tags                String[]  @default([])
  notes               String?   @db.Text
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user                users? @relation("AIProfileCreator", fields: [user_id], references: [id], onDelete: SetNull)

  @@index([organization_id, profile_type])
  @@index([zip_code, profile_type])
  @@index([city, state])
  @@index([latitude, longitude])
  @@index([overall_score])
  @@map("reid_ai_profiles")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_preferences {
  id                  String        @id @default(uuid())
  user_id             String        @unique

  // Display Preferences
  theme               String        @default("dark") @db.VarChar(20)
  chart_type          String        @default("line") @db.VarChar(20)
  map_style           String        @default("dark") @db.VarChar(20)

  // Dashboard Layout (JSON)
  dashboard_layout    Json?         @db.JsonB

  // REID-specific preferences
  default_area_type   AreaType?
  favorite_areas      String[]      @default([])
  alert_preferences   Json?         @db.JsonB

  // Metadata
  created_at          DateTime      @default(now()) @db.Timestamp(6)
  updated_at          DateTime      @updatedAt @db.Timestamp(6)

  // Relations
  user                users         @relation("UserPreferences", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("user_preferences")
}

/// Essential Real Estate Agent Models

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model open_houses {
  id                  String    @id @default(uuid())
  organization_id     String
  listing_id          String
  host_agent_id       String
  title               String    @db.VarChar(200)
  description         String?   @db.Text
  start_time          DateTime  @db.Timestamp(6)
  end_time            DateTime  @db.Timestamp(6)
  status              String    @db.VarChar(50)

  // Registration & Attendance
  registration_required Boolean @default(false)
  max_attendees       Int?
  attendee_count      Int       @default(0)
  lead_count          Int       @default(0)

  // Marketing
  marketing_materials Json?     @db.JsonB
  flyer_url           String?   @db.VarChar(500)
  social_media_posts  Json?     @db.JsonB

  // Feedback
  feedback_collected  Json?     @db.JsonB
  success_rating      Int?

  // Metadata
  notes               String?   @db.Text
  tags                String[]  @default([])
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  listing             listings @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  host_agent          users @relation("OpenHouseHost", fields: [host_agent_id], references: [id])
  attendees           open_house_attendees[]

  @@index([organization_id, start_time])
  @@index([listing_id, start_time])
  @@index([host_agent_id, start_time])
  @@index([status, start_time])
  @@map("open_houses")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model open_house_attendees {
  id                  String    @id @default(uuid())
  open_house_id       String
  name                String    @db.VarChar(200)
  email               String?   @db.VarChar(255)
  phone               String?   @db.VarChar(50)
  attended            Boolean   @default(false)
  feedback            String?   @db.Text
  interest_level      String?   @db.VarChar(20)

  // Lead Conversion
  converted_to_lead   Boolean   @default(false)
  lead_id             String?

  // Metadata
  registered_at       DateTime  @default(now()) @db.Timestamp(6)
  checked_in_at       DateTime? @db.Timestamp(6)

  // Relations
  open_house          open_houses @relation(fields: [open_house_id], references: [id], onDelete: Cascade)
  lead                leads? @relation(fields: [lead_id], references: [id])

  @@index([open_house_id])
  @@index([lead_id])
  @@index([email])
  @@map("open_house_attendees")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model commissions {
  id                  String    @id @default(uuid())
  organization_id     String
  agent_id            String
  deal_id             String?
  transaction_loop_id String?

  // Commission Details
  commission_type     String    @db.VarChar(50)
  gross_commission    Decimal   @db.Decimal(12, 2)
  agent_split_percent Decimal   @db.Decimal(5, 2)
  agent_commission    Decimal   @db.Decimal(12, 2)

  // Split Details
  splits              Json?     @db.JsonB
  broker_split        Decimal?  @db.Decimal(12, 2)
  referral_fee        Decimal?  @db.Decimal(12, 2)

  // Payment
  status              String    @db.VarChar(50)
  expected_pay_date   DateTime? @db.Date
  paid_date           DateTime? @db.Date
  payment_method      String?   @db.VarChar(50)
  invoice_number      String?   @db.VarChar(100)

  // Transaction Details
  property_address    String?   @db.VarChar(500)
  sale_price          Decimal?  @db.Decimal(12, 2)
  close_date          DateTime? @db.Date

  // Metadata
  notes               String?   @db.Text
  tags                String[]  @default([])
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  organization        organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  agent               users @relation("CommissionEarner", fields: [agent_id], references: [id])
  deal                deals? @relation(fields: [deal_id], references: [id])
  transaction_loop    transaction_loops? @relation(fields: [transaction_loop_id], references: [id])

  @@index([organization_id, agent_id])
  @@index([agent_id, status])
  @@index([status, expected_pay_date])
  @@index([close_date])
  @@map("commissions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expense_categories {
  id                 String         @id @default(uuid())
  organization_id    String?        // NULL = system category, non-NULL = custom

  // Category Details
  name               String         @db.VarChar(100)
  code               String         @db.VarChar(50)
  description        String?        @db.Text

  // Tax Information
  irs_category       String?        @db.VarChar(100)
  default_deductible Boolean        @default(true)
  deduction_limit    Decimal?       @db.Decimal(5, 2)

  // Visual
  color              String?        @db.VarChar(7)
  icon               String?        @db.VarChar(50)

  // Status
  is_active          Boolean        @default(true)
  is_system          Boolean        @default(false)

  // Timestamps
  created_at         DateTime       @default(now()) @db.Timestamp(6)
  updated_at         DateTime       @updatedAt @db.Timestamp(6)

  // Relationships
  organization       organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  expenses           expenses[]

  // Constraints
  @@unique([organization_id, code])
  @@index([organization_id])
  @@index([is_system])
  @@index([is_active])
  @@map("expense_categories")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expenses {
  id                 String            @id @default(uuid())
  organization_id    String
  user_id            String

  // Expense Details
  date               DateTime          @db.Timestamp(6)
  merchant           String            @db.VarChar(255)
  amount             Decimal           @db.Decimal(10, 2)
  currency           String            @default("USD") @db.VarChar(3)

  // Categorization
  category_id        String
  description        String?           @db.Text
  notes              String?           @db.Text

  // Property Association (optional)
  listing_id         String?

  // Tax Information
  is_deductible      Boolean           @default(true)
  deduction_percent  Int               @default(100)
  tax_year           Int

  // Mileage Tracking (if category is mileage)
  mileage_start      String?           @db.VarChar(500)
  mileage_end        String?           @db.VarChar(500)
  mileage_distance   Decimal?          @db.Decimal(8, 2)
  mileage_purpose    String?           @db.VarChar(500)

  // QuickBooks Integration
  quickbooks_id      String?           @unique
  quickbooks_synced  DateTime?         @db.Timestamp(6)

  // Status & Workflow
  status             ExpenseStatus     @default(PENDING)
  approved_by        String?
  approved_at        DateTime?         @db.Timestamp(6)

  // Timestamps
  created_at         DateTime          @default(now()) @db.Timestamp(6)
  updated_at         DateTime          @updatedAt @db.Timestamp(6)

  // Relationships
  organization       organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user               users             @relation("ExpenseCreator", fields: [user_id], references: [id])
  category           expense_categories @relation(fields: [category_id], references: [id])
  listing            listings?         @relation(fields: [listing_id], references: [id], onDelete: SetNull)
  approver           users?            @relation("ExpenseApprover", fields: [approved_by], references: [id])
  receipts           receipts[]

  // Indexes
  @@index([organization_id])
  @@index([user_id])
  @@index([date])
  @@index([category_id])
  @@index([listing_id])
  @@index([tax_year])
  @@index([status])
  @@index([is_deductible])
  @@index([quickbooks_id])
  @@map("expenses")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model receipts {
  id                 String      @id @default(uuid())
  organization_id    String
  expense_id         String

  // File Information
  file_name          String      @db.VarChar(255)
  file_url           String      @db.VarChar(500)
  file_type          String      @db.VarChar(50)
  file_size_bytes    BigInt

  // OCR Data
  ocr_text           String?     @db.Text
  ocr_confidence     Decimal?    @db.Decimal(5, 2)
  ocr_processed_at   DateTime?   @db.Timestamp(6)
  ocr_metadata       Json?       @db.JsonB

  // Extracted Details (from OCR)
  merchant_name      String?     @db.VarChar(255)
  receipt_date       DateTime?   @db.Timestamp(6)
  receipt_total      Decimal?    @db.Decimal(10, 2)

  // Manual Verification
  is_verified        Boolean     @default(false)
  verified_by        String?
  verified_at        DateTime?   @db.Timestamp(6)

  // Timestamps
  created_at         DateTime    @default(now()) @db.Timestamp(6)
  updated_at         DateTime    @updatedAt @db.Timestamp(6)

  // Relationships
  organization       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  expense            expenses    @relation(fields: [expense_id], references: [id], onDelete: Cascade)
  verifier           users?      @relation("ReceiptVerifier", fields: [verified_by], references: [id])

  // Indexes
  @@index([organization_id])
  @@index([expense_id])
  @@index([created_at])
  @@map("receipts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tax_estimates {
  id                      String        @id @default(uuid())
  organization_id         String
  user_id                 String

  // Period Information
  tax_year                Int
  quarter                 Int?
  period_start            DateTime      @db.Date
  period_end              DateTime      @db.Date

  // Income & Expense Totals (calculated)
  total_income            Decimal       @db.Decimal(12, 2)
  total_expenses          Decimal       @db.Decimal(12, 2)
  total_deductions        Decimal       @db.Decimal(12, 2)
  net_income              Decimal       @db.Decimal(12, 2)

  // Tax Calculations
  estimated_tax_rate      Decimal       @db.Decimal(5, 2)
  federal_tax_estimated   Decimal       @db.Decimal(12, 2)
  state_tax_estimated     Decimal       @db.Decimal(12, 2)
  self_employment_tax     Decimal       @db.Decimal(12, 2)
  total_tax_estimated     Decimal       @db.Decimal(12, 2)

  // Payment Tracking
  amount_paid             Decimal       @db.Decimal(12, 2) @default(0)
  payment_due_date        DateTime?     @db.Date
  payment_status          PaymentStatus @default(PENDING)

  // QuickBooks Integration
  quickbooks_id           String?       @unique
  quickbooks_synced       DateTime?     @db.Timestamp(6)

  // Calculation Metadata
  calculation_method      String        @db.VarChar(50)
  assumptions             Json?         @db.JsonB

  // Timestamps
  created_at              DateTime      @default(now()) @db.Timestamp(6)
  updated_at              DateTime      @updatedAt @db.Timestamp(6)
  calculated_at           DateTime      @default(now()) @db.Timestamp(6)

  // Relationships
  organization            organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user                    users         @relation("TaxEstimateCreator", fields: [user_id], references: [id])

  // Indexes
  @@unique([organization_id, tax_year, quarter])
  @@index([organization_id])
  @@index([user_id])
  @@index([tax_year])
  @@index([quarter])
  @@index([payment_status])
  @@index([payment_due_date])
  @@map("tax_estimates")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tax_reports {
  id                 String          @id @default(uuid())
  organization_id    String
  user_id            String

  // Report Details
  name               String          @db.VarChar(255)
  template_type      TaxReportType
  tax_year           Int

  // Period (optional - for custom date ranges)
  period_start       DateTime?       @db.Date
  period_end         DateTime?       @db.Date

  // Report Status
  status             TaxReportStatus @default(GENERATING)

  // File Storage
  file_url           String?         @db.VarChar(500)
  file_format        String?         @db.VarChar(10)
  file_size_bytes    BigInt?

  // Report Content Summary
  total_income       Decimal?        @db.Decimal(12, 2)
  total_expenses     Decimal?        @db.Decimal(12, 2)
  total_deductions   Decimal?        @db.Decimal(12, 2)
  categories_count   Int?
  expenses_count     Int?

  // Sharing & Access
  is_shared          Boolean         @default(false)
  shared_with        Json?           @db.JsonB
  share_expires_at   DateTime?       @db.Timestamp(6)

  // QuickBooks Integration
  quickbooks_id      String?         @unique
  quickbooks_synced  DateTime?       @db.Timestamp(6)

  // Generation Metadata
  generated_at       DateTime?       @db.Timestamp(6)
  generation_time_ms Int?
  template_version   String?         @default("1.0") @db.VarChar(10)

  // Timestamps
  created_at         DateTime        @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @updatedAt @db.Timestamp(6)

  // Relationships
  organization       organizations   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user               users           @relation("TaxReportCreator", fields: [user_id], references: [id])

  // Indexes
  @@index([organization_id])
  @@index([user_id])
  @@index([tax_year])
  @@index([template_type])
  @@index([status])
  @@index([created_at])
  @@map("tax_reports")
}

enum SubscriptionTier {
  STARTER
  GROWTH
  ELITE
  ENTERPRISE
  FREE
  CUSTOM
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  GOOGLE_ADS
  SOCIAL_MEDIA
  COLD_CALL
  EMAIL_CAMPAIGN
  EVENT
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW_LEAD
  IN_CONTACT
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
}

enum LeadScore {
  HOT
  WARM
  COLD
}

enum DealStage {
  LEAD
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSING
  CLOSED_WON
  CLOSED_LOST
}

enum LoopStatus {
  DRAFT
  ACTIVE
  UNDER_CONTRACT
  CLOSING
  CLOSED
  CANCELLED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PartyRole {
  BUYER
  SELLER
  BUYER_AGENT
  LISTING_AGENT
  LENDER
  TITLE_COMPANY
  INSPECTOR
  APPRAISER
  ATTORNEY
  ESCROW_OFFICER
  OTHER
}

enum SignatureStatus {
  PENDING
  SENT
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
  MULTI_FAMILY
  CONDO
  TOWNHOUSE
  LUXURY
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  EXPIRED
  WITHDRAWN
  CONTINGENT
}

enum ToolCategory {
  LEAD_GENERATION
  LEAD_NURTURING
  LISTING_OPTIMIZATION
  PROPERTY_SHOPPING
  MARKET_INTELLIGENCE
  INVESTMENT_ANALYSIS
  DOCUMENT_PROCESSING
  COMMISSION_FINANCIAL
  BOOKING_SCHEDULING
  COMMUNICATION
  CRM_TOOLS
  ANALYTICS_TOOLS
  AUTOMATION_TOOLS
  INTEGRATION_TOOLS
}

enum ToolTier {
  T1
  T2
  T3
}

enum BundleType {
  STARTER_PACK
  GROWTH_PACK
  ELITE_PACK
  CUSTOM_PACK
}

enum PurchaseStatus {
  ACTIVE
  CANCELLED
  REFUNDED
  EXPIRED
}

enum ContentType {
  PAGE
  BLOG_POST
  DOCUMENTATION
  TEMPLATE
  ARTICLE
  LANDING_PAGE
  EMAIL_TEMPLATE
  SOCIAL_POST
  PRESS_RELEASE
  NEWSLETTER
  CASE_STUDY
  WHITEPAPER
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
  APPROVED
  SCHEDULED
}

enum CampaignType {
  CONTENT_MARKETING
  EMAIL_MARKETING
  SOCIAL_MEDIA
  PAID_ADVERTISING
  SEO_CAMPAIGN
  LEAD_GENERATION
  BRAND_AWARENESS
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ReportType {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
  TAX_SUMMARY
}

enum AlertType {
  PRICE_DROP
  PRICE_INCREASE
  NEW_LISTING
  SOLD
  INVENTORY_CHANGE
  MARKET_TREND
  DEMOGRAPHIC_CHANGE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActionType {
  NAVIGATION
  API_CALL
  MODAL_FORM
  EXTERNAL_LINK
  WORKFLOW_TRIGGER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
}

enum AIContextType {
  GENERAL
  PROJECT
  CUSTOMER
  TASK
}

enum AIModel {
  OPENAI_GPT4
  CLAUDE_SONNET
  GEMINI
  GROK
  KIMIK2
}

enum AdminAction {
  USER_CREATE
  USER_UPDATE
  USER_SUSPEND
  USER_DELETE
  USER_IMPERSONATE
  ORG_CREATE
  ORG_UPDATE
  ORG_SUSPEND
  ORG_DELETE
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_UPDATE
  SUBSCRIPTION_CANCEL
  FEATURE_FLAG_UPDATE
  SYSTEM_CONFIG_UPDATE
  DATA_EXPORT
  BULK_ACTION
}

enum AlertCategory {
  SYSTEM
  MAINTENANCE
  FEATURE
  SECURITY
  BILLING
  MARKETING
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum AlertLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum AppointmentType {
  MEETING
  CALL
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
  OTHER
}

enum AreaType {
  ZIP
  SCHOOL_DISTRICT
  NEIGHBORHOOD
  COUNTY
  MSA
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  DO_NOT_CONTACT
}

enum ContactType {
  PROSPECT
  CLIENT
  PAST_CLIENT
  PARTNER
  VENDOR
}

enum CustomerSource {
  WEBSITE
  REFERRAL
  SOCIAL
  EMAIL
  OTHER
}

enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  CHURNED
}

enum DashboardActivitySeverity {
  INFO
  SUCCESS
  WARNING
  ERROR
  CRITICAL
}

enum DashboardActivityType {
  USER_ACTION
  SYSTEM_EVENT
  WORKFLOW_UPDATE
  DATA_CHANGE
  SECURITY_EVENT
  INTEGRATION_EVENT
}

enum DashboardTheme {
  LIGHT
  DARK
  AUTO
}

enum DealStatus {
  ACTIVE
  WON
  LOST
  ABANDONED
}

enum DocumentStatus {
  DRAFT
  PENDING
  REVIEWED
  SIGNED
  ARCHIVED
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum ExpenseCategory {
  COMMISSION
  TRAVEL
  MARKETING
  OFFICE
  UTILITIES
  LEGAL
  INSURANCE
  REPAIRS
  MEALS
  EDUCATION
  SOFTWARE
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVIEW
}

enum Industry {
  REAL_ESTATE
  HEALTHCARE
  STRIVE
  GENERAL
}

enum LayoutDensity {
  COMPACT
  NORMAL
  SPACIOUS
}

enum MetricCategory {
  FINANCIAL
  OPERATIONAL
  MARKETING
  SALES
  PRODUCTIVITY
  SYSTEM
  CUSTOM
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum PartyStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REQUIRES_ACTION
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ReidReportType {
  NEIGHBORHOOD_ANALYSIS
  MARKET_OVERVIEW
  COMPARATIVE_STUDY
  INVESTMENT_ANALYSIS
  DEMOGRAPHIC_REPORT
  CUSTOM
}

enum ResourceType {
  AI_TOKENS
  API_CALLS
  STORAGE
  SEATS
}

enum SigningOrder {
  SEQUENTIAL
  PARALLEL
}

enum SocialPlatform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  PINTEREST
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
}

enum ToolType {
  CHATBOT
  ANALYSIS
  AUTOMATION
  INTEGRATION
}

enum TransactionType {
  PURCHASE_AGREEMENT
  LISTING_AGREEMENT
  LEASE_AGREEMENT
  COMMERCIAL_PURCHASE
  COMMERCIAL_LEASE
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  EMPLOYEE
}

enum WidgetType {
  KPI_CARD
  CHART
  TABLE
  ACTIVITY_FEED
  QUICK_ACTIONS
  MODULE_SHORTCUTS
  PROGRESS_TRACKER
  NOTIFICATION_PANEL
  CALENDAR
  WEATHER
}

enum WorkflowStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AgentStatus {
  IDLE
  BUSY
  OFFLINE
  ERROR
}

enum TeamStructure {
  HIERARCHICAL
  COLLABORATIVE
  PIPELINE
  DEMOCRATIC
}

enum TeamRole {
  LEADER
  WORKER
  COORDINATOR
  SPECIALIST
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  TESTING
}

enum TemplateCategory {
  SALES
  SUPPORT
  MARKETING
  DATA_PROCESSING
  AUTOMATION
  ANALYTICS
  CONTENT
  COMMUNICATION
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

/// Marketplace Module Enums

enum PriceModel {
  FREE
  ONE_TIME
  MONTHLY
  ANNUAL
  USAGE_BASED
  CUSTOM
}

enum IntegrationType {
  API
  WEBHOOK
  EMBED
  STANDALONE
  N8N_WORKFLOW
  NATIVE
}

enum ToolStatus {
  ACTIVE
  COMING_SOON
  BETA
  DEPRECATED
  DISABLED
}

enum BundleStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

enum PaymentMethod {
  CREDIT_CARD
  ACH
  INVOICE
  PLATFORM_CREDITS
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum PurchaseType {
  TOOL
  BUNDLE
}

enum CartItemType {
  TOOL
  BUNDLE
}

enum TaxReportType {
  FORM_1099_MISC
  FORM_1099_NEC
  SCHEDULE_C
  SCHEDULE_E
  EXPENSE_SUMMARY
  CATEGORY_BREAKDOWN
  QUARTERLY_ESTIMATE
  ANNUAL_SUMMARY
  CUSTOM
}

enum TaxReportStatus {
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum QuarterEnum {
  Q1
  Q2
  Q3
  Q4
}

enum CalculationMethod {
  STANDARD
  SIMPLIFIED
  CUSTOM
}
