generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_logs {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  old_data        Json?
  new_data        Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users?        @relation(fields: [user_id], references: [id])

  @@index([organization_id, created_at])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_conversations {
  id                String        @id @default(cuid())
  user_id           String
  organization_id   String
  title             String?
  context_type      AIContextType @default(GENERAL)
  context_id        String?
  ai_model          AIModel       @default(OPENAI_GPT4)
  conversation_data Json
  usage_tokens      Int           @default(0)
  is_archived       Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  organizations     organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([organization_id])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_tools {
  id            String           @id @default(cuid())
  name          String
  description   String?
  toolType      ToolType
  required_tier SubscriptionTier
  configuration Json?
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
}

model analytics_events {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  event_type    String
  event_name    String
  element_id    String?
  element_class String?
  element_text  String?
  url           String
  path          String
  x_position    Int?
  y_position    Int?
  scroll_depth  Int?
  properties    Json?
  timestamp     DateTime @default(now())

  @@index([event_type])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

model analytics_goals {
  id               String             @id @default(cuid())
  name             String
  description      String?
  type             String
  conditions       Json
  value            Float?
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  goal_conversions goal_conversions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model appointments {
  id              String            @id @default(cuid())
  organization_id String
  customer_id     String?
  contact_id      String?
  assigned_to     String
  title           String
  description     String?
  start_time      DateTime
  end_time        DateTime
  status          AppointmentStatus @default(SCHEDULED)
  type            AppointmentType   @default(OTHER)
  location        String?
  meeting_url     String?
  reminders_sent  Json?
  lead_id         String?
  deal_id         String?
  listing_id      String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  users           users             @relation(fields: [assigned_to], references: [id])
  customers       customers?        @relation(fields: [customer_id], references: [id])
  contact         contacts?         @relation("ContactAppointments", fields: [contact_id], references: [id])
  organizations   organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  lead            leads?            @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  deal            deals?            @relation(fields: [deal_id], references: [id], onDelete: SetNull)
  listing         listings?         @relation(fields: [listing_id], references: [id], onDelete: SetNull)

  @@index([organization_id])
  @@index([start_time])
  @@index([lead_id])
  @@index([deal_id])
  @@index([listing_id])
  @@index([type])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attachments {
  id              String        @id @default(cuid())
  organization_id String
  entity_type     String
  entity_id       String
  file_name       String
  file_size       Int
  mime_type       String
  file_path       String
  uploaded_by_id  String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [uploaded_by_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// LEGACY: Replaced by ContentPilot CMS (content_items table)
model legacy_content {
  id              String        @id @default(cuid())
  organization_id String
  title           String
  slug            String
  content_type    ContentType
  content         String
  excerpt         String?
  status          ContentStatus @default(DRAFT)
  author_id       String
  published_at    DateTime?
  seo_meta        Json?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  users           users         @relation("LegacyContent", fields: [author_id], references: [id])
  organizations   organizations @relation("LegacyContent", fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, slug])
  @@index([status])
  @@map("content")
}

// ============================================================================
// CONTENTPILOT CMS & MARKETING MODULE
// ============================================================================

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_items {
  id      String  @id @default(cuid())
  title   String
  slug    String
  excerpt String?
  content String  @db.Text

  // Content Metadata
  type     ContentType
  status   ContentStatus @default(DRAFT)
  language String        @default("en")

  // SEO & Marketing
  meta_title       String?
  meta_description String?
  keywords         String[]
  canonical_url    String?

  // Media & Assets
  featured_image String?
  gallery        String[]
  video_url      String?
  audio_url      String?

  // Publishing
  published_at  DateTime?
  scheduled_for DateTime?
  expires_at    DateTime?

  // Engagement Metrics
  view_count    Int @default(0)
  share_count   Int @default(0)
  like_count    Int @default(0)
  comment_count Int @default(0)

  // Analytics
  analytics_data Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  author_id   String
  author      users               @relation("ContentAuthor", fields: [author_id], references: [id])
  category_id String?
  category    content_categories? @relation(fields: [category_id], references: [id])
  tags        content_tags[]
  campaigns   campaign_content[]
  revisions   content_revisions[]
  comments    content_comments[]

  @@unique([slug, organization_id])
  @@index([organization_id, status])
  @@index([organization_id, type])
  @@index([organization_id, published_at])
  @@map("content_items")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_categories {
  id          String  @id @default(cuid())
  name        String
  slug        String
  description String?
  color       String?

  // Category Settings
  is_active  Boolean @default(true)
  sort_order Int     @default(0)

  // SEO
  meta_title       String?
  meta_description String?

  // Parent-Child Relationships
  parent_id String?
  parent    content_categories?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children  content_categories[] @relation("CategoryHierarchy")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String
  creator    users           @relation(fields: [created_by], references: [id])
  content    content_items[]

  @@unique([slug, organization_id])
  @@index([organization_id, is_active])
  @@map("content_categories")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_tags {
  id    String  @id @default(cuid())
  name  String
  slug  String
  color String?

  // Usage tracking
  usage_count Int @default(0)

  created_at DateTime @default(now())

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  content content_items[]

  @@unique([slug, organization_id])
  @@index([organization_id])
  @@map("content_tags")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model media_assets {
  id            String @id @default(cuid())
  name          String
  original_name String
  file_name     String
  file_url      String

  // File Details
  mime_type String
  file_size Int
  width     Int?
  height    Int?
  duration  Float?

  // Metadata
  alt     String?
  caption String?

  // Organization & Folder
  folder_id String?
  folder    media_folders? @relation(fields: [folder_id], references: [id])

  // Usage tracking
  usage_count Int       @default(0)
  last_used   DateTime?

  uploaded_at DateTime @default(now())

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  uploaded_by String
  uploader    users  @relation(fields: [uploaded_by], references: [id])

  @@index([organization_id, folder_id])
  @@index([organization_id, mime_type])
  @@map("media_assets")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model media_folders {
  id   String @id @default(cuid())
  name String
  path String

  // Folder Hierarchy
  parent_id String?
  parent    media_folders?  @relation("FolderHierarchy", fields: [parent_id], references: [id])
  children  media_folders[] @relation("FolderHierarchy")

  created_at DateTime @default(now())

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String
  creator    users          @relation(fields: [created_by], references: [id])
  assets     media_assets[]

  @@unique([path, organization_id])
  @@index([organization_id])
  @@map("media_folders")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model campaigns {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Campaign Configuration
  type   CampaignType
  status CampaignStatus @default(DRAFT)

  // Scheduling
  start_date DateTime?
  end_date   DateTime?
  timezone   String    @default("UTC")

  // Budget & Goals
  budget     Decimal? @db.Decimal(10, 2)
  goal_type  String?
  goal_value Float?

  // Performance Metrics
  impressions Int     @default(0)
  clicks      Int     @default(0)
  conversions Int     @default(0)
  spend       Decimal @default(0) @db.Decimal(10, 2)
  revenue     Decimal @default(0) @db.Decimal(10, 2)

  // Analytics
  analytics_data Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by   String
  creator      users                @relation(fields: [created_by], references: [id])
  content      campaign_content[]
  emails       email_campaigns[]
  social_posts social_media_posts[]

  @@index([organization_id, status])
  @@index([organization_id, type])
  @@map("campaigns")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model campaign_content {
  id          String        @id @default(cuid())
  campaign_id String
  campaign    campaigns     @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  content_id  String
  content     content_items @relation(fields: [content_id], references: [id], onDelete: Cascade)

  // Content Role in Campaign
  role     String
  priority Int    @default(0)

  added_at DateTime @default(now())

  @@unique([campaign_id, content_id])
  @@index([campaign_id])
  @@map("campaign_content")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_campaigns {
  id          String     @id @default(cuid())
  campaign_id String?
  campaign    campaigns? @relation(fields: [campaign_id], references: [id])

  // Email Details
  subject    String
  preheader  String?
  content    String  @db.Text
  plain_text String? @db.Text

  // Sending Configuration
  from_name  String
  from_email String
  reply_to   String?

  // Segmentation & Targeting
  audience_segment Json?

  // Scheduling
  scheduled_for DateTime?
  sent_at       DateTime?

  // Performance Metrics
  sent         Int @default(0)
  delivered    Int @default(0)
  opened       Int @default(0)
  clicked      Int @default(0)
  bounced      Int @default(0)
  unsubscribed Int @default(0)

  // Status
  status EmailStatus @default(DRAFT)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String
  creator    users  @relation(fields: [created_by], references: [id])

  @@index([organization_id, status])
  @@map("email_campaigns")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model social_media_posts {
  id          String     @id @default(cuid())
  campaign_id String?
  campaign    campaigns? @relation(fields: [campaign_id], references: [id])

  // Post Content
  content    String   @db.Text
  media_urls String[]

  // Platform Configuration
  platforms SocialPlatform[]

  // Scheduling
  scheduled_for DateTime?
  published_at  DateTime?

  // Performance per Platform
  platform_metrics Json?

  // Status
  status PostStatus @default(DRAFT)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String
  creator    users  @relation(fields: [created_by], references: [id])

  @@index([organization_id, status])
  @@map("social_media_posts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_revisions {
  id         String        @id @default(cuid())
  content_id String
  content    content_items @relation(fields: [content_id], references: [id], onDelete: Cascade)

  // Revision Data
  title        String
  content_body String  @db.Text
  excerpt      String?

  // Revision Metadata
  version Int
  comment String?

  created_at DateTime @default(now())

  // Relations
  created_by String
  creator    users  @relation(fields: [created_by], references: [id])

  @@index([content_id])
  @@map("content_revisions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content_comments {
  id         String        @id @default(cuid())
  content_id String
  content    content_items @relation(fields: [content_id], references: [id], onDelete: Cascade)

  // Comment Details
  comment String        @db.Text
  status  CommentStatus @default(PENDING)

  // Hierarchy
  parent_id String?
  parent    content_comments?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies   content_comments[] @relation("CommentReplies")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  author_id String
  author    users  @relation(fields: [author_id], references: [id])

  @@index([content_id, status])
  @@index([organization_id])
  @@map("content_comments")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model conversations {
  id                 String                 @id @default(cuid())
  organization_id    String
  industry           String                 @default("strive")
  session_id         String
  user_message       String
  assistant_response String
  problem_detected   String?
  solution_presented String?
  conversation_stage String
  outcome            String?
  conversion_score   Float?
  booking_completed  Boolean                @default(false)
  response_time_ms   Int?
  user_satisfaction  Int?
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  embedding          Unsupported("vector")?
  organizations      organizations          @relation(fields: [organization_id], references: [id])

  @@index([created_at(sort: Desc)])
  @@index([embedding])
  @@index([industry])
  @@index([organization_id])
  @@index([session_id])
  @@index([session_id], map: "conversations_session_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model customers {
  id              String         @id @default(cuid())
  organization_id String
  name            String
  email           String?
  phone           String?
  company         String?
  status          CustomerStatus @default(LEAD)
  source          CustomerSource @default(WEBSITE)
  tags            String[]
  custom_fields   Json?
  assigned_to     String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  appointments    appointments[]
  users           users?         @relation(fields: [assigned_to], references: [id])
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  projects        projects[]

  @@index([email])
  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model leads {
  id              String         @id @default(cuid())
  name            String
  email           String?
  phone           String?
  company         String?
  source          LeadSource     @default(WEBSITE)
  status          LeadStatus     @default(NEW_LEAD)
  score           LeadScore      @default(COLD)
  score_value     Int            @default(0)
  budget          Decimal?       @db.Decimal(12, 2)
  timeline        String?
  notes           String?        @db.Text
  tags            String[]       @default([])
  custom_fields   Json?          @db.JsonB
  organization_id String
  assigned_to_id  String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  last_contact_at DateTime?
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to     users?         @relation("LeadAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  activities      activities[]
  deals           deals[]
  appointments    appointments[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([status])
  @@index([source])
  @@index([score])
  @@index([created_at])
  @@map("leads")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contacts {
  id                       String         @id @default(cuid())
  name                     String
  email                    String?
  phone                    String?
  company                  String?
  position                 String?
  type                     ContactType    @default(PROSPECT)
  status                   ContactStatus  @default(ACTIVE)
  notes                    String?        @db.Text
  tags                     String[]       @default([])
  custom_fields            Json?          @db.JsonB
  linkedin_url             String?
  twitter_url              String?
  preferred_contact_method String?
  organization_id          String
  assigned_to_id           String?
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  last_contact_at          DateTime?
  organizations            organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to              users?         @relation("ContactAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  activities               activities[]
  deals                    deals[]
  appointments             appointments[] @relation("ContactAppointments")

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([type])
  @@index([status])
  @@index([created_at])
  @@map("contacts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model deals {
  id                  String         @id @default(cuid())
  title               String
  description         String?        @db.Text
  value               Decimal        @db.Decimal(12, 2)
  stage               DealStage      @default(LEAD)
  status              DealStatus     @default(ACTIVE)
  probability         Int            @default(50)
  expected_close_date DateTime?
  actual_close_date   DateTime?
  lost_reason         String?
  notes               String?        @db.Text
  tags                String[]       @default([])
  custom_fields       Json?          @db.JsonB
  lead_id             String?
  contact_id          String?
  listing_id          String?
  organization_id     String
  assigned_to_id      String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  organizations       organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to         users?         @relation("DealAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  lead                leads?         @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  contact             contacts?      @relation(fields: [contact_id], references: [id], onDelete: SetNull)
  listing             listings?      @relation(fields: [listing_id], references: [id], onDelete: SetNull)
  activities          activities[]
  appointments        appointments[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([stage])
  @@index([status])
  @@index([expected_close_date])
  @@index([created_at])
  @@map("deals")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model listings {
  id               String         @id @default(cuid())
  title            String
  description      String?        @db.Text
  address          String
  city             String
  state            String
  zip_code         String
  country          String         @default("USA")
  property_type    PropertyType   @default(RESIDENTIAL)
  bedrooms         Int?
  bathrooms        Decimal?       @db.Decimal(3, 1)
  square_feet      Int?
  lot_size         Decimal?       @db.Decimal(10, 2)
  year_built       Int?
  price            Decimal        @db.Decimal(12, 2)
  price_per_sqft   Decimal?       @db.Decimal(10, 2)
  status           ListingStatus  @default(ACTIVE)
  mls_number       String?
  listing_date     DateTime?
  expiration_date  DateTime?
  images           String[]       @default([])
  virtual_tour_url String?
  features         String[]       @default([])
  notes            String?        @db.Text
  tags             String[]       @default([])
  custom_fields    Json?          @db.JsonB
  organization_id  String
  assigned_to_id   String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  organizations    organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to      users?         @relation("ListingAgent", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  deals            deals[]
  activities       activities[]
  appointments     appointments[]
  expenses         expenses[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([status])
  @@index([city])
  @@index([state])
  @@index([property_type])
  @@index([created_at])
  @@map("listings")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activities {
  id               String        @id @default(cuid())
  type             ActivityType
  title            String
  description      String?       @db.Text
  outcome          String?
  duration_minutes Int?
  lead_id          String?
  contact_id       String?
  deal_id          String?
  listing_id       String?
  organization_id  String
  created_by_id    String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  completed_at     DateTime?
  organizations    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by       users         @relation("ActivityCreatedBy", fields: [created_by_id], references: [id], onDelete: Cascade)
  lead             leads?        @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  contact          contacts?     @relation(fields: [contact_id], references: [id], onDelete: SetNull)
  deal             deals?        @relation(fields: [deal_id], references: [id], onDelete: SetNull)
  listing          listings?     @relation(fields: [listing_id], references: [id], onDelete: SetNull)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([type])
  @@index([lead_id])
  @@index([contact_id])
  @@index([deal_id])
  @@index([created_at])
  @@map("activities")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model example_conversations {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  industry           String                 @default("strive")
  user_input         String
  assistant_response String
  problem_type       String?
  solution_type      String?
  outcome            String?
  conversion_score   Float?
  embedding          Unsupported("vector")?
  created_at         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @default(now()) @db.Timestamptz(6)

  @@index([embedding])
  @@index([industry])
}

model goal_conversions {
  id              String          @id @default(cuid())
  goal_id         String
  session_id      String
  user_id         String?
  value           Float?
  url             String
  path            String
  timestamp       DateTime        @default(now())
  analytics_goals analytics_goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@index([goal_id])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id              String           @id @default(cuid())
  user_id         String
  organization_id String
  type            NotificationType
  title           String
  message         String
  action_url      String?
  entity_type     String?
  entity_id       String?
  read            Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([organization_id])
  @@index([read])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String        @id @default(cuid())
  user_id         String
  organization_id String
  role            OrgRole       @default(MEMBER)
  permissions     Json?
  joined_at       DateTime      @default(now())
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_tool_configs {
  id              String        @id @default(cuid())
  organization_id String
  tool_id         String
  industry        Industry
  enabled         Boolean       @default(false)
  settings        Json          @default("{}")
  enabled_at      DateTime?
  disabled_at     DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, tool_id])
  @@index([organization_id, enabled])
  @@index([industry])
  @@index([tool_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id                        String                      @id @default(cuid())
  name                      String
  slug                      String                      @unique
  description               String?
  settings                  Json?
  subscription_status       SubscriptionStatus          @default(TRIAL)
  billing_email             String?
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  activity_logs             activity_logs[]
  ai_conversations          ai_conversations[]
  appointments              appointments[]
  attachments               attachments[]
  legacy_content            legacy_content[]            @relation("LegacyContent")
  conversations             conversations[]
  customers                 customers[]
  notifications             notifications[]
  organization_members      organization_members[]
  organization_tool_configs organization_tool_configs[]
  projects                  projects[]
  subscriptions             subscriptions?
  usage_tracking            usage_tracking[]
  transaction_loops         transaction_loops[]
  workflow_templates        workflows[]
  transaction_audit_logs    transaction_audit_logs[]
  leads                     leads[]
  contacts                  contacts[]
  deals                     deals[]
  listings                  listings[]
  activities                activities[]

  // ContentPilot CMS & Marketing relations
  content            content_items[]
  content_categories content_categories[]
  content_tags       content_tags[]
  media_assets       media_assets[]
  media_folders      media_folders[]
  campaigns          campaigns[]
  email_campaigns    email_campaigns[]
  social_posts       social_media_posts[]
  content_comments   content_comments[]

  // Admin & Onboarding relations
  onboarding_sessions onboarding_sessions[] @relation("OnboardingSessions")

  // Expense Management relations
  expenses           expenses[]
  expense_categories expense_categories[]
  tax_estimates      tax_estimates[]
  expense_reports    expense_reports[]

  // Main Dashboard relations
  dashboard_widgets dashboard_widgets[]
  activity_feeds    activity_feeds[]
  quick_actions     quick_actions[]
  dashboard_metrics dashboard_metrics[]

  // REID (Real Estate Intelligence Dashboard) relations
  neighborhood_insights neighborhood_insights[]
  property_alerts       property_alerts[]
  market_reports        market_reports[]

  // Tool Marketplace relations
  tool_purchases   tool_purchases[]
  bundle_purchases bundle_purchases[]
  tool_reviews     tool_reviews[]
  shopping_carts   shopping_carts[]

  // AI Garage & Shop relations
  agent_orders      custom_agent_orders[]
  agent_templates   agent_templates[]
  tool_blueprints   tool_blueprints[]
  template_reviews  template_reviews[]
  project_showcases project_showcases[]

  // NeuroFlow Hub Relations
  neuroflow_workflows          neuroflow_workflows[]
  neuroflow_ai_agents          neuroflow_ai_agents[]
  neuroflow_agent_teams        neuroflow_agent_teams[]
  neuroflow_integrations       neuroflow_integrations[]
  neuroflow_workflow_templates neuroflow_workflow_templates[]
}

model page_views {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  url           String
  path          String
  title         String?
  referrer      String?
  user_agent    String?
  ip_address    String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  view_duration Int?
  timestamp     DateTime @default(now())

  @@index([path])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id                  String        @id @default(cuid())
  organization_id     String
  customer_id         String?
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  start_date          DateTime?
  due_date            DateTime?
  completion_date     DateTime?
  budget              Decimal?      @db.Decimal(10, 2)
  progress_percentage Int           @default(0)
  project_manager_id  String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  customers           customers?    @relation(fields: [customer_id], references: [id])
  organizations       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users               users         @relation(fields: [project_manager_id], references: [id])
  tasks               tasks[]

  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                     String             @id @default(cuid())
  organization_id        String             @unique
  stripe_subscription_id String?            @unique
  stripe_customer_id     String?
  status                 SubscriptionStatus @default(TRIAL)
  tier                   SubscriptionTier   @default(STARTER)
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean            @default(false)
  metadata               Json?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  organizations          organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id                             String     @id @default(cuid())
  project_id                     String
  parent_task_id                 String?
  title                          String
  description                    String?
  status                         TaskStatus @default(TODO)
  priority                       Priority   @default(MEDIUM)
  assigned_to                    String?
  created_by                     String
  due_date                       DateTime?
  estimated_hours                Decimal?   @db.Decimal(5, 2)
  actual_hours                   Decimal?   @db.Decimal(5, 2)
  tags                           String[]
  position                       Int
  created_at                     DateTime   @default(now())
  updated_at                     DateTime   @updatedAt
  users_tasks_assigned_toTousers users?     @relation("tasks_assigned_toTousers", fields: [assigned_to], references: [id])
  users_tasks_created_byTousers  users      @relation("tasks_created_byTousers", fields: [created_by], references: [id])
  tasks                          tasks?     @relation("tasksTotasks", fields: [parent_task_id], references: [id])
  other_tasks                    tasks[]    @relation("tasksTotasks")
  projects                       projects   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([assigned_to])
  @@index([project_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_tracking {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String
  resource_type   ResourceType
  resource_name   String
  usage_amount    Int
  billing_period  DateTime
  metadata        Json?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id, billing_period])
}

model user_sessions {
  id         String    @id @default(cuid())
  source     String    @default("saas")
  session_id String    @unique
  user_id    String?
  start_time DateTime  @default(now())
  end_time   DateTime?
  duration   Int?
  page_views Int       @default(0)
  bounced    Boolean   @default(false)
  converted  Boolean   @default(false)
  user_agent String?
  ip_address String?
  country    String?
  city       String?
  device     String?
  browser    String?
  os         String?
  referrer   String?
  entry_page String?
  exit_page  String?

  @@index([source])
  @@index([start_time])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                             String                   @id @default(cuid())
  clerk_user_id                  String?                  @unique
  email                          String                   @unique
  name                           String?
  avatar_url                     String?
  role                           UserRole                 @default(USER)
  subscription_tier              SubscriptionTier         @default(STARTER)
  is_active                      Boolean                  @default(true)
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime                 @updatedAt
  activity_logs                  activity_logs[]
  ai_conversations               ai_conversations[]
  appointments                   appointments[]
  attachments                    attachments[]
  legacy_content                 legacy_content[]         @relation("LegacyContent")
  customers                      customers[]
  notifications                  notifications[]
  organization_members           organization_members[]
  projects                       projects[]
  tasks_tasks_assigned_toTousers tasks[]                  @relation("tasks_assigned_toTousers")
  tasks_tasks_created_byTousers  tasks[]                  @relation("tasks_created_byTousers")
  transaction_loops              transaction_loops[]
  uploaded_documents             documents[]
  created_document_versions      document_versions[]
  requested_signatures           signature_requests[]
  created_transaction_tasks      transaction_tasks[]
  created_workflows              workflows[]
  transaction_audit_logs         transaction_audit_logs[]
  assigned_leads                 leads[]                  @relation("LeadAssignedTo")
  assigned_contacts              contacts[]               @relation("ContactAssignedTo")
  assigned_deals                 deals[]                  @relation("DealAssignedTo")
  assigned_listings              listings[]               @relation("ListingAgent")
  created_activities             activities[]             @relation("ActivityCreatedBy")

  // ContentPilot CMS & Marketing relations
  authored_content   content_items[]      @relation("ContentAuthor")
  content_categories content_categories[]
  media_assets       media_assets[]
  media_folders      media_folders[]
  campaigns          campaigns[]
  email_campaigns    email_campaigns[]
  social_posts       social_media_posts[]
  content_revisions  content_revisions[]
  content_comments   content_comments[]

  // Admin & System relations
  admin_actions         admin_action_logs[]   @relation("AdminActions")
  onboarding_sessions   onboarding_sessions[] @relation("OnboardingSessions")
  created_feature_flags feature_flags[]       @relation("CreatedFeatureFlags")
  created_system_alerts system_alerts[]       @relation("CreatedSystemAlerts")

  // Expense Management relations
  created_expenses        expenses[]        @relation("ExpenseCreator")
  reviewed_expenses       expenses[]        @relation("ExpenseReviewer")
  created_tax_estimates   tax_estimates[]   @relation("TaxEstimateCreator")
  created_expense_reports expense_reports[] @relation("ExpenseReportCreator")

  // Main Dashboard relations
  dashboard_widgets dashboard_widgets[] @relation("DashboardWidgetCreator")
  user_dashboard    user_dashboards?
  activity_feeds    activity_feeds[]    @relation("ActivityFeedUser")
  quick_actions     quick_actions[]     @relation("QuickActionCreator")
  dashboard_metrics dashboard_metrics[] @relation("DashboardMetricCreator")

  // REID (Real Estate Intelligence Dashboard) relations
  reid_insights_created neighborhood_insights[] @relation("InsightCreator")
  reid_alerts_created   property_alerts[]       @relation("AlertCreator")
  reid_reports_created  market_reports[]        @relation("ReportCreator")
  reid_preferences      user_preferences?

  // Tool Marketplace relations
  tool_purchases   tool_purchases[]   @relation("ToolPurchases")
  bundle_purchases bundle_purchases[] @relation("BundlePurchases")
  tool_reviews     tool_reviews[]     @relation("ToolReviews")
  shopping_cart    shopping_carts?    @relation("ShoppingCart")

  // AI Garage & Shop relations
  agent_orders_created      custom_agent_orders[] @relation("OrderCreator")
  agent_orders_assigned     custom_agent_orders[] @relation("OrderAssignee")
  agent_templates_created   agent_templates[]     @relation("TemplateCreator")
  tool_blueprints_created   tool_blueprints[]     @relation("BlueprintCreator")
  template_reviews_created  template_reviews[]    @relation("TemplateReviewer")
  project_showcases_created project_showcases[]   @relation("ShowcaseCreator")

  // NeuroFlow Hub Relations
  neuroflow_workflows          neuroflow_workflows[]          @relation("NeuroFlowWorkflowCreator")
  neuroflow_ai_agents          neuroflow_ai_agents[]          @relation("NeuroFlowAIAgentCreator")
  neuroflow_agent_teams        neuroflow_agent_teams[]        @relation("NeuroFlowAgentTeamCreator")
  neuroflow_integrations       neuroflow_integrations[]       @relation("NeuroFlowIntegrationCreator")
  neuroflow_workflow_templates neuroflow_workflow_templates[] @relation("NeuroFlowWorkflowTemplateCreator")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_loops {
  id                String               @id @default(cuid())
  property_address  String
  transaction_type  TransactionType
  listing_price     Decimal              @db.Decimal(12, 2)
  status            LoopStatus           @default(DRAFT)
  expected_closing  DateTime?
  actual_closing    DateTime?
  progress          Int                  @default(0)
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  organization_id   String
  created_by        String
  organizations     organizations        @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator           users                @relation(fields: [created_by], references: [id])
  documents         documents[]
  parties           loop_parties[]
  transaction_tasks transaction_tasks[]
  signatures        signature_requests[]
  workflows         workflows[]

  @@index([organization_id])
  @@index([status])
  @@index([created_by])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id            String                @id @default(cuid())
  filename      String
  original_name String
  mime_type     String
  file_size     Int
  storage_key   String                @unique
  version       Int                   @default(1)
  status        DocumentStatus        @default(DRAFT)
  category      String?
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  loop_id       String
  uploaded_by   String
  loop          transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  uploader      users                 @relation(fields: [uploaded_by], references: [id])
  signatures    document_signatures[]
  versions      document_versions[]

  @@index([loop_id])
  @@index([status])
  @@index([category])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_versions {
  id             String    @id @default(cuid())
  version_number Int
  storage_key    String
  file_size      Int
  created_at     DateTime  @default(now())
  created_by     String
  document_id    String
  creator        users     @relation(fields: [created_by], references: [id])
  document       documents @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([document_id, version_number])
  @@index([document_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model signature_requests {
  id            String                @id @default(cuid())
  title         String
  message       String?               @db.Text
  status        SignatureStatus       @default(PENDING)
  signing_order SigningOrder          @default(PARALLEL)
  expires_at    DateTime?
  completed_at  DateTime?
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  loop_id       String
  requested_by  String
  loop          transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  requester     users                 @relation(fields: [requested_by], references: [id])
  signatures    document_signatures[]

  @@index([loop_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_signatures {
  id             String             @id @default(cuid())
  status         SignatureStatus    @default(PENDING)
  signed_at      DateTime?
  signature_data String?            @db.Text
  ip_address     String?
  user_agent     String?
  auth_method    String?
  decline_reason String?            @db.Text
  document_id    String
  signer_id      String
  request_id     String
  document       documents          @relation(fields: [document_id], references: [id], onDelete: Cascade)
  signer         loop_parties       @relation(fields: [signer_id], references: [id])
  request        signature_requests @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([signer_id])
  @@index([request_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model loop_parties {
  id             String                @id @default(cuid())
  name           String
  email          String
  phone          String?
  role           PartyRole
  permissions    Json
  status         PartyStatus           @default(ACTIVE)
  invited_at     DateTime              @default(now())
  joined_at      DateTime?
  loop_id        String
  loop           transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  signatures     document_signatures[]
  assigned_tasks transaction_tasks[]

  @@index([loop_id])
  @@index([email])
  @@index([role])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_tasks {
  id           String            @id @default(cuid())
  title        String
  description  String?           @db.Text
  status       TaskStatus        @default(TODO)
  priority     TaskPriority      @default(MEDIUM)
  due_date     DateTime?
  completed_at DateTime?
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  loop_id      String
  assigned_to  String?
  created_by   String
  loop         transaction_loops @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  assignee     loop_parties?     @relation(fields: [assigned_to], references: [id], onDelete: SetNull)
  creator      users             @relation(fields: [created_by], references: [id])

  @@index([loop_id])
  @@index([status])
  @@index([assigned_to])
  @@index([due_date])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workflows {
  id              String             @id @default(cuid())
  name            String
  description     String?            @db.Text
  is_template     Boolean            @default(false)
  steps           Json
  status          WorkflowStatus     @default(ACTIVE)
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  loop_id         String?
  created_by      String
  organization_id String?
  loop            transaction_loops? @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  creator         users              @relation(fields: [created_by], references: [id])
  organization    organizations?     @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([loop_id])
  @@index([is_template])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_audit_logs {
  id              String        @id @default(cuid())
  action          String
  entity_type     String
  entity_id       String
  old_values      Json?
  new_values      Json?
  ip_address      String?
  user_agent      String?
  timestamp       DateTime      @default(now())
  user_id         String
  organization_id String
  user            users         @relation(fields: [user_id], references: [id])
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([entity_type, entity_id])
  @@index([user_id])
  @@index([organization_id])
  @@index([timestamp])
}

model web_vitals_metrics {
  id              String   @id @default(cuid())
  source          String   @default("saas")
  session_id      String
  user_id         String?
  url             String
  path            String
  metric_name     String
  metric_value    Float
  metric_rating   String
  metric_id       String
  user_agent      String?
  device          String?
  browser         String?
  connection_type String?
  timestamp       DateTime @default(now())

  @@index([metric_name])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin_action_logs {
  id          String      @id @default(cuid())
  action      AdminAction
  description String

  // Target Details
  target_type String // 'user', 'organization', 'subscription'
  target_id   String // ID of the affected entity

  // Action Context
  metadata   Json?   @db.JsonB // Additional action context
  ip_address String?
  user_agent String?

  // Result
  success Boolean @default(true)
  error   String? @db.Text // Error message if failed

  created_at DateTime @default(now())

  // Relations
  admin_id String
  admin    users  @relation("AdminActions", fields: [admin_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([action])
  @@index([target_type, target_id])
  @@index([created_at])
  @@map("admin_action_logs")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model onboarding_sessions {
  id            String @id @default(cuid())
  session_token String @unique

  // Onboarding Data
  current_step Int @default(1)
  total_steps  Int @default(4)

  // Organization Data
  org_name        String?
  org_website     String?
  org_description String? @db.Text

  // Plan Selection
  selected_tier SubscriptionTier?
  billing_cycle BillingCycle? // MONTHLY, YEARLY

  // Payment Intent
  stripe_payment_intent_id String?
  payment_status           PaymentStatus @default(PENDING)

  // Session Management
  is_completed Boolean   @default(false)
  completed_at DateTime?
  expires_at   DateTime // Session timeout (24 hours)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user_id         String? // User who started onboarding
  user            users?         @relation("OnboardingSessions", fields: [user_id], references: [id], onDelete: SetNull)
  organization_id String? // Created organization
  organization    organizations? @relation("OnboardingSessions", fields: [organization_id], references: [id], onDelete: SetNull)

  @@index([session_token])
  @@index([user_id])
  @@index([payment_status])
  @@index([expires_at])
  @@map("onboarding_sessions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platform_metrics {
  id   String   @id @default(cuid())
  date DateTime @unique @default(now())

  // User Metrics
  total_users  Int @default(0)
  active_users Int @default(0) // Active in last 30 days
  new_users    Int @default(0) // New signups today

  // Organization Metrics
  total_orgs  Int @default(0)
  active_orgs Int @default(0) // Active in last 30 days
  new_orgs    Int @default(0) // New orgs today

  // Subscription Metrics
  mrr_cents  BigInt @default(0) // Monthly Recurring Revenue in cents
  arr_cents  BigInt @default(0) // Annual Recurring Revenue in cents
  churn_rate Float  @default(0) // Monthly churn rate

  // Tier Distribution
  free_count       Int @default(0)
  starter_count    Int @default(0)
  growth_count     Int @default(0)
  elite_count      Int @default(0)
  enterprise_count Int @default(0)

  // System Metrics
  total_storage BigInt @default(0) // Storage used in bytes
  api_calls     Int    @default(0) // API calls today

  created_at DateTime @default(now())

  @@index([date])
  @@map("platform_metrics")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model feature_flags {
  id          String  @id @default(cuid())
  name        String  @unique
  description String? @db.Text

  // Flag Configuration
  is_enabled      Boolean @default(false)
  rollout_percent Float   @default(0) // 0-100 percentage rollout

  // Targeting
  target_tiers SubscriptionTier[] @default([])
  target_orgs  String[]           @default([]) // Specific organization IDs
  target_users String[]           @default([]) // Specific user IDs

  // Conditions
  conditions Json? @db.JsonB // Complex targeting conditions

  // Metadata
  environment Environment @default(PRODUCTION)
  category    String? // Feature category

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  created_by String
  creator    users  @relation("CreatedFeatureFlags", fields: [created_by], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([is_enabled])
  @@index([environment])
  @@map("feature_flags")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model system_alerts {
  id      String @id @default(cuid())
  title   String
  message String @db.Text

  // Alert Configuration
  level    AlertLevel    @default(INFO)
  category AlertCategory

  // Targeting
  is_global    Boolean            @default(false) // Show to all users
  target_roles UserRole[]         @default([]) // Target specific roles
  target_tiers SubscriptionTier[] @default([]) // Target specific tiers
  target_orgs  String[]           @default([]) // Specific organizations

  // Display Settings
  is_dismissible  Boolean @default(true)
  auto_hide_after Int? // Auto-hide after X seconds

  // Scheduling
  starts_at DateTime  @default(now())
  ends_at   DateTime?

  // Tracking
  view_count    Int @default(0)
  dismiss_count Int @default(0)

  // Status
  is_active   Boolean @default(true)
  is_archived Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  created_by String
  creator    users  @relation("CreatedSystemAlerts", fields: [created_by], references: [id], onDelete: Cascade)

  @@index([is_active])
  @@index([category])
  @@index([starts_at, ends_at])
  @@map("system_alerts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expenses {
  id       String          @id @default(cuid())
  date     DateTime
  merchant String
  category ExpenseCategory
  amount   Decimal         @db.Decimal(12, 2) // Amount in dollars

  // Optional fields
  listing_id String?
  listing    listings? @relation(fields: [listing_id], references: [id], onDelete: SetNull)
  notes      String?   @db.Text

  // Tax information
  is_deductible Boolean @default(true)
  tax_category  String?

  // Receipt management
  receipt_url  String?
  receipt_name String?
  receipt_type String? // image/pdf

  // Processing status
  status         ExpenseStatus @default(PENDING)
  reviewed_at    DateTime?
  reviewed_by_id String?
  reviewer       users?        @relation("ExpenseReviewer", fields: [reviewed_by_id], references: [id], onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String
  creator       users     @relation("ExpenseCreator", fields: [created_by_id], references: [id], onDelete: Cascade)
  receipt       receipts?

  @@index([organization_id])
  @@index([created_by_id])
  @@index([category])
  @@index([status])
  @@index([date])
  @@index([is_deductible])
  @@index([organization_id, category])
  @@index([organization_id, date])
  @@map("expenses")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expense_categories {
  id            String  @id @default(cuid())
  name          String
  description   String?
  is_deductible Boolean @default(true)
  tax_code      String?

  // Category configuration
  is_active  Boolean @default(true)
  sort_order Int     @default(0)

  // System vs custom categories
  is_system Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation (nullable for system categories)
  organization_id String?
  organization    organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([name, organization_id])
  @@index([organization_id])
  @@index([is_active])
  @@map("expense_categories")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tax_estimates {
  id      String @id @default(cuid())
  year    Int
  quarter Int? // 1-4 for quarterly estimates

  // Income information
  total_income    Decimal @db.Decimal(12, 2)
  business_income Decimal @db.Decimal(12, 2)
  other_income    Decimal @db.Decimal(12, 2)

  // Deduction information
  total_deductions    Decimal @db.Decimal(12, 2)
  business_deductions Decimal @db.Decimal(12, 2)
  standard_deduction  Decimal @db.Decimal(12, 2)

  // Tax calculations
  taxable_income Decimal @db.Decimal(12, 2)
  estimated_tax  Decimal @db.Decimal(12, 2)
  tax_rate       Float // Effective tax rate

  // Payment tracking
  paid_amount Decimal   @default(0) @db.Decimal(12, 2)
  due_date    DateTime?
  is_paid     Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String
  creator       users  @relation("TaxEstimateCreator", fields: [created_by_id], references: [id], onDelete: Cascade)

  @@unique([year, quarter, organization_id])
  @@index([organization_id])
  @@index([year])
  @@index([created_by_id])
  @@index([organization_id, year])
  @@map("tax_estimates")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model expense_reports {
  id          String     @id @default(cuid())
  name        String
  report_type ReportType

  // Date range
  start_date DateTime
  end_date   DateTime

  // Filters
  categories String[] @default([]) // Category IDs to include
  listings   String[] @default([]) // Listing IDs to include
  merchants  String[] @default([]) // Specific merchants

  // Report data (cached)
  report_data      Json    @db.JsonB
  total_expenses   Decimal @db.Decimal(12, 2)
  total_deductible Decimal @db.Decimal(12, 2)

  // File generation
  pdf_url String? // Generated PDF URL
  csv_url String? // Generated CSV URL

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String
  creator       users  @relation("ExpenseReportCreator", fields: [created_by_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([report_type])
  @@index([organization_id, report_type])
  @@map("expense_reports")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model receipts {
  id         String   @id @default(cuid())
  expense_id String   @unique
  expense    expenses @relation(fields: [expense_id], references: [id], onDelete: Cascade)

  // File information
  original_name String
  file_name     String // Stored filename
  file_url      String // Supabase Storage URL
  file_size     Int
  mime_type     String

  // OCR/Processing results
  extracted_data Json?     @db.JsonB // OCR extracted text and data
  processed_at   DateTime?

  uploaded_at DateTime @default(now())

  @@index([expense_id])
  @@map("receipts")
}

// Main Dashboard Module Models
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dashboard_widgets {
  id   String     @id @default(cuid())
  name String
  type WidgetType

  // Widget Configuration
  config       Json // Widget-specific settings
  position     Json // Grid position and size
  data_source  String? // Data source identifier
  refresh_rate Int     @default(300) // Refresh interval in seconds

  // Display Settings
  is_visible Boolean @default(true)
  title      String? // Custom title override
  chart_type String? // For data visualization widgets

  // Access Control
  permissions String[] // Required permissions to view

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String
  creator    users  @relation("DashboardWidgetCreator", fields: [created_by], references: [id])

  @@index([organization_id])
  @@index([created_by])
  @@index([type])
  @@index([is_visible])
  @@map("dashboard_widgets")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_dashboards {
  id      String @id @default(cuid())
  user_id String @unique
  user    users  @relation(fields: [user_id], references: [id])

  // Layout Configuration
  layout  Json // Dashboard layout configuration
  widgets String[] // Widget IDs in display order

  // Preferences
  theme        DashboardTheme @default(LIGHT)
  density      LayoutDensity  @default(NORMAL)
  auto_refresh Boolean        @default(true)

  // Customization
  quick_actions  String[] // Quick action button IDs
  pinned_modules String[] // Pinned module shortcuts

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_dashboards")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_feeds {
  id          String                @id @default(cuid())
  title       String
  description String?
  type        DashboardActivityType

  // Activity Details
  entity_type String // e.g., 'workflow', 'expense', 'project'
  entity_id   String // ID of the related entity
  action      String // e.g., 'created', 'updated', 'completed'

  // Activity Data
  metadata Json? // Additional activity context
  severity DashboardActivitySeverity @default(INFO)

  // Display Options
  is_read     Boolean @default(false)
  is_pinned   Boolean @default(false)
  is_archived Boolean @default(false)

  created_at DateTime @default(now())

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  user_id String? // User who triggered the activity
  user    users?  @relation("ActivityFeedUser", fields: [user_id], references: [id])

  @@index([organization_id])
  @@index([user_id])
  @@index([type])
  @@index([severity])
  @@index([created_at])
  @@index([is_archived])
  @@map("activity_feeds")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model quick_actions {
  id          String  @id @default(cuid())
  name        String
  description String?
  icon        String // Icon identifier

  // Action Configuration
  action_type  ActionType
  target_url   String? // For navigation actions
  api_endpoint String? // For API actions
  form_config  Json? // For form actions

  // Display Settings
  color      String  @default("blue")
  is_enabled Boolean @default(true)
  sort_order Int     @default(0)

  // Access Control
  required_role String[] // Required roles to see action
  required_tier String[] // Required subscription tiers

  // Usage Tracking
  usage_count Int       @default(0)
  last_used   DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation (nullable for system actions)
  organization_id String?
  organization    organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String?
  creator    users?  @relation("QuickActionCreator", fields: [created_by], references: [id])

  @@index([organization_id])
  @@index([is_enabled])
  @@index([sort_order])
  @@map("quick_actions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dashboard_metrics {
  id       String         @id @default(cuid())
  name     String
  category MetricCategory

  // Metric Configuration
  query  Json // Database query or calculation logic
  unit   String? // Unit of measurement (%, $, count, etc.)
  format String  @default("number") // number, currency, percentage

  // Thresholds & Alerts
  target_value       Float? // Target/goal value
  warning_threshold  Float? // Warning threshold
  critical_threshold Float? // Critical threshold

  // Display Settings
  chart_type String? // line, bar, pie, gauge
  color      String  @default("blue")
  icon       String?

  // Access Control
  permissions String[] // Required permissions

  // Refresh Settings
  refresh_rate    Int       @default(300) // Seconds
  last_calculated DateTime?
  cached_value    Float? // Cached metric value

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation (nullable for system metrics)
  organization_id String?
  organization    organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by String?
  creator    users?  @relation("DashboardMetricCreator", fields: [created_by], references: [id])

  @@index([organization_id])
  @@index([category])
  @@index([last_calculated])
  @@map("dashboard_metrics")
}

enum AIContextType {
  GENERAL
  PROJECT
  CUSTOMER
  TASK
}

enum AIModel {
  OPENAI_GPT4
  CLAUDE_SONNET
  GEMINI
  GROK
  KIMIK2
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  MEETING
  CALL
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
  OTHER
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum ContentType {
  PAGE
  BLOG_POST
  DOCUMENTATION
  TEMPLATE
  ARTICLE
  LANDING_PAGE
  EMAIL_TEMPLATE
  SOCIAL_POST
  PRESS_RELEASE
  NEWSLETTER
  CASE_STUDY
  WHITEPAPER
}

enum CustomerSource {
  WEBSITE
  REFERRAL
  SOCIAL
  EMAIL
  OTHER
}

enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  CHURNED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ResourceType {
  AI_TOKENS
  API_CALLS
  STORAGE
  SEATS
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
}

enum SubscriptionTier {
  FREE
  CUSTOM
  STARTER
  GROWTH
  ELITE
  ENTERPRISE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum ToolType {
  CHATBOT
  ANALYSIS
  AUTOMATION
  INTEGRATION
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}

enum Industry {
  REAL_ESTATE
  HEALTHCARE
  STRIVE
  GENERAL
}

// CRM Enums
enum LeadSource {
  WEBSITE
  REFERRAL
  GOOGLE_ADS
  SOCIAL_MEDIA
  COLD_CALL
  EMAIL_CAMPAIGN
  EVENT
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW_LEAD
  IN_CONTACT
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
}

enum LeadScore {
  HOT
  WARM
  COLD
}

enum ContactType {
  PROSPECT
  CLIENT
  PAST_CLIENT
  PARTNER
  VENDOR
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  DO_NOT_CONTACT
}

enum DealStage {
  LEAD
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSING
  CLOSED_WON
  CLOSED_LOST
}

enum DealStatus {
  ACTIVE
  WON
  LOST
  ABANDONED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
  MULTI_FAMILY
  CONDO
  TOWNHOUSE
  LUXURY
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  EXPIRED
  WITHDRAWN
  CONTINGENT
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
}

enum TransactionType {
  PURCHASE_AGREEMENT
  LISTING_AGREEMENT
  LEASE_AGREEMENT
  COMMERCIAL_PURCHASE
  COMMERCIAL_LEASE
}

enum LoopStatus {
  DRAFT
  ACTIVE
  UNDER_CONTRACT
  CLOSING
  CLOSED
  CANCELLED
  ARCHIVED
}

enum DocumentStatus {
  DRAFT
  PENDING
  REVIEWED
  SIGNED
  ARCHIVED
}

enum SignatureStatus {
  PENDING
  SENT
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}

enum SigningOrder {
  SEQUENTIAL
  PARALLEL
}

enum PartyRole {
  BUYER
  SELLER
  BUYER_AGENT
  LISTING_AGENT
  LENDER
  TITLE_COMPANY
  INSPECTOR
  APPRAISER
  ATTORNEY
  ESCROW_OFFICER
  OTHER
}

enum PartyStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkflowStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

// Expense Management Enums
enum ExpenseCategory {
  COMMISSION
  TRAVEL
  MARKETING
  OFFICE
  UTILITIES
  LEGAL
  INSURANCE
  REPAIRS
  MEALS
  EDUCATION
  SOFTWARE
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVIEW
}

enum ReportType {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
  TAX_SUMMARY
}

// Admin & Onboarding Enums
enum AdminAction {
  USER_CREATE
  USER_UPDATE
  USER_SUSPEND
  USER_DELETE
  USER_IMPERSONATE
  ORG_CREATE
  ORG_UPDATE
  ORG_SUSPEND
  ORG_DELETE
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_UPDATE
  SUBSCRIPTION_CANCEL
  FEATURE_FLAG_UPDATE
  SYSTEM_CONFIG_UPDATE
  DATA_EXPORT
  BULK_ACTION
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REQUIRES_ACTION
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum AlertLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum AlertCategory {
  SYSTEM
  MAINTENANCE
  FEATURE
  SECURITY
  BILLING
  MARKETING
}

// ContentPilot CMS & Marketing Enums
enum CampaignType {
  CONTENT_MARKETING
  EMAIL_MARKETING
  SOCIAL_MEDIA
  PAID_ADVERTISING
  SEO_CAMPAIGN
  LEAD_GENERATION
  BRAND_AWARENESS
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EmailStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum SocialPlatform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  PINTEREST
}

// Tool Marketplace Enums
enum ToolCategory {
  FOUNDATION
  GROWTH
  ELITE
  CUSTOM
  ADVANCED
  INTEGRATION
}

enum ToolTier {
  T1 // $100 tools
  T2 // $200 tools
  T3 // $300 tools
}

enum BundleType {
  STARTER_PACK
  GROWTH_PACK
  ELITE_PACK
  CUSTOM_PACK
}

enum PurchaseStatus {
  ACTIVE
  CANCELLED
  REFUNDED
  EXPIRED
}

// REID (Real Estate Intelligence Dashboard) Enums
enum AreaType {
  ZIP
  SCHOOL_DISTRICT
  NEIGHBORHOOD
  COUNTY
  MSA
}

enum AlertType {
  PRICE_DROP
  PRICE_INCREASE
  NEW_LISTING
  SOLD
  INVENTORY_CHANGE
  MARKET_TREND
  DEMOGRAPHIC_CHANGE
}

enum AlertFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReidReportType {
  NEIGHBORHOOD_ANALYSIS
  MARKET_OVERVIEW
  COMPARATIVE_STUDY
  INVESTMENT_ANALYSIS
  DEMOGRAPHIC_REPORT
  CUSTOM
}

// Main Dashboard Module Enums
enum WidgetType {
  KPI_CARD
  CHART
  TABLE
  ACTIVITY_FEED
  QUICK_ACTIONS
  MODULE_SHORTCUTS
  PROGRESS_TRACKER
  NOTIFICATION_PANEL
  CALENDAR
  WEATHER
}

enum DashboardTheme {
  LIGHT
  DARK
  AUTO
}

enum LayoutDensity {
  COMPACT
  NORMAL
  SPACIOUS
}

enum DashboardActivityType {
  USER_ACTION
  SYSTEM_EVENT
  WORKFLOW_UPDATE
  DATA_CHANGE
  SECURITY_EVENT
  INTEGRATION_EVENT
}

enum DashboardActivitySeverity {
  INFO
  SUCCESS
  WARNING
  ERROR
  CRITICAL
}

enum ActionType {
  NAVIGATION
  API_CALL
  MODAL_FORM
  EXTERNAL_LINK
  WORKFLOW_TRIGGER
}

enum MetricCategory {
  FINANCIAL
  OPERATIONAL
  MARKETING
  SALES
  PRODUCTIVITY
  SYSTEM
  CUSTOM
}

// AI Garage & Shop Enums
enum ComplexityLevel {
  SIMPLE // 1-8 hours
  MODERATE // 8-24 hours
  COMPLEX // 24-72 hours
  ENTERPRISE // 72+ hours
}

enum OrderStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  IN_PROGRESS
  TESTING
  COMPLETED
  DELIVERED
  CANCELLED
  REJECTED
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum AgentCategory {
  SALES
  SUPPORT
  ANALYSIS
  CONTENT
  AUTOMATION
  RESEARCH
}

enum AIToolCategory {
  AUTOMATION
  ANALYTICS
  INTEGRATION
  UI
  API
  WORKFLOW
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum ShowcaseCategory {
  AI_AGENT
  AUTOMATION_TOOL
  INTEGRATION
  WORKFLOW
  CUSTOM_SOLUTION
}

// ============================================================================
// NeuroFlow Hub (AI-HUB) Enums
// ============================================================================

enum AgentStatus {
  IDLE
  BUSY
  OFFLINE
  ERROR
}

enum TeamStructure {
  HIERARCHICAL // Leader delegates to workers
  COLLABORATIVE // All agents contribute equally
  PIPELINE // Sequential processing
  DEMOCRATIC // Voting/consensus-based
}

enum TeamRole {
  LEADER
  WORKER
  COORDINATOR
  SPECIALIST
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  TESTING
}

enum TemplateCategory {
  SALES
  SUPPORT
  MARKETING
  DATA_PROCESSING
  AUTOMATION
  ANALYTICS
  CONTENT
  COMMUNICATION
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// ============================================================================
// REID (Real Estate Intelligence Dashboard) Models
// ============================================================================

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neighborhood_insights {
  id        String   @id @default(cuid())
  area_code String // Zip code or district identifier
  area_name String // Neighborhood name
  area_type AreaType @default(ZIP)

  // Market Metrics
  market_data    Json // Market analysis data
  median_price   Decimal? @db.Decimal(12, 2)
  days_on_market Int?
  inventory      Int?
  price_change   Float? // Percentage change

  // Demographics
  demographics  Json // Demographic analysis
  median_age    Float?
  median_income Decimal? @db.Decimal(12, 2)
  households    Int?
  commute_time  Float? // Average in minutes

  // Amenities & Quality of Life
  amenities      Json // Amenities data
  school_rating  Float? // 1-10 scale
  walk_score     Int? // 0-100
  bike_score     Int? // 0-100
  crime_index    Float? // Safety metric
  park_proximity Float? // Distance in miles

  // Location Data
  latitude  Float?
  longitude Float?
  boundary  Json? // GeoJSON polygon

  // Investment Analysis
  roi_analysis      Json? // ROI calculation data
  rent_yield        Float?
  appreciation_rate Float?
  investment_grade  String? // A, B, C, D rating

  // AI-Generated Insights
  ai_profile  String?  @db.Text
  ai_insights String[] @default([])

  // Data Quality & Freshness
  data_source  String[] @default([])
  last_updated DateTime @default(now())
  data_quality Float? // 0-1 confidence score

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String?
  creator       users?            @relation("InsightCreator", fields: [created_by_id], references: [id], onDelete: SetNull)
  alerts        property_alerts[]

  @@unique([area_code, organization_id])
  @@index([organization_id])
  @@index([area_type])
  @@index([created_at])
  @@map("neighborhood_insights")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model property_alerts {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  // Alert Configuration
  alert_type AlertType
  criteria   Json // Alert criteria and thresholds
  is_active  Boolean   @default(true)

  // Geographical Scope
  area_codes String[] @default([])
  radius     Float? // Radius in miles
  latitude   Float?
  longitude  Float?

  // Notification Settings
  email_enabled Boolean        @default(true)
  sms_enabled   Boolean        @default(false)
  frequency     AlertFrequency @default(DAILY)

  // Alert History
  last_triggered DateTime?
  trigger_count  Int       @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String
  creator       users                   @relation("AlertCreator", fields: [created_by_id], references: [id], onDelete: Cascade)
  insights      neighborhood_insights[]
  triggers      alert_triggers[]

  @@index([organization_id])
  @@index([created_by_id])
  @@index([alert_type])
  @@index([is_active])
  @@map("property_alerts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model alert_triggers {
  id       String          @id @default(cuid())
  alert_id String
  alert    property_alerts @relation(fields: [alert_id], references: [id], onDelete: Cascade)

  // Trigger Details
  triggered_by Json // Data that triggered the alert
  message      String        @db.Text
  severity     AlertSeverity @default(MEDIUM)

  // Notification Status
  email_sent         Boolean   @default(false)
  sms_sent           Boolean   @default(false)
  acknowledged       Boolean   @default(false)
  acknowledged_at    DateTime?
  acknowledged_by_id String?

  triggered_at DateTime @default(now())

  @@index([alert_id])
  @@index([severity])
  @@index([acknowledged])
  @@map("alert_triggers")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model market_reports {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  report_type ReidReportType

  // Report Configuration
  area_codes String[] @default([])
  date_range Json // Start and end dates
  filters    Json // Applied filters

  // Report Content
  summary  String? @db.Text
  insights Json // Key insights and findings
  charts   Json // Chart configurations
  tables   Json // Table data

  // File Generation
  pdf_url String?
  csv_url String?

  // Sharing & Access
  is_public   Boolean @default(false)
  share_token String? @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  created_by_id String
  creator       users  @relation("ReportCreator", fields: [created_by_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([report_type])
  @@index([created_at])
  @@map("market_reports")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_preferences {
  id      String @id @default(cuid())
  user_id String @unique
  user    users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Dashboard Preferences
  default_area_codes String[] @default([])
  dashboard_layout   Json // Module positions and sizes

  // Display Preferences
  theme      String @default("dark") // dark/light
  chart_type String @default("line")
  map_style  String @default("dark")

  // Notification Preferences
  email_digest     Boolean @default(true)
  sms_alerts       Boolean @default(false)
  digest_frequency String  @default("weekly")

  // Data Preferences
  price_format String @default("USD")
  area_unit    String @default("sqft")
  date_format  String @default("MM/DD/YYYY")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_preferences")
}

// ============================================================================
// TOOL MARKETPLACE MODELS
// ============================================================================

/// Marketplace Tools - Shared catalog (NO organizationId)
model marketplace_tools {
  id          String       @id @default(cuid())
  name        String
  description String       @db.Text
  category    ToolCategory
  tier        ToolTier
  price       Int // Price in cents
  is_active   Boolean      @default(true)

  // Features and capabilities
  features     String[] @default([])
  capabilities String[] @default([])
  integrations String[] @default([])

  // Usage tracking
  purchase_count Int      @default(0)
  rating         Decimal? @db.Decimal(3, 2) // 0.00 to 5.00

  // Metadata
  icon String? // Icon name or image URL
  tags String[] @default([])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  purchases tool_purchases[]
  reviews   tool_reviews[]
  bundles   bundle_tools[]

  @@index([category])
  @@index([tier])
  @@index([is_active])
  @@map("marketplace_tools")
}

/// Tool Purchases - Multi-tenant (WITH organizationId + RLS)
model tool_purchases {
  id      String            @id @default(cuid())
  tool_id String
  tool    marketplace_tools @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  // Purchase details
  price_at_purchase Int // Price when purchased (in cents)
  purchase_date     DateTime       @default(now())
  status            PurchaseStatus @default(ACTIVE)

  // Usage tracking
  last_used   DateTime?
  usage_count Int       @default(0)

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  purchased_by String
  purchaser    users  @relation("ToolPurchases", fields: [purchased_by], references: [id], onDelete: Cascade)

  @@unique([tool_id, organization_id])
  @@index([organization_id])
  @@index([purchased_by])
  @@index([status])
  @@map("tool_purchases")
}

/// Tool Bundles - Shared catalog (NO organizationId)
model tool_bundles {
  id             String     @id @default(cuid())
  name           String
  description    String     @db.Text
  bundle_type    BundleType
  original_price Int // Sum of individual tool prices
  bundle_price   Int // Discounted bundle price
  discount       Decimal    @db.Decimal(5, 2) // Discount percentage

  // Bundle metadata
  is_active  Boolean @default(true)
  is_popular Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  tools     bundle_tools[]
  purchases bundle_purchases[]

  @@index([bundle_type])
  @@index([is_active])
  @@map("tool_bundles")
}

/// Bundle Tools - Junction table for bundles and tools
model bundle_tools {
  id        String            @id @default(cuid())
  bundle_id String
  bundle    tool_bundles      @relation(fields: [bundle_id], references: [id], onDelete: Cascade)
  tool_id   String
  tool      marketplace_tools @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  @@unique([bundle_id, tool_id])
  @@map("bundle_tools")
}

/// Bundle Purchases - Multi-tenant (WITH organizationId + RLS)
model bundle_purchases {
  id        String       @id @default(cuid())
  bundle_id String
  bundle    tool_bundles @relation(fields: [bundle_id], references: [id], onDelete: Cascade)

  price_at_purchase Int // Bundle price when purchased
  purchase_date     DateTime       @default(now())
  status            PurchaseStatus @default(ACTIVE)

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  purchased_by String
  purchaser    users  @relation("BundlePurchases", fields: [purchased_by], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([purchased_by])
  @@index([status])
  @@map("bundle_purchases")
}

/// Tool Reviews - Multi-tenant (WITH organizationId + RLS)
model tool_reviews {
  id      String            @id @default(cuid())
  tool_id String
  tool    marketplace_tools @relation(fields: [tool_id], references: [id], onDelete: Cascade)

  rating Int // 1-5 stars
  review String? @db.Text

  created_at DateTime @default(now())

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  reviewer_id String
  reviewer    users  @relation("ToolReviews", fields: [reviewer_id], references: [id], onDelete: Cascade)

  @@unique([tool_id, reviewer_id])
  @@index([tool_id])
  @@index([organization_id])
  @@map("tool_reviews")
}

/// Shopping Carts - Multi-tenant (WITH organizationId + RLS)
model shopping_carts {
  id String @id @default(cuid())

  // Cart contents (stored as JSON for flexibility)
  tools       Json @default("[]") @db.JsonB // Array of tool IDs
  bundles     Json @default("[]") @db.JsonB // Array of bundle IDs
  total_price Int  @default(0) // Total price in cents

  // Cart metadata
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Multi-tenant isolation
  organization_id String
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // Relations
  user_id String @unique
  user    users  @relation("ShoppingCart", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@map("shopping_carts")
}

// ============================================================================
// AI GARAGE & SHOP MODELS
// ============================================================================

/// Custom Agent Orders - Multi-tenant (WITH organizationId + RLS)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model custom_agent_orders {
  id              String          @id @default(cuid())
  title           String          @db.VarChar(100)
  description     String          @db.Text
  requirements    Json            @db.JsonB
  use_case        String          @db.VarChar(200)
  complexity      ComplexityLevel
  estimated_hours Int?
  estimated_cost  Decimal?        @db.Decimal(12, 2)

  // Status tracking
  status       OrderStatus   @default(DRAFT)
  priority     OrderPriority @default(NORMAL)
  submitted_at DateTime?
  started_at   DateTime?
  completed_at DateTime?
  delivered_at DateTime?

  // Progress tracking
  progress      Int     @default(0) // 0-100
  current_stage String? @db.VarChar(50)

  // Configuration
  agent_config Json @db.JsonB
  tools_config Json @db.JsonB

  // Multi-tenancy
  organization_id String
  created_by_id   String
  assigned_to_id  String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  organizations organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users              @relation("OrderCreator", fields: [created_by_id], references: [id], onDelete: Cascade)
  assignee      users?             @relation("OrderAssignee", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  milestones    order_milestones[]
  build_logs    build_logs[]

  @@index([organization_id])
  @@index([created_by_id])
  @@index([assigned_to_id])
  @@index([status])
  @@index([complexity])
  @@index([created_at])
  @@map("custom_agent_orders")
}

/// Agent Templates - Multi-tenant with system templates (organizationId nullable)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model agent_templates {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(100)
  description String        @db.Text
  category    AgentCategory
  avatar      String?       @db.VarChar(500)

  // Configuration preset
  personality_config Json @db.JsonB
  model_config       Json @db.JsonB
  tools_config       Json @db.JsonB
  memory_config      Json @db.JsonB

  // Template metadata
  tags      String[] @default([])
  features  String[] @default([])
  use_cases String[] @default([])

  // Usage and ratings
  usage_count Int      @default(0)
  rating      Decimal? @db.Decimal(3, 2)
  is_popular  Boolean  @default(false)

  // Visibility
  is_public Boolean @default(false)
  is_system Boolean @default(false)

  // Multi-tenancy (nullable for system templates)
  organization_id String?
  created_by_id   String?

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  organizations organizations?     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users?             @relation("TemplateCreator", fields: [created_by_id], references: [id], onDelete: SetNull)
  reviews       template_reviews[]

  @@index([organization_id])
  @@index([created_by_id])
  @@index([category])
  @@index([is_public])
  @@index([is_system])
  @@map("agent_templates")
}

/// Tool Blueprints - Multi-tenant (WITH organizationId + RLS)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tool_blueprints {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(100)
  description String         @db.Text
  category    AIToolCategory

  // Visual programming components
  components    Json @db.JsonB
  connections   Json @db.JsonB
  configuration Json @db.JsonB

  // Blueprint metadata
  version    String          @default("1.0.0") @db.VarChar(20)
  tags       String[]        @default([])
  complexity ComplexityLevel

  // Usage tracking
  usage_count Int     @default(0)
  is_public   Boolean @default(false)

  // Multi-tenancy
  organization_id String
  created_by_id   String

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  organizations organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users         @relation("BlueprintCreator", fields: [created_by_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([category])
  @@index([is_public])
  @@map("tool_blueprints")
}

/// Order Milestones - Multi-tenant via order relationship
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model order_milestones {
  id       String @id @default(cuid())
  order_id String

  name         String    @db.VarChar(100)
  description  String?   @db.Text
  stage        String    @db.VarChar(50)
  due_date     DateTime?
  completed_at DateTime?
  is_completed Boolean   @default(false)

  sort_order Int      @default(0)
  created_at DateTime @default(now())

  // Relations
  order custom_agent_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([stage])
  @@map("order_milestones")
}

/// Build Logs - Multi-tenant via order relationship
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model build_logs {
  id       String @id @default(cuid())
  order_id String

  stage     String   @db.VarChar(50)
  message   String   @db.Text
  details   Json?    @db.JsonB
  log_level LogLevel @default(INFO)

  created_at DateTime @default(now())

  // Relations
  order custom_agent_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([log_level])
  @@index([created_at])
  @@map("build_logs")
}

/// Template Reviews - Multi-tenant (WITH organizationId + RLS)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model template_reviews {
  id          String @id @default(cuid())
  template_id String

  rating Int // 1-5 stars
  review String? @db.Text

  // Multi-tenancy
  organization_id String
  reviewer_id     String

  created_at DateTime @default(now())

  // Relations
  template      agent_templates @relation(fields: [template_id], references: [id], onDelete: Cascade)
  organizations organizations   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  reviewer      users           @relation("TemplateReviewer", fields: [reviewer_id], references: [id], onDelete: Cascade)

  @@unique([template_id, reviewer_id])
  @@index([template_id])
  @@index([organization_id])
  @@map("template_reviews")
}

/// Project Showcases - Multi-tenant with public showcases
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model project_showcases {
  id          String           @id @default(cuid())
  title       String           @db.VarChar(100)
  description String           @db.Text
  category    ShowcaseCategory

  // Project details
  image_url    String?  @db.VarChar(500)
  demo_url     String?  @db.VarChar(500)
  features     String[] @default([])
  technologies String[] @default([])

  // Metrics
  views       Int     @default(0)
  likes       Int     @default(0)
  is_public   Boolean @default(false)
  is_featured Boolean @default(false)

  // Multi-tenancy
  organization_id String
  created_by_id   String

  // Timestamps
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  organizations organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users         @relation("ShowcaseCreator", fields: [created_by_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([category])
  @@index([is_public])
  @@index([is_featured])
  @@map("project_showcases")
}

// ============================================================================
// NeuroFlow Hub (AI-HUB) Models
// ============================================================================

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_workflows {
  id              String    @id @default(cuid())
  name            String    @db.VarChar(100)
  description     String?   @db.Text
  nodes           Json      @db.JsonB
  edges           Json      @db.JsonB
  variables       Json?     @db.JsonB
  is_active       Boolean   @default(true)
  version         String    @default("1.0.0") @db.VarChar(20)
  tags            String[]  @default([])
  execution_count Int       @default(0)
  last_executed   DateTime?
  template_id     String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  organization_id String
  created_by      String

  template      neuroflow_workflow_templates?   @relation(fields: [template_id], references: [id], onDelete: SetNull)
  organizations organizations                   @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users                           @relation("NeuroFlowWorkflowCreator", fields: [created_by], references: [id], onDelete: Cascade)
  executions    neuroflow_workflow_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([is_active])
  @@index([template_id])
  @@index([created_at])
  @@map("neuroflow_workflows")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_ai_agents {
  id                String      @id @default(cuid())
  name              String      @db.VarChar(100)
  description       String?     @db.Text
  avatar            String?     @db.VarChar(500)
  personality       Json        @db.JsonB
  model_config      Json        @db.JsonB
  capabilities      String[]    @default([])
  memory            Json        @db.JsonB
  execution_count   Int         @default(0)
  success_rate      Float?
  avg_response_time Float?
  is_active         Boolean     @default(true)
  status            AgentStatus @default(IDLE)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  organization_id   String
  created_by        String

  organizations organizations                @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users                        @relation("NeuroFlowAIAgentCreator", fields: [created_by], references: [id], onDelete: Cascade)
  team_members  neuroflow_team_members[]
  executions    neuroflow_agent_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([status])
  @@index([is_active])
  @@map("neuroflow_ai_agents")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_agent_teams {
  id              String        @id @default(cuid())
  name            String        @db.VarChar(100)
  description     String?       @db.Text
  structure       TeamStructure
  coordination    Json          @db.JsonB
  execution_count Int           @default(0)
  success_rate    Float?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organization_id String
  created_by      String

  organizations organizations               @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users                       @relation("NeuroFlowAgentTeamCreator", fields: [created_by], references: [id], onDelete: Cascade)
  members       neuroflow_team_members[]
  executions    neuroflow_team_executions[]

  @@index([organization_id])
  @@index([created_by])
  @@index([structure])
  @@map("neuroflow_agent_teams")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_team_members {
  id        String   @id @default(cuid())
  team_id   String
  agent_id  String
  role      TeamRole
  priority  Int      @default(0)
  joined_at DateTime @default(now())

  team  neuroflow_agent_teams @relation(fields: [team_id], references: [id], onDelete: Cascade)
  agent neuroflow_ai_agents   @relation(fields: [agent_id], references: [id], onDelete: Cascade)

  @@unique([team_id, agent_id])
  @@index([team_id])
  @@index([agent_id])
  @@map("neuroflow_team_members")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_workflow_executions {
  id             String          @id @default(cuid())
  workflow_id    String
  status         ExecutionStatus @default(PENDING)
  started_at     DateTime        @default(now())
  completed_at   DateTime?
  duration       Int?
  input          Json?           @db.JsonB
  output         Json?           @db.JsonB
  error          String?         @db.Text
  logs           Json[]          @default([])
  nodes_executed Int             @default(0)
  tokens_used    Int             @default(0)
  cost           Decimal         @default(0) @db.Decimal(12, 2)

  workflow         neuroflow_workflows          @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  agent_executions neuroflow_agent_executions[]

  @@index([workflow_id])
  @@index([status])
  @@index([started_at])
  @@map("neuroflow_workflow_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_agent_executions {
  id                    String          @id @default(cuid())
  agent_id              String
  workflow_execution_id String?
  task                  String          @db.Text
  input                 Json            @db.JsonB
  output                Json?           @db.JsonB
  status                ExecutionStatus @default(PENDING)
  started_at            DateTime        @default(now())
  completed_at          DateTime?
  duration              Int?
  tokens_used           Int             @default(0)
  cost                  Decimal         @default(0) @db.Decimal(12, 2)
  model                 String?         @db.VarChar(100)
  provider              String?         @db.VarChar(50)

  agent              neuroflow_ai_agents            @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  workflow_execution neuroflow_workflow_executions? @relation(fields: [workflow_execution_id], references: [id], onDelete: SetNull)

  @@index([agent_id])
  @@index([workflow_execution_id])
  @@index([status])
  @@index([started_at])
  @@map("neuroflow_agent_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_team_executions {
  id            String          @id @default(cuid())
  team_id       String
  task          String          @db.Text
  pattern       TeamStructure
  input         Json            @db.JsonB
  output        Json?           @db.JsonB
  status        ExecutionStatus @default(PENDING)
  started_at    DateTime        @default(now())
  completed_at  DateTime?
  duration      Int?
  agent_results Json[]          @default([])

  team neuroflow_agent_teams @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@index([team_id])
  @@index([status])
  @@index([started_at])
  @@map("neuroflow_team_executions")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_integrations {
  id              String            @id @default(cuid())
  name            String            @db.VarChar(100)
  provider        String            @db.VarChar(50)
  credentials     Json              @db.JsonB
  config          Json              @db.JsonB
  is_active       Boolean           @default(true)
  last_tested     DateTime?
  status          IntegrationStatus @default(DISCONNECTED)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  organization_id String
  created_by      String

  organizations organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users         @relation("NeuroFlowIntegrationCreator", fields: [created_by], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([created_by])
  @@index([provider])
  @@index([status])
  @@map("neuroflow_integrations")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model neuroflow_workflow_templates {
  id              String           @id @default(cuid())
  name            String           @db.VarChar(100)
  description     String           @db.Text
  category        TemplateCategory
  nodes           Json             @db.JsonB
  edges           Json             @db.JsonB
  variables       Json?            @db.JsonB
  icon            String?          @db.VarChar(100)
  tags            String[]         @default([])
  difficulty      DifficultyLevel  @default(BEGINNER)
  estimated_time  Int?
  usage_count     Int              @default(0)
  rating          Float?
  is_public       Boolean          @default(false)
  is_featured     Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  organization_id String?
  created_by      String?

  organization organizations?        @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator      users?                @relation("NeuroFlowWorkflowTemplateCreator", fields: [created_by], references: [id], onDelete: SetNull)
  workflows    neuroflow_workflows[]

  @@index([organization_id])
  @@index([created_by])
  @@index([category])
  @@index([is_public])
  @@index([is_featured])
  @@map("neuroflow_workflow_templates")
}
