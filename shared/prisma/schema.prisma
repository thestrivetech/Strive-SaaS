generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_logs {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  old_data        Json?
  new_data        Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users?        @relation(fields: [user_id], references: [id])

  @@index([organization_id, created_at])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_conversations {
  id                String        @id @default(cuid())
  user_id           String
  organization_id   String
  title             String?
  context_type      AIContextType @default(GENERAL)
  context_id        String?
  ai_model          AIModel       @default(OPENAI_GPT4)
  conversation_data Json
  usage_tokens      Int           @default(0)
  is_archived       Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  organizations     organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([organization_id])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_tools {
  id            String           @id @default(cuid())
  name          String
  description   String?
  toolType      ToolType
  required_tier SubscriptionTier
  configuration Json?
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
}

model analytics_events {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  event_type    String
  event_name    String
  element_id    String?
  element_class String?
  element_text  String?
  url           String
  path          String
  x_position    Int?
  y_position    Int?
  scroll_depth  Int?
  properties    Json?
  timestamp     DateTime @default(now())

  @@index([event_type])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

model analytics_goals {
  id               String             @id @default(cuid())
  name             String
  description      String?
  type             String
  conditions       Json
  value            Float?
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  goal_conversions goal_conversions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model appointments {
  id              String            @id @default(cuid())
  organization_id String
  customer_id     String?
  assigned_to     String
  title           String
  description     String?
  start_time      DateTime
  end_time        DateTime
  status          AppointmentStatus @default(SCHEDULED)
  location        String?
  meeting_url     String?
  reminders_sent  Json?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  users           users             @relation(fields: [assigned_to], references: [id])
  customers       customers?        @relation(fields: [customer_id], references: [id])
  organizations   organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id])
  @@index([start_time])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attachments {
  id              String        @id @default(cuid())
  organization_id String
  entity_type     String
  entity_id       String
  file_name       String
  file_size       Int
  mime_type       String
  file_path       String
  uploaded_by_id  String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [uploaded_by_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content {
  id              String        @id @default(cuid())
  organization_id String
  title           String
  slug            String
  content_type    ContentType
  content         String
  excerpt         String?
  status          ContentStatus @default(DRAFT)
  author_id       String
  published_at    DateTime?
  seo_meta        Json?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  users           users         @relation(fields: [author_id], references: [id])
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, slug])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model conversations {
  id                 String                 @id @default(cuid())
  organization_id    String
  industry           String                 @default("strive")
  session_id         String
  user_message       String
  assistant_response String
  problem_detected   String?
  solution_presented String?
  conversation_stage String
  outcome            String?
  conversion_score   Float?
  booking_completed  Boolean                @default(false)
  response_time_ms   Int?
  user_satisfaction  Int?
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  embedding          Unsupported("vector")?
  organizations      organizations          @relation(fields: [organization_id], references: [id])

  @@index([created_at(sort: Desc)])
  @@index([embedding])
  @@index([industry])
  @@index([organization_id])
  @@index([session_id])
  @@index([session_id], map: "conversations_session_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model customers {
  id              String         @id @default(cuid())
  organization_id String
  name            String
  email           String?
  phone           String?
  company         String?
  status          CustomerStatus @default(LEAD)
  source          CustomerSource @default(WEBSITE)
  tags            String[]
  custom_fields   Json?
  assigned_to     String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  appointments    appointments[]
  users           users?         @relation(fields: [assigned_to], references: [id])
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  projects        projects[]

  @@index([email])
  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model example_conversations {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  industry           String                 @default("strive")
  user_input         String
  assistant_response String
  problem_type       String?
  solution_type      String?
  outcome            String?
  conversion_score   Float?
  embedding          Unsupported("vector")?
  created_at         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @default(now()) @db.Timestamptz(6)

  @@index([embedding])
  @@index([industry])
}

model goal_conversions {
  id              String          @id @default(cuid())
  goal_id         String
  session_id      String
  user_id         String?
  value           Float?
  url             String
  path            String
  timestamp       DateTime        @default(now())
  analytics_goals analytics_goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@index([goal_id])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id              String           @id @default(cuid())
  user_id         String
  organization_id String
  type            NotificationType
  title           String
  message         String
  action_url      String?
  entity_type     String?
  entity_id       String?
  read            Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([organization_id])
  @@index([read])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String        @id @default(cuid())
  user_id         String
  organization_id String
  role            OrgRole       @default(MEMBER)
  permissions     Json?
  joined_at       DateTime      @default(now())
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_tool_configs {
  id              String        @id @default(cuid())
  organization_id String
  tool_id         String
  industry        Industry
  enabled         Boolean       @default(false)
  settings        Json          @default("{}")
  enabled_at      DateTime?
  disabled_at     DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, tool_id])
  @@index([organization_id, enabled])
  @@index([industry])
  @@index([tool_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id                   String                 @id @default(cuid())
  name                 String
  slug                 String                 @unique
  description          String?
  settings             Json?
  subscription_status  SubscriptionStatus     @default(TRIAL)
  billing_email        String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  activity_logs        activity_logs[]
  ai_conversations     ai_conversations[]
  appointments         appointments[]
  attachments          attachments[]
  content              content[]
  conversations        conversations[]
  customers                 customers[]
  notifications             notifications[]
  organization_members      organization_members[]
  organization_tool_configs organization_tool_configs[]
  projects                  projects[]
  subscriptions             subscriptions?
  usage_tracking            usage_tracking[]
}

model page_views {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  url           String
  path          String
  title         String?
  referrer      String?
  user_agent    String?
  ip_address    String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  view_duration Int?
  timestamp     DateTime @default(now())

  @@index([path])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id                  String        @id @default(cuid())
  organization_id     String
  customer_id         String?
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  start_date          DateTime?
  due_date            DateTime?
  completion_date     DateTime?
  budget              Decimal?      @db.Decimal(10, 2)
  progress_percentage Int           @default(0)
  project_manager_id  String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  customers           customers?    @relation(fields: [customer_id], references: [id])
  organizations       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users               users         @relation(fields: [project_manager_id], references: [id])
  tasks               tasks[]

  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                     String             @id @default(cuid())
  organization_id        String             @unique
  stripe_subscription_id String?            @unique
  stripe_customer_id     String?
  status                 SubscriptionStatus @default(TRIAL)
  tier                   SubscriptionTier   @default(FREE)
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean            @default(false)
  metadata               Json?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  organizations          organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id                             String     @id @default(cuid())
  project_id                     String
  parent_task_id                 String?
  title                          String
  description                    String?
  status                         TaskStatus @default(TODO)
  priority                       Priority   @default(MEDIUM)
  assigned_to                    String?
  created_by                     String
  due_date                       DateTime?
  estimated_hours                Decimal?   @db.Decimal(5, 2)
  actual_hours                   Decimal?   @db.Decimal(5, 2)
  tags                           String[]
  position                       Int
  created_at                     DateTime   @default(now())
  updated_at                     DateTime   @updatedAt
  users_tasks_assigned_toTousers users?     @relation("tasks_assigned_toTousers", fields: [assigned_to], references: [id])
  users_tasks_created_byTousers  users      @relation("tasks_created_byTousers", fields: [created_by], references: [id])
  tasks                          tasks?     @relation("tasksTotasks", fields: [parent_task_id], references: [id])
  other_tasks                    tasks[]    @relation("tasksTotasks")
  projects                       projects   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([assigned_to])
  @@index([project_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_tracking {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String
  resource_type   ResourceType
  resource_name   String
  usage_amount    Int
  billing_period  DateTime
  metadata        Json?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id, billing_period])
}

model user_sessions {
  id         String    @id @default(cuid())
  source     String    @default("saas")
  session_id String    @unique
  user_id    String?
  start_time DateTime  @default(now())
  end_time   DateTime?
  duration   Int?
  page_views Int       @default(0)
  bounced    Boolean   @default(false)
  converted  Boolean   @default(false)
  user_agent String?
  ip_address String?
  country    String?
  city       String?
  device     String?
  browser    String?
  os         String?
  referrer   String?
  entry_page String?
  exit_page  String?

  @@index([source])
  @@index([start_time])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                             String                 @id @default(cuid())
  clerk_user_id                  String?                @unique
  email                          String                 @unique
  name                           String?
  avatar_url                     String?
  role                           UserRole               @default(EMPLOYEE)
  subscription_tier              SubscriptionTier       @default(FREE)
  is_active                      Boolean                @default(true)
  created_at                     DateTime               @default(now())
  updated_at                     DateTime               @updatedAt
  activity_logs                  activity_logs[]
  ai_conversations               ai_conversations[]
  appointments                   appointments[]
  attachments                    attachments[]
  content                        content[]
  customers                      customers[]
  notifications                  notifications[]
  organization_members           organization_members[]
  projects                       projects[]
  tasks_tasks_assigned_toTousers tasks[]                @relation("tasks_assigned_toTousers")
  tasks_tasks_created_byTousers  tasks[]                @relation("tasks_created_byTousers")
}

model web_vitals_metrics {
  id              String   @id @default(cuid())
  source          String   @default("saas")
  session_id      String
  user_id         String?
  url             String
  path            String
  metric_name     String
  metric_value    Float
  metric_rating   String
  metric_id       String
  user_agent      String?
  device          String?
  browser         String?
  connection_type String?
  timestamp       DateTime @default(now())

  @@index([metric_name])
  @@index([source])
  @@index([timestamp])
}

enum AIContextType {
  GENERAL
  PROJECT
  CUSTOMER
  TASK
}

enum AIModel {
  OPENAI_GPT4
  CLAUDE_SONNET
  GEMINI
  GROK
  KIMIK2
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  PAGE
  BLOG_POST
  DOCUMENTATION
  TEMPLATE
}

enum CustomerSource {
  WEBSITE
  REFERRAL
  SOCIAL
  EMAIL
  OTHER
}

enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  CHURNED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ResourceType {
  AI_TOKENS
  API_CALLS
  STORAGE
  SEATS
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum ToolType {
  CHATBOT
  ANALYSIS
  AUTOMATION
  INTEGRATION
}

enum UserRole {
  ADMIN
  MODERATOR
  EMPLOYEE
  CLIENT
}

enum Industry {
  REAL_ESTATE
  HEALTHCARE
  STRIVE
  GENERAL
}
