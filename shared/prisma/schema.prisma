generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_logs {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String?
  action          String
  resource_type   String
  resource_id     String?
  old_data        Json?
  new_data        Json?
  ip_address      String?
  user_agent      String?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users?        @relation(fields: [user_id], references: [id])

  @@index([organization_id, created_at])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_conversations {
  id                String        @id @default(cuid())
  user_id           String
  organization_id   String
  title             String?
  context_type      AIContextType @default(GENERAL)
  context_id        String?
  ai_model          AIModel       @default(OPENAI_GPT4)
  conversation_data Json
  usage_tokens      Int           @default(0)
  is_archived       Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  organizations     organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([organization_id])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_tools {
  id            String           @id @default(cuid())
  name          String
  description   String?
  toolType      ToolType
  required_tier SubscriptionTier
  configuration Json?
  is_active     Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
}

model analytics_events {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  event_type    String
  event_name    String
  element_id    String?
  element_class String?
  element_text  String?
  url           String
  path          String
  x_position    Int?
  y_position    Int?
  scroll_depth  Int?
  properties    Json?
  timestamp     DateTime @default(now())

  @@index([event_type])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

model analytics_goals {
  id               String             @id @default(cuid())
  name             String
  description      String?
  type             String
  conditions       Json
  value            Float?
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  goal_conversions goal_conversions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model appointments {
  id              String            @id @default(cuid())
  organization_id String
  customer_id     String?
  contact_id      String?
  assigned_to     String
  title           String
  description     String?
  start_time      DateTime
  end_time        DateTime
  status          AppointmentStatus @default(SCHEDULED)
  type            AppointmentType   @default(OTHER)
  location        String?
  meeting_url     String?
  reminders_sent  Json?
  lead_id         String?
  deal_id         String?
  listing_id      String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  users           users             @relation(fields: [assigned_to], references: [id])
  customers       customers?        @relation(fields: [customer_id], references: [id])
  contact         contacts?         @relation("ContactAppointments", fields: [contact_id], references: [id])
  organizations   organizations     @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  lead            leads?            @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  deal            deals?            @relation(fields: [deal_id], references: [id], onDelete: SetNull)
  listing         listings?         @relation(fields: [listing_id], references: [id], onDelete: SetNull)

  @@index([organization_id])
  @@index([start_time])
  @@index([lead_id])
  @@index([deal_id])
  @@index([listing_id])
  @@index([type])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model attachments {
  id              String        @id @default(cuid())
  organization_id String
  entity_type     String
  entity_id       String
  file_name       String
  file_size       Int
  mime_type       String
  file_path       String
  uploaded_by_id  String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [uploaded_by_id], references: [id])

  @@index([entity_type, entity_id])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model content {
  id              String        @id @default(cuid())
  organization_id String
  title           String
  slug            String
  content_type    ContentType
  content         String
  excerpt         String?
  status          ContentStatus @default(DRAFT)
  author_id       String
  published_at    DateTime?
  seo_meta        Json?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  users           users         @relation(fields: [author_id], references: [id])
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, slug])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model conversations {
  id                 String                 @id @default(cuid())
  organization_id    String
  industry           String                 @default("strive")
  session_id         String
  user_message       String
  assistant_response String
  problem_detected   String?
  solution_presented String?
  conversation_stage String
  outcome            String?
  conversion_score   Float?
  booking_completed  Boolean                @default(false)
  response_time_ms   Int?
  user_satisfaction  Int?
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  embedding          Unsupported("vector")?
  organizations      organizations          @relation(fields: [organization_id], references: [id])

  @@index([created_at(sort: Desc)])
  @@index([embedding])
  @@index([industry])
  @@index([organization_id])
  @@index([session_id])
  @@index([session_id], map: "conversations_session_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model customers {
  id              String         @id @default(cuid())
  organization_id String
  name            String
  email           String?
  phone           String?
  company         String?
  status          CustomerStatus @default(LEAD)
  source          CustomerSource @default(WEBSITE)
  tags            String[]
  custom_fields   Json?
  assigned_to     String?
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  appointments    appointments[]
  users           users?         @relation(fields: [assigned_to], references: [id])
  organizations   organizations  @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  projects        projects[]

  @@index([email])
  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model leads {
  id              String        @id @default(cuid())
  name            String
  email           String?
  phone           String?
  company         String?
  source          LeadSource    @default(WEBSITE)
  status          LeadStatus    @default(NEW_LEAD)
  score           LeadScore     @default(COLD)
  score_value     Int           @default(0)
  budget          Decimal?      @db.Decimal(12, 2)
  timeline        String?
  notes           String?       @db.Text
  tags            String[]      @default([])
  custom_fields   Json?         @db.JsonB
  organization_id String
  assigned_to_id  String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  last_contact_at DateTime?
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to     users?        @relation("LeadAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  activities      activities[]
  deals           deals[]
  appointments    appointments[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([status])
  @@index([source])
  @@index([score])
  @@index([created_at])
  @@map("leads")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model contacts {
  id                       String        @id @default(cuid())
  name                     String
  email                    String?
  phone                    String?
  company                  String?
  position                 String?
  type                     ContactType   @default(PROSPECT)
  status                   ContactStatus @default(ACTIVE)
  notes                    String?       @db.Text
  tags                     String[]      @default([])
  custom_fields            Json?         @db.JsonB
  linkedin_url             String?
  twitter_url              String?
  preferred_contact_method String?
  organization_id          String
  assigned_to_id           String?
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  last_contact_at          DateTime?
  organizations            organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to              users?        @relation("ContactAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  activities               activities[]
  deals                    deals[]
  appointments             appointments[] @relation("ContactAppointments")

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([type])
  @@index([status])
  @@index([created_at])
  @@map("contacts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model deals {
  id                  String        @id @default(cuid())
  title               String
  description         String?       @db.Text
  value               Decimal       @db.Decimal(12, 2)
  stage               DealStage     @default(LEAD)
  status              DealStatus    @default(ACTIVE)
  probability         Int           @default(50)
  expected_close_date DateTime?
  actual_close_date   DateTime?
  lost_reason         String?
  notes               String?       @db.Text
  tags                String[]      @default([])
  custom_fields       Json?         @db.JsonB
  lead_id             String?
  contact_id          String?
  listing_id          String?
  organization_id     String
  assigned_to_id      String?
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  organizations       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to         users?        @relation("DealAssignedTo", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  lead                leads?        @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  contact             contacts?     @relation(fields: [contact_id], references: [id], onDelete: SetNull)
  listing             listings?     @relation(fields: [listing_id], references: [id], onDelete: SetNull)
  activities          activities[]
  appointments        appointments[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([stage])
  @@index([status])
  @@index([expected_close_date])
  @@index([created_at])
  @@map("deals")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model listings {
  id               String        @id @default(cuid())
  title            String
  description      String?       @db.Text
  address          String
  city             String
  state            String
  zip_code         String
  country          String        @default("USA")
  property_type    PropertyType  @default(RESIDENTIAL)
  bedrooms         Int?
  bathrooms        Decimal?      @db.Decimal(3, 1)
  square_feet      Int?
  lot_size         Decimal?      @db.Decimal(10, 2)
  year_built       Int?
  price            Decimal       @db.Decimal(12, 2)
  price_per_sqft   Decimal?      @db.Decimal(10, 2)
  status           ListingStatus @default(ACTIVE)
  mls_number       String?
  listing_date     DateTime?
  expiration_date  DateTime?
  images           String[]      @default([])
  virtual_tour_url String?
  features         String[]      @default([])
  notes            String?       @db.Text
  tags             String[]      @default([])
  custom_fields    Json?         @db.JsonB
  organization_id  String
  assigned_to_id   String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  organizations    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  assigned_to      users?        @relation("ListingAgent", fields: [assigned_to_id], references: [id], onDelete: SetNull)
  deals            deals[]
  activities       activities[]
  appointments     appointments[]

  @@index([organization_id])
  @@index([assigned_to_id])
  @@index([status])
  @@index([city])
  @@index([state])
  @@index([property_type])
  @@index([created_at])
  @@map("listings")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activities {
  id               String        @id @default(cuid())
  type             ActivityType
  title            String
  description      String?       @db.Text
  outcome          String?
  duration_minutes Int?
  lead_id          String?
  contact_id       String?
  deal_id          String?
  listing_id       String?
  organization_id  String
  created_by_id    String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  completed_at     DateTime?
  organizations    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  created_by       users         @relation("ActivityCreatedBy", fields: [created_by_id], references: [id], onDelete: Cascade)
  lead             leads?        @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  contact          contacts?     @relation(fields: [contact_id], references: [id], onDelete: SetNull)
  deal             deals?        @relation(fields: [deal_id], references: [id], onDelete: SetNull)
  listing          listings?     @relation(fields: [listing_id], references: [id], onDelete: SetNull)

  @@index([organization_id])
  @@index([created_by_id])
  @@index([type])
  @@index([lead_id])
  @@index([contact_id])
  @@index([deal_id])
  @@index([created_at])
  @@map("activities")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model example_conversations {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  industry           String                 @default("strive")
  user_input         String
  assistant_response String
  problem_type       String?
  solution_type      String?
  outcome            String?
  conversion_score   Float?
  embedding          Unsupported("vector")?
  created_at         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @default(now()) @db.Timestamptz(6)

  @@index([embedding])
  @@index([industry])
}

model goal_conversions {
  id              String          @id @default(cuid())
  goal_id         String
  session_id      String
  user_id         String?
  value           Float?
  url             String
  path            String
  timestamp       DateTime        @default(now())
  analytics_goals analytics_goals @relation(fields: [goal_id], references: [id], onDelete: Cascade)

  @@index([goal_id])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model notifications {
  id              String           @id @default(cuid())
  user_id         String
  organization_id String
  type            NotificationType
  title           String
  message         String
  action_url      String?
  entity_type     String?
  entity_id       String?
  read            Boolean          @default(false)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  organizations   organizations    @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([organization_id])
  @@index([read])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_members {
  id              String        @id @default(cuid())
  user_id         String
  organization_id String
  role            OrgRole       @default(MEMBER)
  permissions     Json?
  joined_at       DateTime      @default(now())
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organization_tool_configs {
  id              String        @id @default(cuid())
  organization_id String
  tool_id         String
  industry        Industry
  enabled         Boolean       @default(false)
  settings        Json          @default("{}")
  enabled_at      DateTime?
  disabled_at     DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@unique([organization_id, tool_id])
  @@index([organization_id, enabled])
  @@index([industry])
  @@index([tool_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id                   String                 @id @default(cuid())
  name                 String
  slug                 String                 @unique
  description          String?
  settings             Json?
  subscription_status  SubscriptionStatus     @default(TRIAL)
  billing_email        String?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  activity_logs        activity_logs[]
  ai_conversations     ai_conversations[]
  appointments         appointments[]
  attachments          attachments[]
  content              content[]
  conversations        conversations[]
  customers                 customers[]
  notifications             notifications[]
  organization_members      organization_members[]
  organization_tool_configs organization_tool_configs[]
  projects                  projects[]
  subscriptions             subscriptions?
  usage_tracking            usage_tracking[]
  transaction_loops         transaction_loops[]
  workflow_templates        workflows[]
  transaction_audit_logs    transaction_audit_logs[]
  leads                     leads[]
  contacts                  contacts[]
  deals                     deals[]
  listings                  listings[]
  activities                activities[]
}

model page_views {
  id            String   @id @default(cuid())
  source        String   @default("saas")
  session_id    String
  user_id       String?
  url           String
  path          String
  title         String?
  referrer      String?
  user_agent    String?
  ip_address    String?
  country       String?
  city          String?
  device        String?
  browser       String?
  os            String?
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  view_duration Int?
  timestamp     DateTime @default(now())

  @@index([path])
  @@index([session_id])
  @@index([source])
  @@index([timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model projects {
  id                  String        @id @default(cuid())
  organization_id     String
  customer_id         String?
  name                String
  description         String?
  status              ProjectStatus @default(PLANNING)
  priority            Priority      @default(MEDIUM)
  start_date          DateTime?
  due_date            DateTime?
  completion_date     DateTime?
  budget              Decimal?      @db.Decimal(10, 2)
  progress_percentage Int           @default(0)
  project_manager_id  String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  customers           customers?    @relation(fields: [customer_id], references: [id])
  organizations       organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  users               users         @relation(fields: [project_manager_id], references: [id])
  tasks               tasks[]

  @@index([organization_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                     String             @id @default(cuid())
  organization_id        String             @unique
  stripe_subscription_id String?            @unique
  stripe_customer_id     String?
  status                 SubscriptionStatus @default(TRIAL)
  tier                   SubscriptionTier   @default(FREE)
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean            @default(false)
  metadata               Json?
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  organizations          organizations      @relation(fields: [organization_id], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tasks {
  id                             String     @id @default(cuid())
  project_id                     String
  parent_task_id                 String?
  title                          String
  description                    String?
  status                         TaskStatus @default(TODO)
  priority                       Priority   @default(MEDIUM)
  assigned_to                    String?
  created_by                     String
  due_date                       DateTime?
  estimated_hours                Decimal?   @db.Decimal(5, 2)
  actual_hours                   Decimal?   @db.Decimal(5, 2)
  tags                           String[]
  position                       Int
  created_at                     DateTime   @default(now())
  updated_at                     DateTime   @updatedAt
  users_tasks_assigned_toTousers users?     @relation("tasks_assigned_toTousers", fields: [assigned_to], references: [id])
  users_tasks_created_byTousers  users      @relation("tasks_created_byTousers", fields: [created_by], references: [id])
  tasks                          tasks?     @relation("tasksTotasks", fields: [parent_task_id], references: [id])
  other_tasks                    tasks[]    @relation("tasksTotasks")
  projects                       projects   @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([assigned_to])
  @@index([project_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_tracking {
  id              String        @id @default(cuid())
  organization_id String
  user_id         String
  resource_type   ResourceType
  resource_name   String
  usage_amount    Int
  billing_period  DateTime
  metadata        Json?
  created_at      DateTime      @default(now())
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id, billing_period])
}

model user_sessions {
  id         String    @id @default(cuid())
  source     String    @default("saas")
  session_id String    @unique
  user_id    String?
  start_time DateTime  @default(now())
  end_time   DateTime?
  duration   Int?
  page_views Int       @default(0)
  bounced    Boolean   @default(false)
  converted  Boolean   @default(false)
  user_agent String?
  ip_address String?
  country    String?
  city       String?
  device     String?
  browser    String?
  os         String?
  referrer   String?
  entry_page String?
  exit_page  String?

  @@index([source])
  @@index([start_time])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                             String                 @id @default(cuid())
  clerk_user_id                  String?                @unique
  email                          String                 @unique
  name                           String?
  avatar_url                     String?
  role                           UserRole               @default(EMPLOYEE)
  subscription_tier              SubscriptionTier       @default(FREE)
  is_active                      Boolean                @default(true)
  created_at                     DateTime               @default(now())
  updated_at                     DateTime               @updatedAt
  activity_logs                  activity_logs[]
  ai_conversations               ai_conversations[]
  appointments                   appointments[]
  attachments                    attachments[]
  content                        content[]
  customers                      customers[]
  notifications                  notifications[]
  organization_members           organization_members[]
  projects                       projects[]
  tasks_tasks_assigned_toTousers tasks[]                @relation("tasks_assigned_toTousers")
  tasks_tasks_created_byTousers  tasks[]                @relation("tasks_created_byTousers")
  transaction_loops              transaction_loops[]
  uploaded_documents             documents[]
  created_document_versions      document_versions[]
  requested_signatures           signature_requests[]
  created_transaction_tasks      transaction_tasks[]
  created_workflows              workflows[]
  transaction_audit_logs         transaction_audit_logs[]
  assigned_leads                 leads[]                @relation("LeadAssignedTo")
  assigned_contacts              contacts[]             @relation("ContactAssignedTo")
  assigned_deals                 deals[]                @relation("DealAssignedTo")
  assigned_listings              listings[]             @relation("ListingAgent")
  created_activities             activities[]           @relation("ActivityCreatedBy")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_loops {
  id                 String               @id @default(cuid())
  property_address   String
  transaction_type   TransactionType
  listing_price      Decimal              @db.Decimal(12, 2)
  status             LoopStatus           @default(DRAFT)
  expected_closing   DateTime?
  actual_closing     DateTime?
  progress           Int                  @default(0)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  organization_id    String
  created_by         String
  organizations      organizations        @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator            users                @relation(fields: [created_by], references: [id])
  documents          documents[]
  parties            loop_parties[]
  transaction_tasks  transaction_tasks[]
  signatures         signature_requests[]
  workflows          workflows[]

  @@index([organization_id])
  @@index([status])
  @@index([created_by])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id                    String                  @id @default(cuid())
  filename              String
  original_name         String
  mime_type             String
  file_size             Int
  storage_key           String                  @unique
  version               Int                     @default(1)
  status                DocumentStatus          @default(DRAFT)
  category              String?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  loop_id               String
  uploaded_by           String
  loop                  transaction_loops       @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  uploader              users                   @relation(fields: [uploaded_by], references: [id])
  signatures            document_signatures[]
  versions              document_versions[]

  @@index([loop_id])
  @@index([status])
  @@index([category])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_versions {
  id             String    @id @default(cuid())
  version_number Int
  storage_key    String
  file_size      Int
  created_at     DateTime  @default(now())
  created_by     String
  document_id    String
  creator        users     @relation(fields: [created_by], references: [id])
  document       documents @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([document_id, version_number])
  @@index([document_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model signature_requests {
  id            String                @id @default(cuid())
  title         String
  message       String?               @db.Text
  status        SignatureStatus       @default(PENDING)
  signing_order SigningOrder          @default(PARALLEL)
  expires_at    DateTime?
  completed_at  DateTime?
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
  loop_id       String
  requested_by  String
  loop          transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  requester     users                 @relation(fields: [requested_by], references: [id])
  signatures    document_signatures[]

  @@index([loop_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_signatures {
  id             String             @id @default(cuid())
  status         SignatureStatus    @default(PENDING)
  signed_at      DateTime?
  signature_data String?            @db.Text
  ip_address     String?
  user_agent     String?
  auth_method    String?
  decline_reason String?            @db.Text
  document_id    String
  signer_id      String
  request_id     String
  document       documents          @relation(fields: [document_id], references: [id], onDelete: Cascade)
  signer         loop_parties       @relation(fields: [signer_id], references: [id])
  request        signature_requests @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([signer_id])
  @@index([request_id])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model loop_parties {
  id                  String                @id @default(cuid())
  name                String
  email               String
  phone               String?
  role                PartyRole
  permissions         Json
  status              PartyStatus           @default(ACTIVE)
  invited_at          DateTime              @default(now())
  joined_at           DateTime?
  loop_id             String
  loop                transaction_loops     @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  signatures          document_signatures[]
  assigned_tasks      transaction_tasks[]

  @@index([loop_id])
  @@index([email])
  @@index([role])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_tasks {
  id           String            @id @default(cuid())
  title        String
  description  String?           @db.Text
  status       TaskStatus        @default(TODO)
  priority     TaskPriority      @default(MEDIUM)
  due_date     DateTime?
  completed_at DateTime?
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  loop_id      String
  assigned_to  String?
  created_by   String
  loop         transaction_loops @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  assignee     loop_parties?     @relation(fields: [assigned_to], references: [id], onDelete: SetNull)
  creator      users             @relation(fields: [created_by], references: [id])

  @@index([loop_id])
  @@index([status])
  @@index([assigned_to])
  @@index([due_date])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model workflows {
  id              String             @id @default(cuid())
  name            String
  description     String?            @db.Text
  is_template     Boolean            @default(false)
  steps           Json
  status          WorkflowStatus     @default(ACTIVE)
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  loop_id         String?
  created_by      String
  organization_id String?
  loop            transaction_loops? @relation(fields: [loop_id], references: [id], onDelete: Cascade)
  creator         users              @relation(fields: [created_by], references: [id])
  organization    organizations?     @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([loop_id])
  @@index([is_template])
  @@index([organization_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model transaction_audit_logs {
  id              String        @id @default(cuid())
  action          String
  entity_type     String
  entity_id       String
  old_values      Json?
  new_values      Json?
  ip_address      String?
  user_agent      String?
  timestamp       DateTime      @default(now())
  user_id         String
  organization_id String
  user            users         @relation(fields: [user_id], references: [id])
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([entity_type, entity_id])
  @@index([user_id])
  @@index([organization_id])
  @@index([timestamp])
}

model web_vitals_metrics {
  id              String   @id @default(cuid())
  source          String   @default("saas")
  session_id      String
  user_id         String?
  url             String
  path            String
  metric_name     String
  metric_value    Float
  metric_rating   String
  metric_id       String
  user_agent      String?
  device          String?
  browser         String?
  connection_type String?
  timestamp       DateTime @default(now())

  @@index([metric_name])
  @@index([source])
  @@index([timestamp])
}

enum AIContextType {
  GENERAL
  PROJECT
  CUSTOMER
  TASK
}

enum AIModel {
  OPENAI_GPT4
  CLAUDE_SONNET
  GEMINI
  GROK
  KIMIK2
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  MEETING
  CALL
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
  OTHER
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContentType {
  PAGE
  BLOG_POST
  DOCUMENTATION
  TEMPLATE
}

enum CustomerSource {
  WEBSITE
  REFERRAL
  SOCIAL
  EMAIL
  OTHER
}

enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  CHURNED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ResourceType {
  AI_TOKENS
  API_CALLS
  STORAGE
  SEATS
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  PAST_DUE
  CANCELLED
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum ToolType {
  CHATBOT
  ANALYSIS
  AUTOMATION
  INTEGRATION
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  MODERATOR
  EMPLOYEE
  CLIENT
}

enum Industry {
  REAL_ESTATE
  HEALTHCARE
  STRIVE
  GENERAL
}

// CRM Enums
enum LeadSource {
  WEBSITE
  REFERRAL
  GOOGLE_ADS
  SOCIAL_MEDIA
  COLD_CALL
  EMAIL_CAMPAIGN
  EVENT
  PARTNER
  OTHER
}

enum LeadStatus {
  NEW_LEAD
  IN_CONTACT
  QUALIFIED
  UNQUALIFIED
  CONVERTED
  LOST
}

enum LeadScore {
  HOT
  WARM
  COLD
}

enum ContactType {
  PROSPECT
  CLIENT
  PAST_CLIENT
  PARTNER
  VENDOR
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  DO_NOT_CONTACT
}

enum DealStage {
  LEAD
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSING
  CLOSED_WON
  CLOSED_LOST
}

enum DealStatus {
  ACTIVE
  WON
  LOST
  ABANDONED
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  LAND
  MULTI_FAMILY
  CONDO
  TOWNHOUSE
  LUXURY
}

enum ListingStatus {
  ACTIVE
  PENDING
  SOLD
  EXPIRED
  WITHDRAWN
  CONTINGENT
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  SHOWING
  OPEN_HOUSE
  FOLLOW_UP
}

enum TransactionType {
  PURCHASE_AGREEMENT
  LISTING_AGREEMENT
  LEASE_AGREEMENT
  COMMERCIAL_PURCHASE
  COMMERCIAL_LEASE
}

enum LoopStatus {
  DRAFT
  ACTIVE
  UNDER_CONTRACT
  CLOSING
  CLOSED
  CANCELLED
  ARCHIVED
}

enum DocumentStatus {
  DRAFT
  PENDING
  REVIEWED
  SIGNED
  ARCHIVED
}

enum SignatureStatus {
  PENDING
  SENT
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}

enum SigningOrder {
  SEQUENTIAL
  PARALLEL
}

enum PartyRole {
  BUYER
  SELLER
  BUYER_AGENT
  LISTING_AGENT
  LENDER
  TITLE_COMPANY
  INSPECTOR
  APPRAISER
  ATTORNEY
  ESCROW_OFFICER
  OTHER
}

enum PartyStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum WorkflowStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
