{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/zochr/Desktop/GitHub/Strive_Website/app/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6IAAY,CAAC;IACf,KAAK,uCAAyC;QAAC;QAAS;QAAS;KAAO,GAAG;AAC7E;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/zochr/Desktop/GitHub/Strive_Website/app/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { createServerClient } from '@supabase/ssr';\r\nimport { z } from 'zod';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nconst loginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(6),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { email, password } = loginSchema.parse(body);\r\n\r\n    // Create Supabase client\r\n    const supabase = createServerClient(\r\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n      {\r\n        cookies: {\r\n          get(name: string) {\r\n            return request.cookies.get(name)?.value;\r\n          },\r\n          set(_name: string, _value: string, _options: unknown) {\r\n            // We'll set cookies in the response\r\n          },\r\n          remove(_name: string, _options: unknown) {\r\n            // We'll remove cookies in the response\r\n          },\r\n        },\r\n      }\r\n    );\r\n\r\n    // Attempt to sign in\r\n    const { data, error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password,\r\n    });\r\n\r\n    if (error) {\r\n      return NextResponse.json(\r\n        { error: error.message },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Check if user exists in our database\r\n    let user = await prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n\r\n    // If user doesn't exist in our database, create them\r\n    if (!user && data.user) {\r\n      user = await prisma.user.create({\r\n        data: {\r\n          email: data.user.email!,\r\n          name: data.user.user_metadata?.full_name || email.split('@')[0],\r\n          avatarUrl: data.user.user_metadata?.avatar_url,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Create response with session cookies\r\n    const response = NextResponse.json(\r\n      {\r\n        user: {\r\n          id: user?.id,\r\n          email: user?.email,\r\n          name: user?.name,\r\n          role: user?.role,\r\n        },\r\n        session: data.session,\r\n      },\r\n      { status: 200 }\r\n    );\r\n\r\n    // Set auth cookies\r\n    if (data.session) {\r\n      const { access_token, refresh_token } = data.session;\r\n\r\n      response.cookies.set({\r\n        name: 'sb-access-token',\r\n        value: access_token,\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === 'production',\r\n        sameSite: 'lax',\r\n        maxAge: 60 * 60, // 1 hour\r\n        path: '/',\r\n      });\r\n\r\n      response.cookies.set({\r\n        name: 'sb-refresh-token',\r\n        value: refresh_token,\r\n        httpOnly: true,\r\n        secure: process.env.NODE_ENV === 'production',\r\n        sameSite: 'lax',\r\n        maxAge: 60 * 60 * 24 * 30, // 30 days\r\n        path: '/',\r\n      });\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid request data' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.error('Login error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEA,MAAM,cAAc,oLAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,oLAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,oLAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,YAAY,KAAK,CAAC;QAE9C,yBAAyB;QACzB,MAAM,WAAW,IAAA,iMAAkB,sUAGjC;YACE,SAAS;gBACP,KAAI,IAAY;oBACd,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,OAAO;gBACpC;gBACA,KAAI,KAAa,EAAE,MAAc,EAAE,QAAiB;gBAClD,oCAAoC;gBACtC;gBACA,QAAO,KAAa,EAAE,QAAiB;gBACrC,uCAAuC;gBACzC;YACF;QACF;QAGF,qBAAqB;QACrB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;YAC7D;YACA;QACF;QAEA,IAAI,OAAO;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,MAAM,OAAO;YAAC,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,IAAI,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,OAAO;gBAAE;YAAM;QACjB;QAEA,qDAAqD;QACrD,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;YACtB,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC9B,MAAM;oBACJ,OAAO,KAAK,IAAI,CAAC,KAAK;oBACtB,MAAM,KAAK,IAAI,CAAC,aAAa,EAAE,aAAa,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE;oBAC/D,WAAW,KAAK,IAAI,CAAC,aAAa,EAAE;gBACtC;YACF;QACF;QAEA,uCAAuC;QACvC,MAAM,WAAW,gJAAY,CAAC,IAAI,CAChC;YACE,MAAM;gBACJ,IAAI,MAAM;gBACV,OAAO,MAAM;gBACb,MAAM,MAAM;gBACZ,MAAM,MAAM;YACd;YACA,SAAS,KAAK,OAAO;QACvB,GACA;YAAE,QAAQ;QAAI;QAGhB,mBAAmB;QACnB,IAAI,KAAK,OAAO,EAAE;YAChB,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,KAAK,OAAO;YAEpD,SAAS,OAAO,CAAC,GAAG,CAAC;gBACnB,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,UAAU;gBACV,QAAQ,KAAK;gBACb,MAAM;YACR;YAEA,SAAS,OAAO,CAAC,GAAG,CAAC;gBACnB,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,UAAU;gBACV,QAAQ,KAAK,KAAK,KAAK;gBACvB,MAAM;YACR;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oLAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}