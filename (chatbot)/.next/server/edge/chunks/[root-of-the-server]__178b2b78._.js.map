{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/(chatbot)/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { handleCORS } from './lib/middleware/cors';\r\nimport { detectHostType } from './lib/middleware/routing';\r\nimport { handlePlatformAuth } from './lib/middleware/auth';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // Handle CORS for analytics endpoints\r\n  const corsResponse = handleCORS(request);\r\n  if (corsResponse) return corsResponse;\r\n\r\n  // Detect host type and route accordingly\r\n  const hostType = detectHostType(request);\r\n\r\n  // Chatbot and marketing sites don't require auth\r\n  if (hostType === 'chatbot' || hostType === 'marketing') {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // Platform site requires authentication\r\n  if (hostType === 'platform') {\r\n    return await handlePlatformAuth(request);\r\n  }\r\n\r\n  // Unknown hostname, continue normally\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n    '/api/analytics/:path*',\r\n    '/api/admin/:path*',\r\n    '/admin/:path*',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AAMO,eAAe,WAAW,OAAoB;IACnD,sCAAsC;IACtC,MAAM,eAAe,WAAW;IAChC,IAAI,cAAc,OAAO;IAEzB,yCAAyC;IACzC,MAAM,WAAW,eAAe;IAEhC,iDAAiD;IACjD,IAAI,aAAa,aAAa,aAAa,aAAa;QACtD,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,wCAAwC;IACxC,IAAI,aAAa,YAAY;QAC3B,OAAO,MAAM,mBAAmB;IAClC;IAEA,sCAAsC;IACtC,OAAO,gMAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;QACA;QACA;KACD;AACH"}}]
}