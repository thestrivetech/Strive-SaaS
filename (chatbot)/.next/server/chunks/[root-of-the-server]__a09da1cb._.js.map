{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/shared/lib/schemas/chat-request.ts"],"sourcesContent":["// shared/lib/schemas/chat-request.ts\r\n// Shared Zod validation schema for chat API requests\r\n\r\nimport { z } from 'zod';\r\n\r\nexport const MessageSchema = z.object({\r\n  role: z.enum(['user', 'assistant', 'system']),\r\n  content: z.string().min(1).max(10000),\r\n  timestamp: z.string().optional(),\r\n  id: z.string().optional(),\r\n});\r\n\r\nexport const ChatRequestSchema = z.object({\r\n  messages: z.array(MessageSchema).min(1).max(50),\r\n  industry: z.string().default('strive'),\r\n  sessionId: z.string().min(1),\r\n  conversationStage: z.string().optional(),\r\n  detectedProblems: z.array(z.string()).optional(),\r\n  clientId: z.string().optional(),\r\n});\r\n\r\nexport type ChatRequest = z.infer<typeof ChatRequestSchema>;\r\nexport type MessageRequest = z.infer<typeof MessageSchema>;\r\n"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,qDAAqD;;;;;;;AAErD;;AAEO,MAAM,gBAAgB,yKAAC,CAAC,MAAM,CAAC;IACpC,MAAM,yKAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAa;KAAS;IAC5C,SAAS,yKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC/B,WAAW,yKAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,IAAI,yKAAC,CAAC,MAAM,GAAG,QAAQ;AACzB;AAEO,MAAM,oBAAoB,yKAAC,CAAC,MAAM,CAAC;IACxC,UAAU,yKAAC,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,GAAG,GAAG,CAAC;IAC5C,UAAU,yKAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC7B,WAAW,yKAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC1B,mBAAmB,yKAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,kBAAkB,yKAAC,CAAC,KAAK,CAAC,yKAAC,CAAC,MAAM,IAAI,QAAQ;IAC9C,UAAU,yKAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/%28chatbot%29/app/api/chat/route.ts"],"sourcesContent":["// app/api/chat/route.ts\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport Groq from 'groq-sdk/index.mjs';\r\nimport { z } from 'zod';\r\nimport { loadIndustryConfig } from '@/lib/industries/configs';\r\nimport { RAGService } from '@/lib/services/rag-service';\r\nimport { RentCastService, PropertySearchParams } from '@/lib/modules/real-estate/services/rentcast-service';\r\nimport { IndustryType } from '@strive/shared/types/industry';\r\nimport { Message } from '@strive/shared/types/conversation';\r\nimport { ChatRequestSchema } from '@strive/shared/schemas/chat-request';\r\nimport { RAGContext } from '@strive/shared/types/rag';\r\n\r\nconst groq = new Groq({\r\n  apiKey: process.env.GROQ_API_KEY,\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Parse and validate request body\r\n    const body = await req.json();\r\n    const validated = ChatRequestSchema.parse(body);\r\n\r\n    const {\r\n      messages,\r\n      industry = 'strive',\r\n      sessionId,\r\n    } = validated;\r\n\r\n    // Load industry configuration\r\n    const config = await loadIndustryConfig(industry as IndustryType);\r\n\r\n    // Get the latest user message\r\n    const latestUserMessage = messages[messages.length - 1];\r\n\r\n    // Build conversation history context\r\n    const conversationHistory = {\r\n      stage: determineConversationStage(messages as unknown as Message[]),\r\n      messageCount: messages.length,\r\n      problemsDiscussed: extractProblemsDiscussed(messages as unknown as Message[]),\r\n    };\r\n\r\n    // üî• RAG ENHANCEMENT: Get semantic context\r\n    console.log('üîç Searching for similar conversations...');\r\n    const ragContext = await RAGService.buildRAGContext(\r\n      latestUserMessage.content,\r\n      industry,\r\n      conversationHistory\r\n    );\r\n\r\n    console.log('‚úÖ RAG Context:', {\r\n      detectedProblems: ragContext.searchResults.detectedProblems,\r\n      confidence: ragContext.searchResults.confidence.overallConfidence,\r\n      suggestedApproach: ragContext.guidance.suggestedApproach,\r\n    });\r\n\r\n    // Build enhanced system prompt with RAG context\r\n    const enhancedSystemPrompt = buildEnhancedSystemPrompt(\r\n      config.systemPrompt,\r\n      ragContext\r\n    );\r\n\r\n    // Prepare messages for Groq\r\n    const groqMessages = [\r\n      {\r\n        role: 'system' as const,\r\n        content: enhancedSystemPrompt,\r\n      },\r\n      ...messages\r\n        .filter(m => m.role !== 'system')\r\n        .map(m => ({\r\n          role: m.role as 'user' | 'assistant',\r\n          content: m.content,\r\n        })),\r\n    ];\r\n\r\n    // Stream response from Groq\r\n    const stream = await groq.chat.completions.create({\r\n      model: 'llama-3.3-70b-versatile',\r\n      messages: groqMessages,\r\n      temperature: 0.7,\r\n      max_tokens: 2000, // Increased for property results\r\n      stream: true,\r\n    });\r\n\r\n    // Create readable stream\r\n    const encoder = new TextEncoder();\r\n    let fullResponse = '';\r\n\r\n    const readableStream = new ReadableStream({\r\n      async start(controller) {\r\n        try {\r\n          // Stream LLM response\r\n          for await (const chunk of stream) {\r\n            const content = chunk.choices[0]?.delta?.content || '';\r\n            fullResponse += content;\r\n            \r\n            controller.enqueue(\r\n              encoder.encode(`data: ${JSON.stringify({ content })}\\n\\n`)\r\n            );\r\n          }\r\n\r\n          // üè† PROPERTY SEARCH: Check if response contains property search request\r\n          if (industry === 'real-estate' && fullResponse.includes('<property_search>')) {\r\n            try {\r\n              console.log('üè† Property search detected in response');\r\n              \r\n              // Extract search parameters from LLM response\r\n              const searchMatch = fullResponse.match(/<property_search>([\\s\\S]*?)<\\/property_search>/);\r\n              \r\n              if (searchMatch) {\r\n                const searchParams: PropertySearchParams = JSON.parse(searchMatch[1]);\r\n                console.log('üîç Searching properties with params:', searchParams);\r\n\r\n                // Fetch properties from RentCast\r\n                const properties = await RentCastService.searchProperties(searchParams);\r\n                console.log(`‚úÖ Found ${properties.length} properties`);\r\n\r\n                // Match and score properties\r\n                const matches = RentCastService.matchProperties(properties, searchParams);\r\n                console.log(`üéØ Top ${matches.length} matches selected`);\r\n\r\n                // Send property results to client\r\n                const propertyData = JSON.stringify({\r\n                  type: 'property_results',\r\n                  properties: matches,\r\n                });\r\n                controller.enqueue(encoder.encode(`data: ${propertyData}\\n\\n`));\r\n              }\r\n            } catch (propertyError) {\r\n              console.error('‚ùå Property search error:', propertyError);\r\n              const errorData = JSON.stringify({\r\n                type: 'property_search_error',\r\n                error: 'Failed to search properties. Please try again.',\r\n              });\r\n              controller.enqueue(encoder.encode(`data: ${errorData}\\n\\n`));\r\n            }\r\n          }\r\n\r\n          // üî• STORE CONVERSATION: Save for future learning\r\n          console.log('üíæ Storing conversation for learning...');\r\n          await RAGService.storeConversation({\r\n            industry,\r\n            sessionId,\r\n            userMessage: latestUserMessage.content,\r\n            assistantResponse: fullResponse,\r\n            conversationStage: conversationHistory.stage,\r\n            outcome: 'in_progress',\r\n            bookingCompleted: false,\r\n            problemDetected: ragContext.searchResults.detectedProblems[0],\r\n            solutionPresented: ragContext.searchResults.recommendedSolutions[0],\r\n          });\r\n\r\n          // Send completion signal\r\n          controller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\r\n          controller.close();\r\n        } catch (error) {\r\n          console.error('‚ùå Streaming error:', error);\r\n          controller.error(error);\r\n        }\r\n      },\r\n    });\r\n\r\n    return new NextResponse(readableStream, {\r\n      headers: {\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache',\r\n        Connection: 'keep-alive',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    // Handle validation errors\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Invalid request format',\r\n          details: error.issues.map((e: z.ZodIssue) => ({\r\n            path: e.path.join('.'),\r\n            message: e.message\r\n          }))\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Handle other errors\r\n    console.error('‚ùå Chat API error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Build enhanced system prompt with RAG context\r\n */\r\nfunction buildEnhancedSystemPrompt(\r\n  basePrompt: string,\r\n  ragContext: RAGContext\r\n): string {\r\n  const { searchResults, guidance } = ragContext;\r\n\r\n  let enhancement = '\\n\\n## üéØ CONTEXTUAL INTELLIGENCE (RAG-Enhanced)\\n\\n';\r\n\r\n  // Add detected problems\r\n  if (searchResults.detectedProblems.length > 0) {\r\n    enhancement += `**Similar Conversations Detected These Problems:**\\n`;\r\n    searchResults.detectedProblems.forEach((problem: string) => {\r\n      enhancement += `- ${problem}\\n`;\r\n    });\r\n    enhancement += '\\n';\r\n  }\r\n\r\n  // Add proven approach\r\n  if (searchResults.bestPattern) {\r\n    enhancement += `**Proven Approach (${Math.round(searchResults.bestPattern.conversionScore * 100)}% conversion rate):**\\n`;\r\n    enhancement += `This type of conversation typically succeeds when you focus on quantifying the problem's impact and showing clear ROI.\\n\\n`;\r\n  }\r\n\r\n  // Add guidance\r\n  enhancement += `**Recommended Strategy:**\\n`;\r\n  enhancement += `${guidance.suggestedApproach}\\n\\n`;\r\n\r\n  if (guidance.keyPoints.length > 0) {\r\n    enhancement += `**Key Points to Include:**\\n`;\r\n    guidance.keyPoints.forEach((point: string) => {\r\n      enhancement += `- ${point}\\n`;\r\n    });\r\n    enhancement += '\\n';\r\n  }\r\n\r\n  if (guidance.avoidTopics && guidance.avoidTopics.length > 0) {\r\n    enhancement += `**Topics to Avoid:**\\n`;\r\n    guidance.avoidTopics.forEach((topic: string) => {\r\n      enhancement += `- ${topic}\\n`;\r\n    });\r\n    enhancement += '\\n';\r\n  }\r\n\r\n  enhancement += `**Confidence Level:** ${Math.round(searchResults.confidence.overallConfidence * 100)}%\\n`;\r\n  enhancement += `**Urgency:** ${guidance.urgencyLevel}\\n`;\r\n\r\n  return basePrompt + enhancement;\r\n}\r\n\r\n/**\r\n * Determine current conversation stage\r\n */\r\nfunction determineConversationStage(messages: Message[]): string {\r\n  const userMessages = messages.filter(m => m.role === 'user');\r\n  \r\n  if (userMessages.length <= 2) return 'discovery';\r\n  if (userMessages.length <= 4) return 'qualifying';\r\n  if (userMessages.length <= 6) return 'solutioning';\r\n  \r\n  return 'closing';\r\n}\r\n\r\n/**\r\n * Extract problems discussed so far\r\n */\r\nfunction extractProblemsDiscussed(messages: Message[]): string[] {\r\n  const problems: string[] = [];\r\n  const problemKeywords = [\r\n    'losing customers',\r\n    'churn',\r\n    'defects',\r\n    'quality',\r\n    'support tickets',\r\n    'fraud',\r\n    'maintenance',\r\n    'inventory',\r\n    // Real estate specific\r\n    'looking for',\r\n    'buy',\r\n    'sell',\r\n    'property',\r\n    'home',\r\n    'budget',\r\n    'prequalified',\r\n    'market',\r\n  ];\r\n\r\n  messages.forEach(message => {\r\n    const content = message.content.toLowerCase();\r\n    problemKeywords.forEach(keyword => {\r\n      if (content.includes(keyword) && !problems.includes(keyword)) {\r\n        problems.push(keyword);\r\n      }\r\n    });\r\n  });\r\n\r\n  return problems;\r\n}"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AAExB;AACA;AACA;;;;;;;;;;;;;;;;AAMA;;;;;;;;AAGA,MAAM,OAAO,IAAI,kKAAI,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,YAAY;AAClC;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,kCAAkC;QAClC,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,YAAY,kKAAiB,CAAC,KAAK,CAAC;QAE1C,MAAM,EACJ,QAAQ,EACR,WAAW,QAAQ,EACnB,SAAS,EACV,GAAG;QAEJ,8BAA8B;QAC9B,MAAM,SAAS,MAAM,mBAAmB;QAExC,8BAA8B;QAC9B,MAAM,oBAAoB,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;QAEvD,qCAAqC;QACrC,MAAM,sBAAsB;YAC1B,OAAO,2BAA2B;YAClC,cAAc,SAAS,MAAM;YAC7B,mBAAmB,yBAAyB;QAC9C;QAEA,2CAA2C;QAC3C,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,MAAM,WAAW,eAAe,CACjD,kBAAkB,OAAO,EACzB,UACA;QAGF,QAAQ,GAAG,CAAC,kBAAkB;YAC5B,kBAAkB,WAAW,aAAa,CAAC,gBAAgB;YAC3D,YAAY,WAAW,aAAa,CAAC,UAAU,CAAC,iBAAiB;YACjE,mBAAmB,WAAW,QAAQ,CAAC,iBAAiB;QAC1D;QAEA,gDAAgD;QAChD,MAAM,uBAAuB,0BAC3B,OAAO,YAAY,EACnB;QAGF,4BAA4B;QAC5B,MAAM,eAAe;YACnB;gBACE,MAAM;gBACN,SAAS;YACX;eACG,SACA,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,UACvB,GAAG,CAAC,CAAA,IAAK,CAAC;oBACT,MAAM,EAAE,IAAI;oBACZ,SAAS,EAAE,OAAO;gBACpB,CAAC;SACJ;QAED,4BAA4B;QAC5B,MAAM,SAAS,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YAChD,OAAO;YACP,UAAU;YACV,aAAa;YACb,YAAY;YACZ,QAAQ;QACV;QAEA,yBAAyB;QACzB,MAAM,UAAU,IAAI;QACpB,IAAI,eAAe;QAEnB,MAAM,iBAAiB,IAAI,eAAe;YACxC,MAAM,OAAM,UAAU;gBACpB,IAAI;oBACF,sBAAsB;oBACtB,WAAW,MAAM,SAAS,OAAQ;wBAChC,MAAM,UAAU,MAAM,OAAO,CAAC,EAAE,EAAE,OAAO,WAAW;wBACpD,gBAAgB;wBAEhB,WAAW,OAAO,CAChB,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;4BAAE;wBAAQ,GAAG,IAAI,CAAC;oBAE7D;oBAEA,yEAAyE;oBACzE,IAAI,aAAa,iBAAiB,aAAa,QAAQ,CAAC,sBAAsB;wBAC5E,IAAI;4BACF,QAAQ,GAAG,CAAC;4BAEZ,8CAA8C;4BAC9C,MAAM,cAAc,aAAa,KAAK,CAAC;4BAEvC,IAAI,aAAa;gCACf,MAAM,eAAqC,KAAK,KAAK,CAAC,WAAW,CAAC,EAAE;gCACpE,QAAQ,GAAG,CAAC,wCAAwC;gCAEpD,iCAAiC;gCACjC,MAAM,aAAa,MAAM,gBAAgB,gBAAgB,CAAC;gCAC1D,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,MAAM,CAAC,WAAW,CAAC;gCAErD,6BAA6B;gCAC7B,MAAM,UAAU,gBAAgB,eAAe,CAAC,YAAY;gCAC5D,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,QAAQ,MAAM,CAAC,iBAAiB,CAAC;gCAEvD,kCAAkC;gCAClC,MAAM,eAAe,KAAK,SAAS,CAAC;oCAClC,MAAM;oCACN,YAAY;gCACd;gCACA,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC;4BAC/D;wBACF,EAAE,OAAO,eAAe;4BACtB,QAAQ,KAAK,CAAC,4BAA4B;4BAC1C,MAAM,YAAY,KAAK,SAAS,CAAC;gCAC/B,MAAM;gCACN,OAAO;4BACT;4BACA,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,EAAE,UAAU,IAAI,CAAC;wBAC5D;oBACF;oBAEA,kDAAkD;oBAClD,QAAQ,GAAG,CAAC;oBACZ,MAAM,WAAW,iBAAiB,CAAC;wBACjC;wBACA;wBACA,aAAa,kBAAkB,OAAO;wBACtC,mBAAmB;wBACnB,mBAAmB,oBAAoB,KAAK;wBAC5C,SAAS;wBACT,kBAAkB;wBAClB,iBAAiB,WAAW,aAAa,CAAC,gBAAgB,CAAC,EAAE;wBAC7D,mBAAmB,WAAW,aAAa,CAAC,oBAAoB,CAAC,EAAE;oBACrE;oBAEA,yBAAyB;oBACzB,WAAW,OAAO,CAAC,QAAQ,MAAM,CAAC;oBAClC,WAAW,KAAK;gBAClB,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,sBAAsB;oBACpC,WAAW,KAAK,CAAC;gBACnB;YACF;QACF;QAEA,OAAO,IAAI,gJAAY,CAAC,gBAAgB;YACtC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,YAAY;YACd;QACF;IACF,EAAE,OAAO,OAAO;QACd,2BAA2B;QAC3B,IAAI,iBAAiB,yKAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,IAAkB,CAAC;wBAC5C,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC;wBAClB,SAAS,EAAE,OAAO;oBACpB,CAAC;YACH,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA;;CAEC,GACD,SAAS,0BACP,UAAkB,EAClB,UAAsB;IAEtB,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG;IAEpC,IAAI,cAAc;IAElB,wBAAwB;IACxB,IAAI,cAAc,gBAAgB,CAAC,MAAM,GAAG,GAAG;QAC7C,eAAe,CAAC,oDAAoD,CAAC;QACrE,cAAc,gBAAgB,CAAC,OAAO,CAAC,CAAC;YACtC,eAAe,CAAC,EAAE,EAAE,QAAQ,EAAE,CAAC;QACjC;QACA,eAAe;IACjB;IAEA,sBAAsB;IACtB,IAAI,cAAc,WAAW,EAAE;QAC7B,eAAe,CAAC,mBAAmB,EAAE,KAAK,KAAK,CAAC,cAAc,WAAW,CAAC,eAAe,GAAG,KAAK,uBAAuB,CAAC;QACzH,eAAe,CAAC,0HAA0H,CAAC;IAC7I;IAEA,eAAe;IACf,eAAe,CAAC,2BAA2B,CAAC;IAC5C,eAAe,GAAG,SAAS,iBAAiB,CAAC,IAAI,CAAC;IAElD,IAAI,SAAS,SAAS,CAAC,MAAM,GAAG,GAAG;QACjC,eAAe,CAAC,4BAA4B,CAAC;QAC7C,SAAS,SAAS,CAAC,OAAO,CAAC,CAAC;YAC1B,eAAe,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC;QAC/B;QACA,eAAe;IACjB;IAEA,IAAI,SAAS,WAAW,IAAI,SAAS,WAAW,CAAC,MAAM,GAAG,GAAG;QAC3D,eAAe,CAAC,sBAAsB,CAAC;QACvC,SAAS,WAAW,CAAC,OAAO,CAAC,CAAC;YAC5B,eAAe,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC;QAC/B;QACA,eAAe;IACjB;IAEA,eAAe,CAAC,sBAAsB,EAAE,KAAK,KAAK,CAAC,cAAc,UAAU,CAAC,iBAAiB,GAAG,KAAK,GAAG,CAAC;IACzG,eAAe,CAAC,aAAa,EAAE,SAAS,YAAY,CAAC,EAAE,CAAC;IAExD,OAAO,aAAa;AACtB;AAEA;;CAEC,GACD,SAAS,2BAA2B,QAAmB;IACrD,MAAM,eAAe,SAAS,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK;IAErD,IAAI,aAAa,MAAM,IAAI,GAAG,OAAO;IACrC,IAAI,aAAa,MAAM,IAAI,GAAG,OAAO;IACrC,IAAI,aAAa,MAAM,IAAI,GAAG,OAAO;IAErC,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,yBAAyB,QAAmB;IACnD,MAAM,WAAqB,EAAE;IAC7B,MAAM,kBAAkB;QACtB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,uBAAuB;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,SAAS,OAAO,CAAC,CAAA;QACf,MAAM,UAAU,QAAQ,OAAO,CAAC,WAAW;QAC3C,gBAAgB,OAAO,CAAC,CAAA;YACtB,IAAI,QAAQ,QAAQ,CAAC,YAAY,CAAC,SAAS,QAAQ,CAAC,UAAU;gBAC5D,SAAS,IAAI,CAAC;YAChB;QACF;IACF;IAEA,OAAO;AACT","debugId":null}}]
}