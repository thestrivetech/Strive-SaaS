{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/shared/lib/schemas/chat-request.ts"],"sourcesContent":["// shared/lib/schemas/chat-request.ts\r\n// Shared Zod validation schema for chat API requests\r\n\r\nimport { z } from 'zod';\r\n\r\nexport const MessageSchema = z.object({\r\n  role: z.enum(['user', 'assistant', 'system']),\r\n  content: z.string().min(1).max(10000),\r\n  timestamp: z.string().optional(),\r\n  id: z.string().optional(),\r\n});\r\n\r\nexport const ChatRequestSchema = z.object({\r\n  messages: z.array(MessageSchema).min(1).max(50),\r\n  industry: z.string().default('strive'),\r\n  sessionId: z.string().min(1),\r\n  conversationStage: z.string().optional(),\r\n  detectedProblems: z.array(z.string()).optional(),\r\n  clientId: z.string().optional(),\r\n});\r\n\r\nexport type ChatRequest = z.infer<typeof ChatRequestSchema>;\r\nexport type MessageRequest = z.infer<typeof MessageSchema>;\r\n"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,qDAAqD;;;;;;;AAErD;;AAEO,MAAM,gBAAgB,yKAAC,CAAC,MAAM,CAAC;IACpC,MAAM,yKAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAa;KAAS;IAC5C,SAAS,yKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC/B,WAAW,yKAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,IAAI,yKAAC,CAAC,MAAM,GAAG,QAAQ;AACzB;AAEO,MAAM,oBAAoB,yKAAC,CAAC,MAAM,CAAC;IACxC,UAAU,yKAAC,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,GAAG,GAAG,CAAC;IAC5C,UAAU,yKAAC,CAAC,MAAM,GAAG,OAAO,CAAC;IAC7B,WAAW,yKAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC1B,mBAAmB,yKAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,kBAAkB,yKAAC,CAAC,KAAK,CAAC,yKAAC,CAAC,MAAM,IAAI,QAAQ;IAC9C,UAAU,yKAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/%28chatbot%29/lib/ai/data-extraction.ts"],"sourcesContent":["// lib/ai/data-extraction.ts\r\nimport 'server-only';\r\n\r\nimport Groq from 'groq-sdk';\r\nimport { z } from 'zod';\r\n\r\nconst groq = new Groq({\r\n  apiKey: process.env.GROQ_API_KEY,\r\n});\r\n\r\n/**\r\n * Property search parameters that can be extracted from user messages\r\n */\r\nexport const PropertyPreferencesSchema = z.object({\r\n  location: z.string().optional().describe('City, state, zip code, or neighborhood'),\r\n  maxPrice: z.number().positive().optional().describe('Maximum budget in dollars'),\r\n  minBedrooms: z.number().int().positive().optional().describe('Minimum number of bedrooms'),\r\n  minBathrooms: z.number().positive().optional().describe('Minimum number of bathrooms'),\r\n  mustHaveFeatures: z.array(z.string()).optional().describe('Must-have features like pool, backyard, garage'),\r\n  niceToHaveFeatures: z.array(z.string()).optional().describe('Nice-to-have features'),\r\n  propertyType: z.enum(['single-family', 'condo', 'townhouse', 'multi-family', 'any']).optional().describe('Type of property'),\r\n  timeline: z.enum(['ASAP', 'WITHIN_1_MONTH', 'WITHIN_3_MONTHS', 'WITHIN_6_MONTHS', 'FLEXIBLE']).optional().describe('How soon they want to move'),\r\n  isFirstTimeBuyer: z.boolean().optional().describe('Is this their first home purchase'),\r\n  currentSituation: z.enum(['renting', 'selling', 'first-time', 'relocating', 'unknown']).optional().describe('Current living situation'),\r\n});\r\n\r\nexport type PropertyPreferences = z.infer<typeof PropertyPreferencesSchema>;\r\n\r\n/**\r\n * Contact information that can be extracted\r\n */\r\nexport const ContactInfoSchema = z.object({\r\n  name: z.string().optional().describe('Full name'),\r\n  email: z.string().email().optional().describe('Email address'),\r\n  phone: z.string().optional().describe('Phone number'),\r\n});\r\n\r\nexport type ContactInfo = z.infer<typeof ContactInfoSchema>;\r\n\r\n/**\r\n * Combined extraction result\r\n */\r\nexport interface ExtractionResult {\r\n  propertyPreferences: PropertyPreferences;\r\n  contactInfo: ContactInfo;\r\n  extractedFields: string[]; // List of fields that were successfully extracted\r\n  confidence: number; // 0-1 confidence score\r\n}\r\n\r\n/**\r\n * Extract property preferences and contact info from user message using AI function calling\r\n * This allows natural extraction like:\r\n *   \"Nashville, $700k\" → { location: \"Nashville\", maxPrice: 700000 }\r\n *   \"3 bed 2 bath house with pool\" → { minBedrooms: 3, minBathrooms: 2, mustHaveFeatures: [\"pool\"] }\r\n */\r\nexport async function extractDataFromMessage(\r\n  userMessage: string,\r\n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }> = []\r\n): Promise<ExtractionResult> {\r\n  try {\r\n    // Use Groq with function calling for fast, structured extraction\r\n    const completion = await groq.chat.completions.create({\r\n      model: 'llama-3.3-70b-versatile', // Fast and free\r\n      temperature: 0.1, // Low temperature for consistent extraction\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: `You are a data extraction assistant for a real estate chatbot.\r\nExtract property search preferences and contact information from user messages.\r\n\r\nIMPORTANT EXTRACTION RULES:\r\n\r\n1. LOCATION:\r\n   - Extract city, state, zip codes\r\n   - Examples: \"Nashville, TN\", \"Austin\", \"37209\", \"Denver, Colorado\"\r\n\r\n2. PRICE/BUDGET:\r\n   - Convert shorthand to full numbers: \"$500k\" → 500000, \"$1.2M\" → 1200000\r\n   - Examples: \"$700k\", \"$850,000\", \"under $1 million\"\r\n\r\n3. BEDROOMS/BATHROOMS:\r\n   - Extract from phrases like: \"3 bed\", \"4 bedroom\", \"3BR\", \"2.5 bath\"\r\n   - Examples: \"3 bed 2 bath\", \"4BR/3BA\"\r\n\r\n4. FEATURES:\r\n   - Extract mentioned amenities: pool, backyard, garage, fireplace, etc.\r\n   - Map variations: \"yard\" → \"backyard\", \"2 car garage\" → \"garage\"\r\n\r\n5. PROPERTY TYPE:\r\n   - Detect: single-family, condo, townhouse, multi-family\r\n   - \"house\" → single-family, \"apartment\" → condo\r\n\r\n6. TIMELINE:\r\n   - \"ASAP\" → immediate need\r\n   - \"next month\" → WITHIN_1_MONTH\r\n   - \"6 months\" → WITHIN_6_MONTHS\r\n   - \"flexible\" → FLEXIBLE\r\n\r\n7. CONTACT INFO:\r\n   - Extract names, emails, phone numbers when provided\r\n   - Be liberal in extraction but validate formats\r\n\r\nOnly extract information explicitly mentioned or strongly implied in the current message.\r\nDo NOT make assumptions beyond what's stated.`,\r\n        },\r\n        ...conversationHistory.map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content,\r\n        })),\r\n        {\r\n          role: 'user',\r\n          content: userMessage,\r\n        },\r\n      ],\r\n      tools: [\r\n        {\r\n          type: 'function' as const,\r\n          function: {\r\n            name: 'extract_property_preferences',\r\n            description: 'Extract property search preferences from user message',\r\n            parameters: {\r\n              type: 'object',\r\n              properties: {\r\n                location: {\r\n                  type: 'string',\r\n                  description: 'City, state, zip code, or neighborhood (e.g., \"Nashville, TN\", \"37209\")',\r\n                },\r\n                maxPrice: {\r\n                  type: 'number',\r\n                  description: 'Maximum budget in dollars (convert \"500k\" to 500000)',\r\n                },\r\n                minBedrooms: {\r\n                  type: 'integer',\r\n                  description: 'Minimum number of bedrooms',\r\n                },\r\n                minBathrooms: {\r\n                  type: 'number',\r\n                  description: 'Minimum number of bathrooms (can be decimal like 2.5)',\r\n                },\r\n                mustHaveFeatures: {\r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  description: 'Must-have features (pool, backyard, garage, etc.)',\r\n                },\r\n                niceToHaveFeatures: {\r\n                  type: 'array',\r\n                  items: { type: 'string' },\r\n                  description: 'Nice-to-have features',\r\n                },\r\n                propertyType: {\r\n                  type: 'string',\r\n                  enum: ['single-family', 'condo', 'townhouse', 'multi-family', 'any'],\r\n                  description: 'Type of property desired',\r\n                },\r\n                timeline: {\r\n                  type: 'string',\r\n                  enum: ['ASAP', 'WITHIN_1_MONTH', 'WITHIN_3_MONTHS', 'WITHIN_6_MONTHS', 'FLEXIBLE'],\r\n                  description: 'Timeline for moving/purchasing',\r\n                },\r\n                isFirstTimeBuyer: {\r\n                  type: 'boolean',\r\n                  description: 'Is this a first-time home buyer?',\r\n                },\r\n                currentSituation: {\r\n                  type: 'string',\r\n                  enum: ['renting', 'selling', 'first-time', 'relocating', 'unknown'],\r\n                  description: 'Current living situation',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          type: 'function' as const,\r\n          function: {\r\n            name: 'extract_contact_info',\r\n            description: 'Extract contact information from user message',\r\n            parameters: {\r\n              type: 'object',\r\n              properties: {\r\n                name: {\r\n                  type: 'string',\r\n                  description: 'Full name',\r\n                },\r\n                email: {\r\n                  type: 'string',\r\n                  description: 'Email address',\r\n                },\r\n                phone: {\r\n                  type: 'string',\r\n                  description: 'Phone number',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      tool_choice: 'auto',\r\n    });\r\n\r\n    const responseMessage = completion.choices[0]?.message;\r\n    const toolCalls = responseMessage?.tool_calls || [];\r\n\r\n    let propertyPreferences: PropertyPreferences = {};\r\n    let contactInfo: ContactInfo = {};\r\n    const extractedFields: string[] = [];\r\n    let confidence = 0.8; // Default confidence\r\n\r\n    // Process tool calls\r\n    for (const toolCall of toolCalls) {\r\n      const functionName = toolCall.function.name;\r\n      const args = JSON.parse(toolCall.function.arguments);\r\n\r\n      if (functionName === 'extract_property_preferences') {\r\n        propertyPreferences = PropertyPreferencesSchema.parse(args);\r\n        extractedFields.push(...Object.keys(args).filter(k => args[k] !== undefined && args[k] !== null));\r\n      } else if (functionName === 'extract_contact_info') {\r\n        contactInfo = ContactInfoSchema.parse(args);\r\n        extractedFields.push(...Object.keys(args).filter(k => args[k] !== undefined && args[k] !== null));\r\n      }\r\n    }\r\n\r\n    // Calculate confidence based on number of fields extracted\r\n    if (extractedFields.length > 0) {\r\n      confidence = Math.min(0.9, 0.6 + (extractedFields.length * 0.1));\r\n    }\r\n\r\n    return {\r\n      propertyPreferences,\r\n      contactInfo,\r\n      extractedFields: [...new Set(extractedFields)], // Deduplicate\r\n      confidence,\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Data extraction error:', error);\r\n\r\n    // Fallback to regex-based extraction if AI fails\r\n    return fallbackExtraction(userMessage);\r\n  }\r\n}\r\n\r\n/**\r\n * Fallback extraction using regex patterns (when AI extraction fails)\r\n */\r\nfunction fallbackExtraction(message: string): ExtractionResult {\r\n  const propertyPreferences: PropertyPreferences = {};\r\n  const contactInfo: ContactInfo = {};\r\n  const extractedFields: string[] = [];\r\n\r\n  // Extract price\r\n  const priceMatch = message.match(/\\$?([\\d,]+)k?(?:,000)?(?:\\s*(?:max|budget|price|under|up to))?/i);\r\n  if (priceMatch) {\r\n    let amount = parseInt(priceMatch[1].replace(/,/g, ''));\r\n    if (message.toLowerCase().includes('k') && amount < 10000) {\r\n      amount *= 1000;\r\n    }\r\n    propertyPreferences.maxPrice = amount;\r\n    extractedFields.push('maxPrice');\r\n  }\r\n\r\n  // Extract bedrooms\r\n  const bedroomsMatch = message.match(/(\\d+)\\s*(?:bed|br|bedroom)/i);\r\n  if (bedroomsMatch) {\r\n    propertyPreferences.minBedrooms = parseInt(bedroomsMatch[1]);\r\n    extractedFields.push('minBedrooms');\r\n  }\r\n\r\n  // Extract bathrooms\r\n  const bathroomsMatch = message.match(/(\\d+(?:\\.\\d+)?)\\s*(?:bath|ba|bathroom)/i);\r\n  if (bathroomsMatch) {\r\n    propertyPreferences.minBathrooms = parseFloat(bathroomsMatch[1]);\r\n    extractedFields.push('minBathrooms');\r\n  }\r\n\r\n  // Extract features\r\n  const features: string[] = [];\r\n  if (/\\bpool\\b/i.test(message)) features.push('pool');\r\n  if (/\\b(?:backyard|yard)\\b/i.test(message)) features.push('backyard');\r\n  if (/\\bgarage\\b/i.test(message)) features.push('garage');\r\n  if (/\\bfireplace\\b/i.test(message)) features.push('fireplace');\r\n  if (features.length > 0) {\r\n    propertyPreferences.mustHaveFeatures = features;\r\n    extractedFields.push('mustHaveFeatures');\r\n  }\r\n\r\n  // Extract property type\r\n  if (/\\b(?:single-family|house|home)\\b/i.test(message)) {\r\n    propertyPreferences.propertyType = 'single-family';\r\n    extractedFields.push('propertyType');\r\n  } else if (/\\bcondo\\b/i.test(message)) {\r\n    propertyPreferences.propertyType = 'condo';\r\n    extractedFields.push('propertyType');\r\n  } else if (/\\btownhouse\\b/i.test(message)) {\r\n    propertyPreferences.propertyType = 'townhouse';\r\n    extractedFields.push('propertyType');\r\n  }\r\n\r\n  // Extract email\r\n  const emailMatch = message.match(/[\\w.-]+@[\\w.-]+\\.\\w+/);\r\n  if (emailMatch) {\r\n    contactInfo.email = emailMatch[0];\r\n    extractedFields.push('email');\r\n  }\r\n\r\n  // Extract phone\r\n  const phoneMatch = message.match(/\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}/);\r\n  if (phoneMatch) {\r\n    contactInfo.phone = phoneMatch[0];\r\n    extractedFields.push('phone');\r\n  }\r\n\r\n  return {\r\n    propertyPreferences,\r\n    contactInfo,\r\n    extractedFields,\r\n    confidence: extractedFields.length > 0 ? 0.6 : 0.3,\r\n  };\r\n}\r\n\r\n/**\r\n * Merge extracted data with existing conversation state\r\n * Only updates fields that are newly extracted\r\n */\r\nexport function mergeExtractedData(\r\n  existing: PropertyPreferences,\r\n  extracted: PropertyPreferences\r\n): PropertyPreferences {\r\n  return {\r\n    ...existing,\r\n    ...Object.fromEntries(\r\n      Object.entries(extracted).filter(([_, value]) => value !== undefined && value !== null)\r\n    ),\r\n  };\r\n}\r\n\r\n/**\r\n * Check if we have minimum required data to search properties\r\n */\r\nexport function hasMinimumSearchCriteria(preferences: PropertyPreferences): boolean {\r\n  return !!(preferences.location && preferences.maxPrice);\r\n}\r\n\r\n/**\r\n * Get list of missing critical fields for property search\r\n */\r\nexport function getMissingCriticalFields(preferences: PropertyPreferences): string[] {\r\n  const missing: string[] = [];\r\n\r\n  if (!preferences.location) missing.push('location');\r\n  if (!preferences.maxPrice) missing.push('budget');\r\n\r\n  return missing;\r\n}\r\n\r\n/**\r\n * Format preferences for display (debugging)\r\n */\r\nexport function formatPreferences(preferences: PropertyPreferences): string {\r\n  const parts: string[] = [];\r\n\r\n  if (preferences.location) parts.push(`📍 ${preferences.location}`);\r\n  if (preferences.maxPrice) parts.push(`💰 $${preferences.maxPrice.toLocaleString()}`);\r\n  if (preferences.minBedrooms) parts.push(`🛏️ ${preferences.minBedrooms}+ bed`);\r\n  if (preferences.minBathrooms) parts.push(`🛁 ${preferences.minBathrooms}+ bath`);\r\n  if (preferences.propertyType) parts.push(`🏠 ${preferences.propertyType}`);\r\n  if (preferences.mustHaveFeatures && preferences.mustHaveFeatures.length > 0) {\r\n    parts.push(`✨ ${preferences.mustHaveFeatures.join(', ')}`);\r\n  }\r\n\r\n  return parts.join(' | ');\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/%28chatbot%29/lib/services/crm-integration.ts"],"sourcesContent":["// lib/services/crm-integration.ts\r\nimport 'server-only';\r\n\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { PropertyPreferences, ContactInfo } from '@/lib/ai/data-extraction';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n/**\r\n * Lead score calculation based on engagement and preferences\r\n */\r\nexport enum LeadScore {\r\n  COLD = 'COLD',\r\n  WARM = 'WARM',\r\n  HOT = 'HOT',\r\n  QUALIFIED = 'QUALIFIED',\r\n}\r\n\r\n/**\r\n * Calculate lead score based on conversation engagement\r\n */\r\nfunction calculateLeadScore(\r\n  messageCount: number,\r\n  hasContactInfo: boolean,\r\n  hasCompleteCriteria: boolean,\r\n  viewedProperties: number,\r\n  budget?: number\r\n): { score: LeadScore; scoreValue: number } {\r\n  let scoreValue = 0;\r\n\r\n  // Engagement points\r\n  scoreValue += messageCount * 5; // 5 points per message\r\n  if (hasContactInfo) scoreValue += 30; // Big boost for contact info\r\n  if (hasCompleteCriteria) scoreValue += 20; // Complete search criteria\r\n  scoreValue += viewedProperties * 10; // 10 points per property viewed\r\n\r\n  // Budget qualifier\r\n  if (budget && budget >= 500000) scoreValue += 15; // Higher budget = more serious\r\n\r\n  // Determine score tier\r\n  let score: LeadScore;\r\n  if (scoreValue >= 80 && hasContactInfo) {\r\n    score = LeadScore.QUALIFIED; // Ready for agent contact\r\n  } else if (scoreValue >= 50) {\r\n    score = LeadScore.HOT; // Very engaged\r\n  } else if (scoreValue >= 25) {\r\n    score = LeadScore.WARM; // Moderately engaged\r\n  } else {\r\n    score = LeadScore.COLD; // Just started\r\n  }\r\n\r\n  return { score, scoreValue };\r\n}\r\n\r\n/**\r\n * Determine lead status based on conversation stage\r\n */\r\nfunction determineLeadStatus(\r\n  canSearch: boolean,\r\n  hasSearched: boolean,\r\n  hasScheduledShowing: boolean\r\n): string {\r\n  if (hasScheduledShowing) return 'CONTACTED'; // Agent engaged\r\n  if (hasSearched) return 'QUALIFIED'; // Saw properties\r\n  if (canSearch) return 'WORKING'; // Has criteria, ready to search\r\n  return 'NEW_LEAD'; // Just started conversation\r\n}\r\n\r\n/**\r\n * Create or update lead in CRM from chatbot conversation\r\n */\r\nexport async function syncLeadToCRM(params: {\r\n  sessionId: string;\r\n  organizationId: string;\r\n  contactInfo?: ContactInfo;\r\n  propertyPreferences?: PropertyPreferences;\r\n  messageCount: number;\r\n  hasSearched?: boolean;\r\n  viewedProperties?: string[];\r\n  lastMessage: string;\r\n}): Promise<{ leadId: string; isNew: boolean }> {\r\n  const {\r\n    sessionId,\r\n    organizationId,\r\n    contactInfo,\r\n    propertyPreferences,\r\n    messageCount,\r\n    hasSearched = false,\r\n    viewedProperties = [],\r\n    lastMessage,\r\n  } = params;\r\n\r\n  try {\r\n    // Check if lead already exists for this session\r\n    const existingLead = await prisma.leads.findFirst({\r\n      where: {\r\n        organization_id: organizationId,\r\n        custom_fields: {\r\n          path: ['chatbot_session_id'],\r\n          equals: sessionId,\r\n        },\r\n      },\r\n    });\r\n\r\n    // Calculate lead score\r\n    const hasContactInfo = !!(contactInfo?.email || contactInfo?.phone || contactInfo?.name);\r\n    const hasCompleteCriteria = !!(propertyPreferences?.location && propertyPreferences?.maxPrice);\r\n    const { score, scoreValue } = calculateLeadScore(\r\n      messageCount,\r\n      hasContactInfo,\r\n      hasCompleteCriteria,\r\n      viewedProperties.length,\r\n      propertyPreferences?.maxPrice\r\n    );\r\n\r\n    // Determine status\r\n    const status = determineLeadStatus(hasCompleteCriteria, hasSearched, false);\r\n\r\n    // Build custom fields JSON\r\n    const customFields = {\r\n      chatbot_session_id: sessionId,\r\n      property_preferences: propertyPreferences ? {\r\n        location: propertyPreferences.location,\r\n        maxPrice: propertyPreferences.maxPrice,\r\n        minBedrooms: propertyPreferences.minBedrooms,\r\n        minBathrooms: propertyPreferences.minBathrooms,\r\n        mustHaveFeatures: propertyPreferences.mustHaveFeatures || [],\r\n        niceToHaveFeatures: propertyPreferences.niceToHaveFeatures || [],\r\n        propertyType: propertyPreferences.propertyType,\r\n        timeline: propertyPreferences.timeline,\r\n        isFirstTimeBuyer: propertyPreferences.isFirstTimeBuyer,\r\n        currentSituation: propertyPreferences.currentSituation,\r\n      } : undefined,\r\n      last_property_search: hasSearched ? new Date().toISOString() : undefined,\r\n      viewed_properties: viewedProperties,\r\n      chatbot_engagement: {\r\n        message_count: messageCount,\r\n        last_message: lastMessage,\r\n        last_interaction: new Date().toISOString(),\r\n      },\r\n    };\r\n\r\n    if (existingLead) {\r\n      // Update existing lead\r\n      const updatedLead = await prisma.leads.update({\r\n        where: { id: existingLead.id },\r\n        data: {\r\n          name: contactInfo?.name || existingLead.name,\r\n          email: contactInfo?.email || existingLead.email,\r\n          phone: contactInfo?.phone || existingLead.phone,\r\n          budget: propertyPreferences?.maxPrice ? propertyPreferences.maxPrice.toString() : existingLead.budget,\r\n          timeline: propertyPreferences?.timeline || existingLead.timeline,\r\n          score: score,\r\n          score_value: scoreValue,\r\n          status: status as any,\r\n          notes: `Last message: \"${lastMessage.slice(0, 200)}\"`,\r\n          custom_fields: customFields as any,\r\n          last_contact_at: new Date(),\r\n          updated_at: new Date(),\r\n        },\r\n      });\r\n\r\n      console.log(`✅ Updated lead ${updatedLead.id} (score: ${score}, status: ${status})`);\r\n\r\n      return { leadId: updatedLead.id, isNew: false };\r\n    } else {\r\n      // Create new lead\r\n      const newLead = await prisma.leads.create({\r\n        data: {\r\n          organization_id: organizationId,\r\n          name: contactInfo?.name || 'Chatbot Lead',\r\n          email: contactInfo?.email || undefined,\r\n          phone: contactInfo?.phone || undefined,\r\n          source: 'CHATBOT',\r\n          status: status as any,\r\n          score: score,\r\n          score_value: scoreValue,\r\n          budget: propertyPreferences?.maxPrice ? propertyPreferences.maxPrice.toString() : undefined,\r\n          timeline: propertyPreferences?.timeline,\r\n          notes: `First message: \"${lastMessage.slice(0, 200)}\"`,\r\n          tags: ['chatbot', 'real-estate'],\r\n          custom_fields: customFields as any,\r\n          last_contact_at: new Date(),\r\n        },\r\n      });\r\n\r\n      console.log(`✅ Created new lead ${newLead.id} (score: ${score}, status: ${status})`);\r\n\r\n      return { leadId: newLead.id, isNew: true };\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ CRM sync error:', error);\r\n    throw new Error('Failed to sync lead to CRM');\r\n  }\r\n}\r\n\r\n/**\r\n * Log conversation activity to CRM\r\n */\r\nexport async function logActivity(params: {\r\n  organizationId: string;\r\n  leadId: string;\r\n  activityType: 'message' | 'property_view' | 'property_search' | 'showing_request';\r\n  description: string;\r\n  metadata?: Record<string, any>;\r\n}): Promise<void> {\r\n  const { organizationId, leadId, activityType, description, metadata } = params;\r\n\r\n  try {\r\n    // Find the lead to get assigned user\r\n    const lead = await prisma.leads.findUnique({\r\n      where: { id: leadId },\r\n      select: { assigned_to_id: true },\r\n    });\r\n\r\n    await prisma.activities.create({\r\n      data: {\r\n        organization_id: organizationId,\r\n        lead_id: leadId,\r\n        contact_id: undefined, // Chatbot leads are in leads table, not contacts\r\n        type: activityType === 'message' ? 'NOTE' : 'CALL', // Map to CRM activity types\r\n        title: `Chatbot: ${activityType}`,\r\n        description,\r\n        metadata: metadata as any,\r\n        completed_at: new Date(),\r\n        assigned_to_id: lead?.assigned_to_id || undefined,\r\n      },\r\n    });\r\n\r\n    console.log(`📝 Logged activity: ${activityType} for lead ${leadId}`);\r\n  } catch (error) {\r\n    console.error('❌ Activity logging error:', error);\r\n    // Don't throw - activity logging is non-critical\r\n  }\r\n}\r\n\r\n/**\r\n * Track property views for a lead\r\n */\r\nexport async function trackPropertyView(params: {\r\n  sessionId: string;\r\n  organizationId: string;\r\n  propertyId: string;\r\n  propertyAddress: string;\r\n}): Promise<void> {\r\n  const { sessionId, organizationId, propertyId, propertyAddress } = params;\r\n\r\n  try {\r\n    // Find lead by session\r\n    const lead = await prisma.leads.findFirst({\r\n      where: {\r\n        organization_id: organizationId,\r\n        custom_fields: {\r\n          path: ['chatbot_session_id'],\r\n          equals: sessionId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!lead) {\r\n      console.warn('⚠️ No lead found for property view tracking');\r\n      return;\r\n    }\r\n\r\n    // Update viewed properties\r\n    const customFields = lead.custom_fields as any;\r\n    const viewedProperties = customFields?.viewed_properties || [];\r\n\r\n    if (!viewedProperties.includes(propertyId)) {\r\n      viewedProperties.push(propertyId);\r\n\r\n      await prisma.leads.update({\r\n        where: { id: lead.id },\r\n        data: {\r\n          custom_fields: {\r\n            ...customFields,\r\n            viewed_properties: viewedProperties,\r\n          } as any,\r\n        },\r\n      });\r\n\r\n      // Log activity\r\n      await logActivity({\r\n        organizationId,\r\n        leadId: lead.id,\r\n        activityType: 'property_view',\r\n        description: `Viewed property: ${propertyAddress}`,\r\n        metadata: { property_id: propertyId, property_address: propertyAddress },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Property view tracking error:', error);\r\n    // Don't throw - tracking is non-critical\r\n  }\r\n}\r\n\r\n/**\r\n * Create showing appointment request\r\n */\r\nexport async function requestShowing(params: {\r\n  sessionId: string;\r\n  organizationId: string;\r\n  propertyId: string;\r\n  propertyAddress: string;\r\n  requestedDate?: Date;\r\n  requestedTime?: string;\r\n}): Promise<{ appointmentId: string }> {\r\n  const { sessionId, organizationId, propertyId, propertyAddress, requestedDate, requestedTime } = params;\r\n\r\n  try {\r\n    // Find lead by session\r\n    const lead = await prisma.leads.findFirst({\r\n      where: {\r\n        organization_id: organizationId,\r\n        custom_fields: {\r\n          path: ['chatbot_session_id'],\r\n          equals: sessionId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!lead) {\r\n      throw new Error('Lead not found for showing request');\r\n    }\r\n\r\n    // Find or assign default agent\r\n    const assignedAgent = lead.assigned_to_id || await getDefaultAgent(organizationId);\r\n\r\n    if (!assignedAgent) {\r\n      throw new Error('No agent available for showing');\r\n    }\r\n\r\n    // Create appointment (showing request)\r\n    const appointment = await prisma.appointments.create({\r\n      data: {\r\n        organization_id: organizationId,\r\n        contact_id: undefined, // Link to lead via activity log instead\r\n        assigned_to: assignedAgent,\r\n        title: `Property Showing: ${propertyAddress}`,\r\n        description: `Chatbot showing request for property ${propertyId}\\nRequested by: ${lead.name || 'Unknown'}\\nEmail: ${lead.email || 'N/A'}\\nPhone: ${lead.phone || 'N/A'}`,\r\n        start_time: requestedDate || new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow by default\r\n        end_time: requestedDate ? new Date(requestedDate.getTime() + 60 * 60 * 1000) : new Date(Date.now() + 25 * 60 * 60 * 1000), // 1 hour duration\r\n        status: 'PENDING',\r\n        location: propertyAddress,\r\n      },\r\n    });\r\n\r\n    // Update lead status\r\n    await prisma.leads.update({\r\n      where: { id: lead.id },\r\n      data: {\r\n        status: 'CONTACTED',\r\n        score: LeadScore.QUALIFIED,\r\n      },\r\n    });\r\n\r\n    // Log activity\r\n    await logActivity({\r\n      organizationId,\r\n      leadId: lead.id,\r\n      activityType: 'showing_request',\r\n      description: `Requested showing for ${propertyAddress}${requestedDate ? ` on ${requestedDate.toDateString()}` : ''}`,\r\n      metadata: {\r\n        property_id: propertyId,\r\n        property_address: propertyAddress,\r\n        appointment_id: appointment.id,\r\n      },\r\n    });\r\n\r\n    console.log(`📅 Created showing request ${appointment.id} for lead ${lead.id}`);\r\n\r\n    return { appointmentId: appointment.id };\r\n  } catch (error) {\r\n    console.error('❌ Showing request error:', error);\r\n    throw new Error('Failed to create showing request');\r\n  }\r\n}\r\n\r\n/**\r\n * Get default agent for organization (for auto-assignment)\r\n */\r\nasync function getDefaultAgent(organizationId: string): Promise<string | null> {\r\n  try {\r\n    // Find first active admin or employee\r\n    const user = await prisma.users.findFirst({\r\n      where: {\r\n        organization_id: organizationId,\r\n        role: {\r\n          in: ['ADMIN', 'EMPLOYEE'],\r\n        },\r\n      },\r\n      orderBy: { created_at: 'asc' },\r\n    });\r\n\r\n    return user?.id || null;\r\n  } catch (error) {\r\n    console.error('❌ Default agent lookup error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Get lead summary for agent handoff\r\n */\r\nexport async function getLeadSummary(sessionId: string, organizationId: string): Promise<{\r\n  lead: any;\r\n  preferences: PropertyPreferences | null;\r\n  engagementMetrics: {\r\n    messageCount: number;\r\n    viewedProperties: number;\r\n    score: string;\r\n    status: string;\r\n  };\r\n}> {\r\n  try {\r\n    const lead = await prisma.leads.findFirst({\r\n      where: {\r\n        organization_id: organizationId,\r\n        custom_fields: {\r\n          path: ['chatbot_session_id'],\r\n          equals: sessionId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!lead) {\r\n      throw new Error('Lead not found');\r\n    }\r\n\r\n    const customFields = lead.custom_fields as any;\r\n    const preferences = customFields?.property_preferences || null;\r\n    const engagement = customFields?.chatbot_engagement || {};\r\n    const viewedProperties = customFields?.viewed_properties || [];\r\n\r\n    return {\r\n      lead,\r\n      preferences,\r\n      engagementMetrics: {\r\n        messageCount: engagement.message_count || 0,\r\n        viewedProperties: viewedProperties.length,\r\n        score: lead.score,\r\n        status: lead.status,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Lead summary error:', error);\r\n    throw new Error('Failed to get lead summary');\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 884, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/garre/STRIVE/Strive-SaaS/%28chatbot%29/app/api/chat/route.ts"],"sourcesContent":["// app/api/chat/route.ts\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport Groq from 'groq-sdk/index.mjs';\r\nimport { z } from 'zod';\r\nimport { loadIndustryConfig } from '@/lib/industries/configs';\r\nimport { RAGService } from '@/lib/services/rag-service';\r\nimport { RentCastService, PropertySearchParams } from '@/lib/modules/real-estate/services/rentcast-service';\r\nimport { IndustryType } from '@strive/shared/types/industry';\r\nimport { Message } from '@strive/shared/types/conversation';\r\nimport { ChatRequestSchema } from '@strive/shared/schemas/chat-request';\r\nimport { RAGContext } from '@strive/shared/types/rag';\r\nimport {\r\n  extractDataFromMessage,\r\n  mergeExtractedData,\r\n  hasMinimumSearchCriteria,\r\n  formatPreferences,\r\n  PropertyPreferences,\r\n} from '@/lib/ai/data-extraction';\r\nimport {\r\n  syncLeadToCRM,\r\n  logActivity,\r\n  trackPropertyView,\r\n} from '@/lib/services/crm-integration';\r\n\r\nconst groq = new Groq({\r\n  apiKey: process.env.GROQ_API_KEY,\r\n});\r\n\r\n// Session state cache (in production, use Redis or database)\r\nconst sessionStateCache = new Map<string, PropertyPreferences>();\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Parse and validate request body\r\n    const body = await req.json();\r\n    const validated = ChatRequestSchema.parse(body);\r\n\r\n    const {\r\n      messages,\r\n      industry = 'strive',\r\n      sessionId,\r\n      organizationId = 'default_org', // TODO: Get from auth context\r\n    } = validated;\r\n\r\n    // Load industry configuration\r\n    const config = await loadIndustryConfig(industry as IndustryType);\r\n\r\n    // Get the latest user message\r\n    const latestUserMessage = messages[messages.length - 1];\r\n\r\n    // 🎯 PHASE 1: INTELLIGENT DATA EXTRACTION\r\n    console.log('🧠 Extracting data from user message...');\r\n    const extraction = await extractDataFromMessage(\r\n      latestUserMessage.content,\r\n      messages.slice(-5).map(m => ({ role: m.role as 'user' | 'assistant', content: m.content }))\r\n    );\r\n\r\n    console.log('✅ Extracted:', {\r\n      fields: extraction.extractedFields,\r\n      confidence: extraction.confidence,\r\n      preferences: formatPreferences(extraction.propertyPreferences),\r\n    });\r\n\r\n    // Get or initialize session state\r\n    let sessionPreferences = sessionStateCache.get(sessionId) || {};\r\n\r\n    // Merge extracted data with existing session state\r\n    sessionPreferences = mergeExtractedData(sessionPreferences, extraction.propertyPreferences);\r\n    sessionStateCache.set(sessionId, sessionPreferences);\r\n\r\n    console.log('💾 Current session state:', formatPreferences(sessionPreferences));\r\n\r\n    // Check if we can search now\r\n    const canSearchNow = hasMinimumSearchCriteria(sessionPreferences);\r\n    console.log('🔍 Can search:', canSearchNow);\r\n\r\n    // Build conversation history context\r\n    const conversationHistory = {\r\n      stage: determineConversationStage(messages as unknown as Message[]),\r\n      messageCount: messages.length,\r\n      problemsDiscussed: extractProblemsDiscussed(messages as unknown as Message[]),\r\n      currentPreferences: sessionPreferences,\r\n      extractedThisMessage: extraction.extractedFields,\r\n      canSearch: canSearchNow,\r\n    };\r\n\r\n    // 🔥 RAG ENHANCEMENT: Get semantic context\r\n    console.log('🔍 Searching for similar conversations...');\r\n    const ragContext = await RAGService.buildRAGContext(\r\n      latestUserMessage.content,\r\n      industry,\r\n      conversationHistory\r\n    );\r\n\r\n    console.log('✅ RAG Context:', {\r\n      detectedProblems: ragContext.searchResults.detectedProblems,\r\n      confidence: ragContext.searchResults.confidence.overallConfidence,\r\n      suggestedApproach: ragContext.guidance.suggestedApproach,\r\n    });\r\n\r\n    // Build enhanced system prompt with RAG context AND extracted data\r\n    const enhancedSystemPrompt = buildEnhancedSystemPrompt(\r\n      config.systemPrompt,\r\n      ragContext,\r\n      sessionPreferences,\r\n      extraction.extractedFields,\r\n      canSearchNow\r\n    );\r\n\r\n    // Prepare messages for Groq\r\n    const groqMessages = [\r\n      {\r\n        role: 'system' as const,\r\n        content: enhancedSystemPrompt,\r\n      },\r\n      ...messages\r\n        .filter(m => m.role !== 'system')\r\n        .map(m => ({\r\n          role: m.role as 'user' | 'assistant',\r\n          content: m.content,\r\n        })),\r\n    ];\r\n\r\n    // Stream response from Groq\r\n    const stream = await groq.chat.completions.create({\r\n      model: 'llama-3.3-70b-versatile',\r\n      messages: groqMessages,\r\n      temperature: 0.7,\r\n      max_tokens: 2000, // Increased for property results\r\n      stream: true,\r\n    });\r\n\r\n    // Create readable stream\r\n    const encoder = new TextEncoder();\r\n    let fullResponse = '';\r\n\r\n    const readableStream = new ReadableStream({\r\n      async start(controller) {\r\n        try {\r\n          // Stream LLM response\r\n          for await (const chunk of stream) {\r\n            const content = chunk.choices[0]?.delta?.content || '';\r\n            fullResponse += content;\r\n            \r\n            controller.enqueue(\r\n              encoder.encode(`data: ${JSON.stringify({ content })}\\n\\n`)\r\n            );\r\n          }\r\n\r\n          // 🏠 PROPERTY SEARCH: Check if response contains property search request OR if we can auto-search\r\n          const shouldSearch = industry === 'real-estate' && (\r\n            fullResponse.includes('<property_search>') || canSearchNow\r\n          );\r\n\r\n          if (shouldSearch) {\r\n            try {\r\n              console.log('🏠 Property search triggered');\r\n\r\n              let searchParams: PropertySearchParams;\r\n\r\n              // Check if AI provided explicit search parameters\r\n              const searchMatch = fullResponse.match(/<property_search>([\\s\\S]*?)<\\/property_search>/);\r\n\r\n              if (searchMatch) {\r\n                // AI provided explicit search params\r\n                searchParams = JSON.parse(searchMatch[1]);\r\n                console.log('🔍 Using AI-provided search params:', searchParams);\r\n              } else if (canSearchNow) {\r\n                // Auto-search using extracted session state\r\n                searchParams = {\r\n                  location: sessionPreferences.location!,\r\n                  maxPrice: sessionPreferences.maxPrice!,\r\n                  minBedrooms: sessionPreferences.minBedrooms || 2, // Default: 2+ beds\r\n                  minBathrooms: sessionPreferences.minBathrooms || 1, // Default: 1+ baths\r\n                  mustHaveFeatures: sessionPreferences.mustHaveFeatures || [],\r\n                  niceToHaveFeatures: sessionPreferences.niceToHaveFeatures,\r\n                  propertyType: sessionPreferences.propertyType === 'any' ? undefined : sessionPreferences.propertyType,\r\n                };\r\n                console.log('🔍 Auto-searching with extracted params:', searchParams);\r\n              } else {\r\n                // Skip search\r\n                throw new Error('Cannot search: minimum criteria not met');\r\n              }\r\n\r\n              // Fetch properties from RentCast\r\n              const properties = await RentCastService.searchProperties(searchParams);\r\n              console.log(`✅ Found ${properties.length} properties`);\r\n\r\n              // Match and score properties\r\n              const matches = RentCastService.matchProperties(properties, searchParams);\r\n              console.log(`🎯 Top ${matches.length} matches selected`);\r\n\r\n              // Send property results to client\r\n              const propertyData = JSON.stringify({\r\n                type: 'property_results',\r\n                properties: matches,\r\n              });\r\n              controller.enqueue(encoder.encode(`data: ${propertyData}\\n\\n`));\r\n            } catch (propertyError) {\r\n              console.error('❌ Property search error:', propertyError);\r\n              const errorData = JSON.stringify({\r\n                type: 'property_search_error',\r\n                error: 'Failed to search properties. Please try again.',\r\n              });\r\n              controller.enqueue(encoder.encode(`data: ${errorData}\\n\\n`));\r\n            }\r\n          }\r\n\r\n          // 🔥 STORE CONVERSATION: Save for future learning\r\n          console.log('💾 Storing conversation for learning...');\r\n          await RAGService.storeConversation({\r\n            industry,\r\n            sessionId,\r\n            userMessage: latestUserMessage.content,\r\n            assistantResponse: fullResponse,\r\n            conversationStage: conversationHistory.stage,\r\n            outcome: 'in_progress',\r\n            bookingCompleted: false,\r\n            problemDetected: ragContext.searchResults.detectedProblems[0],\r\n            solutionPresented: ragContext.searchResults.recommendedSolutions[0],\r\n          });\r\n\r\n          // 💼 CRM INTEGRATION: Sync lead to platform CRM\r\n          if (industry === 'real-estate') {\r\n            try {\r\n              console.log('💼 Syncing lead to CRM...');\r\n\r\n              const { leadId, isNew } = await syncLeadToCRM({\r\n                sessionId,\r\n                organizationId,\r\n                contactInfo: extraction.contactInfo,\r\n                propertyPreferences: sessionPreferences,\r\n                messageCount: messages.length,\r\n                hasSearched: shouldSearch,\r\n                viewedProperties: [], // Updated via separate tracking\r\n                lastMessage: latestUserMessage.content,\r\n              });\r\n\r\n              console.log(`✅ ${isNew ? 'Created' : 'Updated'} lead ${leadId} in CRM`);\r\n\r\n              // Log conversation activity\r\n              await logActivity({\r\n                organizationId,\r\n                leadId,\r\n                activityType: 'message',\r\n                description: `Chatbot conversation: \"${latestUserMessage.content.slice(0, 100)}...\"`,\r\n                metadata: {\r\n                  extracted_fields: extraction.extractedFields,\r\n                  can_search: canSearchNow,\r\n                  preferences: sessionPreferences,\r\n                },\r\n              });\r\n\r\n              // Log property search activity if triggered\r\n              if (shouldSearch) {\r\n                await logActivity({\r\n                  organizationId,\r\n                  leadId,\r\n                  activityType: 'property_search',\r\n                  description: `Searched properties in ${sessionPreferences.location} under $${sessionPreferences.maxPrice?.toLocaleString()}`,\r\n                  metadata: {\r\n                    search_params: sessionPreferences,\r\n                  },\r\n                });\r\n              }\r\n            } catch (crmError) {\r\n              console.error('❌ CRM sync error (non-critical):', crmError);\r\n              // Don't fail the request if CRM sync fails\r\n            }\r\n          }\r\n\r\n          // Send completion signal\r\n          controller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\r\n          controller.close();\r\n        } catch (error) {\r\n          console.error('❌ Streaming error:', error);\r\n          controller.error(error);\r\n        }\r\n      },\r\n    });\r\n\r\n    return new NextResponse(readableStream, {\r\n      headers: {\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache',\r\n        Connection: 'keep-alive',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    // Handle validation errors\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Invalid request format',\r\n          details: error.issues.map((e: z.ZodIssue) => ({\r\n            path: e.path.join('.'),\r\n            message: e.message\r\n          }))\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Handle other errors\r\n    console.error('❌ Chat API error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Build enhanced system prompt with RAG context AND conversation state\r\n */\r\nfunction buildEnhancedSystemPrompt(\r\n  basePrompt: string,\r\n  ragContext: RAGContext,\r\n  sessionPreferences: PropertyPreferences,\r\n  extractedFields: string[],\r\n  canSearch: boolean\r\n): string {\r\n  const { searchResults, guidance } = ragContext;\r\n\r\n  let enhancement = '\\n\\n## 🎯 CONTEXTUAL INTELLIGENCE\\n\\n';\r\n\r\n  // Add conversation state awareness\r\n  enhancement += `### 📊 Current Conversation State:\\n\\n`;\r\n\r\n  if (Object.keys(sessionPreferences).length > 0) {\r\n    enhancement += `**Information Already Collected:**\\n`;\r\n    if (sessionPreferences.location) enhancement += `- 📍 Location: ${sessionPreferences.location}\\n`;\r\n    if (sessionPreferences.maxPrice) enhancement += `- 💰 Budget: $${sessionPreferences.maxPrice.toLocaleString()}\\n`;\r\n    if (sessionPreferences.minBedrooms) enhancement += `- 🛏️ Bedrooms: ${sessionPreferences.minBedrooms}+\\n`;\r\n    if (sessionPreferences.minBathrooms) enhancement += `- 🛁 Bathrooms: ${sessionPreferences.minBathrooms}+\\n`;\r\n    if (sessionPreferences.propertyType) enhancement += `- 🏠 Type: ${sessionPreferences.propertyType}\\n`;\r\n    if (sessionPreferences.mustHaveFeatures && sessionPreferences.mustHaveFeatures.length > 0) {\r\n      enhancement += `- ✨ Must-have features: ${sessionPreferences.mustHaveFeatures.join(', ')}\\n`;\r\n    }\r\n    enhancement += '\\n';\r\n  }\r\n\r\n  if (extractedFields.length > 0) {\r\n    enhancement += `**Just Extracted from Last Message:** ${extractedFields.join(', ')}\\n\\n`;\r\n  }\r\n\r\n  // Search readiness\r\n  if (canSearch) {\r\n    enhancement += `🚀 **READY TO SEARCH!** You have location + budget. You can trigger a property search NOW by outputting the <property_search> format!\\n\\n`;\r\n  } else {\r\n    const missing: string[] = [];\r\n    if (!sessionPreferences.location) missing.push('location');\r\n    if (!sessionPreferences.maxPrice) missing.push('budget');\r\n    if (missing.length > 0) {\r\n      enhancement += `❌ **Cannot search yet.** Missing: ${missing.join(', ')}\\n`;\r\n      enhancement += `Ask for these naturally in your next response!\\n\\n`;\r\n    }\r\n  }\r\n\r\n  // RAG-Enhanced Guidance\r\n  if (searchResults.detectedProblems.length > 0) {\r\n    enhancement += `### 💡 Similar Conversations:\\n`;\r\n    searchResults.detectedProblems.forEach((problem: string) => {\r\n      enhancement += `- ${problem}\\n`;\r\n    });\r\n    enhancement += '\\n';\r\n  }\r\n\r\n  if (guidance.suggestedApproach) {\r\n    enhancement += `### 🎯 Recommended Approach:\\n${guidance.suggestedApproach}\\n\\n`;\r\n  }\r\n\r\n  enhancement += `**REMEMBER:** Don't ask for information you already have! Reference it naturally instead.\\n`;\r\n  enhancement += `**REMEMBER:** If you can search now, do it! Don't keep asking unnecessary questions.\\n`;\r\n\r\n  return basePrompt + enhancement;\r\n}\r\n\r\n/**\r\n * Determine current conversation stage\r\n */\r\nfunction determineConversationStage(messages: Message[]): string {\r\n  const userMessages = messages.filter(m => m.role === 'user');\r\n  \r\n  if (userMessages.length <= 2) return 'discovery';\r\n  if (userMessages.length <= 4) return 'qualifying';\r\n  if (userMessages.length <= 6) return 'solutioning';\r\n  \r\n  return 'closing';\r\n}\r\n\r\n/**\r\n * Extract problems discussed so far\r\n */\r\nfunction extractProblemsDiscussed(messages: Message[]): string[] {\r\n  const problems: string[] = [];\r\n  const problemKeywords = [\r\n    'losing customers',\r\n    'churn',\r\n    'defects',\r\n    'quality',\r\n    'support tickets',\r\n    'fraud',\r\n    'maintenance',\r\n    'inventory',\r\n    // Real estate specific\r\n    'looking for',\r\n    'buy',\r\n    'sell',\r\n    'property',\r\n    'home',\r\n    'budget',\r\n    'prequalified',\r\n    'market',\r\n  ];\r\n\r\n  messages.forEach(message => {\r\n    const content = message.content.toLowerCase();\r\n    problemKeywords.forEach(keyword => {\r\n      if (content.includes(keyword) && !problems.includes(keyword)) {\r\n        problems.push(keyword);\r\n      }\r\n    });\r\n  });\r\n\r\n  return problems;\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}