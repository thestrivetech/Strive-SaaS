{
  "project": {
    "name": "Strive Website",
    "version": "1.0.0",
    "description": "Modern React/TypeScript business website with Express backend, PostgreSQL database, and AI-powered features for Strive Tech company",
    "type": "fullstack_business_website",
    "status": "active_development",
    "repository": "https://github.com/strive/strive-website-replit"
  },
  
  "architecture": {
    "frontend": {
      "framework": "React 18",
      "language": "TypeScript 5",
      "bundler": "Vite",
      "routing": "Wouter",
      "stateManagement": "TanStack Query",
      "styling": "TailwindCSS",
      "uiLibrary": "shadcn/ui (Radix UI)",
      "iconLibrary": "Lucide React",
      "testing": ["Vitest", "React Testing Library", "Playwright"]
    },
    "backend": {
      "runtime": "Node.js 20",
      "framework": "Express",
      "language": "TypeScript 5",
      "database": "PostgreSQL (Neon)",
      "orm": "Drizzle ORM",
      "authentication": "Supabase Auth",
      "validation": "Zod"
    },
    "infrastructure": {
      "hosting": "Replit Platform",
      "database": "Neon PostgreSQL",
      "auth": "Supabase",
      "ci_cd": "GitHub Actions (active)",
      "security": "Helmet + Rate Limiting (active)",
      "testing": "Vitest + Playwright (active)",
      "performance": "React.lazy Code Splitting (active)",
      "monitoring": "Prometheus + Grafana (planned)"
    }
  },

  "workflow_rules": {
    "file_purposes": {
      "memory.json": "Central brain - rules and reminders ONLY (not task lists or session logs)",
      "chat_logs/": "Session work documentation with detailed activities and context",
      "change_log.md": "All code edits/deletions with before/after states for rollback capability",
      "plan.md": "Living implementation progress tracker - MUST update when tasks complete",
      "updates/": "Implementation blueprints and strategic plans",
      ".claude/agents/": "Agent-specific configurations and responsibilities"
    },
    "mandatory_actions": {
      "session_start": [
        "MANDATORY: Read Serena memory files for instant project intelligence",
        "Read previous session's chat log for context",
        "Check plan.md for current implementation progress",
        "Check change_log.md for recent code changes",
        "Use memory.json ONLY for rules and reminders - NEVER as task list"
      ],
      "during_session": [
        "Update plan.md immediately when tasks are completed",
        "Document ALL code changes in change_log.md with rollback info",
        "Use chat logs for session documentation - NEVER memory.json",
        "Never add task lists or session details to memory.json"
      ],
      "session_end": [
        "Ensure plan.md reflects all completed work",
        "Verify change_log.md has all code modifications",
        "Create comprehensive handoff in session chat log",
        "Memory.json should remain unchanged (brain content only)"
      ]
    },
    "critical_reminders": [
      "NEVER use memory.json as a task list or session log",
      "NEVER leave plan.md outdated after completing tasks", 
      "ALWAYS document code changes in change_log.md",
      "ALWAYS check all 4 files at session start: memory.json (rules), chat_logs (context), plan.md (progress), change_log.md (changes)",
      "Memory.json is the BRAIN - it contains rules, not tasks or session data"
    ],
    "common_mistakes_to_avoid": [
      "Adding completed_session_X arrays to memory.json",
      "Adding immediate_priorities or task lists to memory.json",
      "Using memory.json for session timestamps or progress tracking", 
      "Forgetting to update plan.md when infrastructure is complete",
      "Not documenting code changes with rollback information"
    ]
  },

  "agents": {
    "main-claude-orchestrator": {
      "role": "master_coordinator_and_quality_monitor",
      "model": "opus",
      "responsibilities": ["task_distribution", "quality_oversight", "session_continuity", "parallel_workflow_coordination", "agent_coaching"],
      "mcp_tools": ["serena", "context7", "playwright"],
      "critical_reminders": [
        "ALWAYS consult Serena memory files at session start for project intelligence",
        "Use workflow_rules above - check file purposes at session start",
        "Leverage Serena's intelligent code search before making architectural decisions",
        "Ensure all agents follow proper documentation patterns",
        "Monitor for memory.json misuse - it's a BRAIN not task tracker",
        "Monitor all agents work to see where they could use improvement and document it in the evaluations folder located in your specific chat log in addition to theirs",
        "Ensure all architect agent's are using comments to any code that is written",
        "Monitor tool usage to see if there should be any changes to specific agents tools to speed up workflow or to increase accuracy"
      ]
    },
    "frontend-architect": {
      "role": "react_typescript_specialist",
      "model": "opus", 
      "responsibilities": ["react_development", "shadcn_ui_implementation", "state_management", "responsive_design"],
      "mcp_tools": ["playwright", "context7", "Serena"],
      "tech_stack": ["React 18", "TypeScript 5", "shadcn/ui", "TailwindCSS", "TanStack Query", "Wouter"],
      "line_limits": {"small": 100, "medium": 250, "large": 500}
    },
    "backend-architect": {
      "role": "express_api_specialist", 
      "model": "opus",
      "responsibilities": ["api_development", "database_integration", "authentication", "server_logic"],
      "mcp_tools": ["context7","Serena"],
      "tech_stack": ["Node.js 20", "Express", "PostgreSQL", "Drizzle ORM", "Supabase", "Zod"],
      "line_limits": {"backend_files": 350, "utility_files": 200}
    },
    "database-specialist": {
      "role": "postgresql_drizzle_Supabase_specialist",
      "model": "sonnet",
      "responsibilities": ["schema_design", "drizzle_orm", "database_optimization", "supabase_integration"],
      "mcp_tools": ["context7", "Serena"],
      "tech_stack": ["Neon PostgreSQL", "Drizzle ORM", "Supabase Auth", "Zod validation"]
    },
    "devops-specialist": {
      "role": "replit_deployment_specialist",
      "model": "sonnet", 
      "responsibilities": ["replit_deployment", "performance_optimization", "infrastructure_management", "ci_cd_setup"],
      "mcp_tools": ["context7"],
      "tech_stack": ["Replit Platform", "Vite", "TypeScript", "GitHub Actions"]
    },
    "ui-ux": {
      "role": "design_user_experience",
      "model": "sonnet",
      "responsibilities": ["ui_design", "ux_optimization", "shadcn_design_systems", "accessibility", "visual_consistency"],
      "mcp_tools": ["playwright", "context7", "serena"],
      "design_system": ["shadcn/ui", "TailwindCSS", "WCAG 2.1 AA", "Mobile-first"]
    },
    "test-architect": {
      "role": "quality_assurance_tdd",
      "model": "opus",
      "responsibilities": ["tdd_implementation", "vitest_setup", "playwright_e2e", "coverage_optimization"],
      "mcp_tools": ["context7"],
      "testing_stack": ["Vitest", "React Testing Library", "Playwright", "80% coverage target"]
    },
    "documentation-agent": {
      "role": "session_and_knowledge_manager", 
      "model": "sonnet",
      "responsibilities": ["session_logging", "context_preservation", "technical_documentation", "workflow_continuity"],
      "mcp_tools": [],
      "critical_reminder": "Document in chat_logs/ - NEVER in memory.json"
    }
  },

  "file_locations": {
    "critical_files": {
      "session_logs": "chat_logs/orchestrator/",
      "agent_configs": ".claude/agents/", 
      "memory_system": ".claude/memory.json",
      "development_rules": "docs/development/dev_rules.md",
      "implementation_plan": "updates/plan.md",
      "change_tracking": "change_log.md"
    },
    "frontend_structure": {
      "components": "client/src/components/ui/",
      "pages": "client/src/pages/",
      "hooks": "client/src/hooks/",
      "lib": "client/src/lib/"
    },
    "backend_structure": {
      "server_entry": "server/index.ts",
      "routes": "server/routes.ts",
      "auth": "server/auth.ts", 
      "middleware": "server/middleware/",
      "supabase": "server/supabase.ts"
    },
    "shared_structure": {
      "schema": "shared/schema.ts",
      "types": "shared/types.ts"
    }
  },

  "coding_standards": {
    "line_limits": {
      "small_components": 100,
      "medium_components": 250,
      "large_components": 500,
      "backend_files": 350,
      "utility_files": 200
    },
    "typescript_requirements": [
      "Always use TypeScript strict mode",
      "Define interfaces for all component props",
      "Use Zod for runtime validation", 
      "Avoid 'any' types completely",
      "Use proper async/await patterns"
    ],
    "react_requirements": [
      "Functional components only",
      "Custom hooks for shared logic",
      "shadcn/ui components for UI",
      "TailwindCSS for styling",
      "Proper cleanup in useEffect"
    ],
    "backend_requirements": [
      "Express RESTful API design",
      "Proper error handling and status codes",
      "Zod validation for all inputs",
      "Supabase for authentication",
      "Drizzle ORM for database operations"
    ]
  },

  "quality_gates": {
    "code_review": {
      "required_checks": ["type_checking", "linting", "test_coverage", "security_scan"]
    },
    "test_coverage": {
      "minimum": 80,
      "critical_paths": 100
    },
    "performance": {
      "page_load_time": 1500,
      "lighthouse_score": 95,
      "bundle_size": 500
    }
  },

  "serena_integration": {
    "onboarding_status": "COMPLETE",
    "memory_files": {
      "project_overview": "Complete project purpose, tech stack, and architectural patterns",
      "suggested_commands": "Essential development, testing, and deployment commands",
      "code_style_conventions": "TypeScript patterns, React conventions, and coding standards",
      "task_completion_checklist": "Complete development workflow from setup to deployment"
    },
    "usage_protocol": {
      "session_initialization": [
        "mcp__serena__list_memories - Review available project intelligence",
        "mcp__serena__read_memory - Consult specific memory files for context"
      ],
      "development_workflow": [
        "mcp__serena__get_symbols_overview - Understand file structure",
        "mcp__serena__find_symbol - Locate functions, classes, components",
        "mcp__serena__search_for_pattern - Find patterns across codebase",
        "mcp__serena__find_referencing_symbols - Analyze dependencies"
      ]
    },
    "integration_benefits": [
      "50%+ faster session starts with instant project context",
      "Consistent code quality through pattern recognition",
      "Intelligent task delegation with codebase understanding",
      "Enhanced decision making based on existing patterns"
    ],
    "agent_optimization": {
      "high_priority": ["main-claude-orchestrator", "ui-ux"],
      "consider_adding": ["frontend-architect", "backend-architect"]
    }
  },

  "environment": {
    "development": {
      "port": 5000,
      "database_url": "DATABASE_URL env var",
      "supabase_config": "SUPABASE_URL and SUPABASE_ANON_KEY"
    },
    "production": {
      "platform": "Replit",
      "port": "process.env.PORT", 
      "database": "Neon PostgreSQL",
      "auth": "Supabase"
    }
  }
}